<?php
defined('BASEPATH') OR exit('No direct script access allowed');

require APPPATH . '/controllers/Login.php';

class myController extends login
{

    /**
     * Index Page for this controller.
     *
     * Maps to the following URL
     *        http://example.com/index.php/welcome
     *    - or -
     *        http://example.com/index.php/welcome/index
     *    - or -
     * Since this controller is set as the default controller in
     * config/routes.php, it's displayed at http://example.com/
     *
     * So any other public methods not prefixed with an underscore will
     * map to /index.php/welcome/<method_name>
     * @see https://codeigniter.com/user_guide/general/urls.html
     */

    public function __construct()
    {
        parent::__construct();
        $this->isLoggedIn1();
    }

    public function index()
    {
        dashboard($this->department);
    }

    function dashboard($module = NULL)
    {
        $data['pendingLicense'] = $this->myModel->dashbordPendingLicenseGet();
        $data['priorityLicense'] = $this->myModel->dashbordPriorityLicenseGet();
        $data['approvedLicense'] = $this->myModel->dashbordApprovedLicenseGet();
        $data['troubleLicense'] = $this->myModel->dashbordTroubleLicenseGet();

        $data['pendingRegistration'] = $this->myModel->dashbordPendingRegistrationGet();
        $data['returnedRegistration'] = $this->myModel->dashbordReturnedRegistrationGet();
        $data['approvedRegistration'] = $this->myModel->dashbordApprovedRegistrationGet();
        $data['rejectedRegistration'] = $this->myModel->dashbordRejectedRegistrationGet();


        $data['inprocessRecord'] = $this->myModel->inprocessHistory();
        $data['newlicenseRecord'] = $this->myModel->newLicenseHistory();
        $data['variancelicenseRecord'] = $this->myModel->varianceLicenseHistory();
        $data['renewalLicenseRecord'] = $this->myModel->renewalLicenseHistory();

        $data['officersRecord'] = $this->myModel->getLicensingOfficersRecord();
        // $data['troubleRegistration'] = $this->myModel->dashbordTroubleRegistrationGet();
        // $data['riskBasedGMPInspection'] = $this->myModel->dashbordRiskBasedGMPInspectionGet();
        // $data['siteVerificationInspection'] = $this->myModel->dashbordSiteVerificationInspectionGet();
        // $data['establishmentLicenseInspection'] = $this->myModel->dashbordEstablishmentLicenseInspectionGet();
        // $data['productSpecificInspection'] = $this->myModel->dashbordProductSpecificInspectionGet();

        $data['pendingDML'] = $this->myModel->dashbordPendingDMLGet();
        $data['countManufacturer'] = $this->myModel->countDashbordManufacturerGetGet();

        if ($this->roleId == '12' || $this->roleId == '16' || $this->roleId == '20' || $this->roleId == '36' || $this->roleId == '37') {
            $data['inspectionDraft'] = $this->myModel->draftInspection();
            $data['inspectionScheduled'] = $this->myModel->scheduledInspection();
            $data['inspectionPending'] = $this->myModel->pendingInspection();
            $data['inspectionInitiated'] = $this->myModel->initiatedInspection();
            $data['inspectionCompleted'] = $this->myModel->completedInspection();
        }

        $data['dashboard'] = '';
        $this->global['pageTitle'] = $this->companyProject . ' | Dashboard';

        //$this->loadViews('dashboard', $this->global, $data, NULL);
        if ($this->roleId == '1') {
            $this->loadViews('dashboard-admin', $this->global, $data, NULL);
        } else if ($this->roleId == '26' || $this->roleId == '48' || $this->roleId == '49' || $this->roleId == '50') {
            if ($this->roleId == '26') {
                $data['appdraft'] = $this->myModel->companyDraftDataApplication()[0]->resultCount + $this->myModel->companyDraftApplication()[0]->resultCount;
                $data['appsubmitted'] = $this->myModel->companySubmittedDataApplication()[0]->resultCount + $this->myModel->companySubmittedApplication()[0]->resultCount;
                $data['appreturned'] = $this->myModel->companyReturnedDataApplication()[0]->resultCount + $this->myModel->companyReturnedApplication()[0]->resultCount;
                $data['appapproved'] = $this->myModel->companyApprovedDataApplication()[0]->resultCount + $this->myModel->companyApprovedApplication()[0]->resultCount;
                $data['apprejected'] = $this->myModel->companyRejectedDataApplication()[0]->resultCount + $this->myModel->companyRejectedApplication()[0]->resultCount;
                $data['inspScheduled'] = $this->myModel->companyInspectionScheduled()[0]->resultCount;
                $data['companyLicense'] = json_decode($this->myModel->companyLicenseGet($this->companyId));
                $data['userCompany'] = $this->myModel->userCompany();
            }
            $this->loadViews('dashboard-company', $this->global, $data, NULL);
        } else {
            $this->loadViews('dashboard', $this->global, $data, NULL);
        }
    }

    function dashboardSuper()
    {
        $this->global['pageTitle'] = $this->companyProject . ' | Dashboard';

        //if($this->companyEmail == 'dra.gov.pk' && $this->userId <> 1 && $this->roleId <> 35){
        if ($this->companyEmail == 'dra.gov.pk' && $this->roleId <> 1 && $this->roleId <> 26) {
            $this->loadViews('dashboardSuper', $this->global, NULL, NULL);
        } else {
            redirect('dashboard');
        }
    }

    //################## AJAX FUNCTIONS ##################

    function example1AjaxGet()
    {
        $functionName = __FUNCTION__;

        if ($this->input->post('data')) {
            echo $this->myModel->$functionName($this->input->post('data'), $this->input->post('compare'));
        }
    }

    function example2AjaxGet()
    {
        $functionName = __FUNCTION__;

        echo $this->myModel->$functionName('', '');
    }

    function example3AjaxGet()
    {
        $functionName = __FUNCTION__;

        if ($this->input->post('data')) {
            echo $this->myModel->$functionName($this->input->post('data'), '');
        }
    }

    function companyLicenseGet()
    {
        $functionName = __FUNCTION__;
        echo $this->myModel->$functionName($this->input->post('companyId'));
    }

    function myAjaxGet()
    {
        $functionName = __FUNCTION__;

        echo $this->myModel->$functionName($this->input->post('table'), '', '', $this->input->post('columnName'));
    }

    function myAjaxGetCompany()
    {
        $functionName = __FUNCTION__;

        echo $this->myModel->$functionName($this->input->post('table'), '', '', $this->input->post('columnName'));
    }

    function myAjaxSearchGet()
    {
        $functionName = __FUNCTION__;

        echo $this->myModel->$functionName($this->input->post('table'), $this->input->post('columnValue'), $this->input->post('columnName'));
    }

    function myAjaxSearch()
    {
        $functionName = __FUNCTION__;

        echo $this->myModel->$functionName($this->input->post('table'), $this->input->post('columnValue'), $this->input->post('columnName'));
    }

    function sectionApprovedAjaxGet11()
    {
        $functionName = __FUNCTION__;

        if ($this->input->post('data')) {
            echo $this->myModel->$functionName($this->input->post('data'), $this->input->post('compare'));
        }
    }

    function pharmaGroupApprovedAjaxGet11()
    {
        $functionName = __FUNCTION__;

        if ($this->input->post('data')) {
            echo $this->myModel->$functionName($this->input->post('data'), $this->input->post('compare'));
        }
    }

    function usedForApprovedAjaxGet11()
    {
        $functionName = __FUNCTION__;

        if ($this->input->post('data')) {
            echo $this->myModel->$functionName($this->input->post('data'), $this->input->post('compare'));
        }
    }

    function memberAjaxGet()
    {
        $functionName = __FUNCTION__;

        echo $this->myModel->$functionName('', '');
    }

    function memberLeadAjaxGet()
    {
        $functionName = __FUNCTION__;

        echo $this->myModel->$functionName('', '');
    }

    function memberExternalAjaxGet()
    {
        $functionName = __FUNCTION__;

        echo $this->myModel->$functionName('', '');
    }

    function innAjaxGet()
    {
        $functionName = __FUNCTION__;

        echo $this->myModel->$functionName('', '');
    }

    //################## AJAX FUNCTIONS ##################

    function uploaddata($moduleName = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if ($moduleName == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $table = 'tbl_' . $moduleName;

        if ($moduleName == 'city') {
            $filename = $_FILES['attachment']['tmp_name'];
            $allowedFileTypes = array('application/vnd.ms-excel', 'text/csv');
            if ($_FILES['attachment']['size'] <= 5000000) {
                if (in_array($_FILES['attachment']['type'], $allowedFileTypes)) {
                    $file = fopen($filename, 'r');
                    $row = 0;
                    while (($field = fgetcsv($file, 10000, ',')) !== FALSE) {
                        if ($row < 1) {
                            $row++;
                            continue;
                        }
                        $data = ['cityName' => $field[0], 'remarks' => $field[1]];

                        $data['createdby'] = $this->userId;
                        $data['createddate'] = date($this->dateTimeFormat);
                        $data['updatedby'] = $this->userId;
                        $data['updateddate'] = date($this->dateTimeFormat);
                        $result = 0;
                        $resultdetail = 0;
                        $result = $this->loginModel->recordAjaxSave($data, $table);
                        $row++;
                    }
                    fclose($file);
                }
            }
        }

        if ($result > 0) {
            $this->session->set_flashdata('success', 'Data uploaded successfully.');
        } else {
            $this->session->set_flashdata('error', 'Something went wrong.');
        }

        redirect($moduleName . '/lookup');
    }

    function licensereport($action = NULL, $id = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $myAction = '';
        if ($action == 'submit') {
            if (explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            }
            if (explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            }
            if ($myAction == 'add') {
                $myAction = 'save';
            }
            if ($myAction == 'edit') {
                $myAction = 'update';
            }
        }


        //---------- STAGES ---------
        // * Draft
        // * Submitted
        // * Screening
        // * Under R and I
        // * Received By DRAP
        // * Under Review Stage 1
        // * Review Complete
        // * Under Inspection
        // * Post Inspection Process
        // * Under Board Stage 2
        // * Referred Back To Company (Editable)
        // * Referred Back To Company (Locked)
        // * Recommended By Board Stage 3
        // * Deferred and Closed
        // * Approved
        //---------- STAGES ---------


        $table = 'tbl_license';
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        //$data['records'] = $this->myModel->$functionName($table, $searchText);
        $data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);
        $data['recordsDetailManagement'] = $this->myModel->applylicenseDetailManagementEdit($id);
        $data['recordsDetailSection'] = $this->myModel->applylicenseDetailSectionEdit($id);
        $data['recordsDetailFacility'] = $this->myModel->applylicenseDetailFacilityEdit($id);

        $data['recordsDetailSectionMachine'] = $this->myModel->applylicenseDetailSectionMachineEdit($id);
        $data['recordsDetailQualifiedStaff'] = $this->myModel->applylicenseDetailQualifiedStaffEdit($id);
        $data['recordsDetailLayoutPlan'] = $this->myModel->applylicenseDetailLayoutPlanEdit($id);
        $data['recordsDetailApi'] = $this->myModel->applylicenseDetailApiEdit($id);
        $data['recordsDetailFacility'] = $this->myModel->applylicenseDetailFacilityEdit($id);
        $data['recordsDetailQuery'] = $this->myModel->licenseDetailQueryEdit($id);
        $data['licenseType'] = $this->myModel->licenseTypeGet();
        $data['pharmaGroup'] = $this->myModel->pharmaGroupGet();
        $data['usedFor'] = $this->myModel->usedForGet();
        $data['section'] = $this->myModel->sectionGet();
        $data['designation'] = $this->myModel->companyDesignationGet();
        $data['qualification'] = $this->myModel->companyQualificationGet();
        $data['specialization'] = $this->myModel->companySpecializationGet();
        $data['sectionApproved'] = $this->myModel->sectionApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['pharmaGroupApproved'] = $this->myModel->pharmaGroupApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['usedForApproved'] = $this->myModel->usedForApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['sectionApproved11'] = $this->myModel->sectionApprovedGet11($id);
        $data['pharmaGroupApproved11'] = $this->myModel->pharmaGroupApprovedGet11($id);
        $data['usedForApproved11'] = $this->myModel->usedForApprovedGet11($id);
        $data['historyDesignation'] = $this->myModel->licenseDesignationGet();
        $data['recordsDetailMeeting'] = $this->myModel->licenseDetailMeetingEdit($id);
        $data['recordsDetailHistory'] = $this->myModel->licenseDetailHistoryEdit($id);
        $data['city'] = $this->loginModel->cityGet();


        if ($action == 'lookup' && $recordLookup == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'edit' && $recordEdit == 1) {

            if (!$id) {
                $this->accessDenied();
                return;
            }


            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }
            $data['challanInfo'] = $this->myModel->getChallanInfo($id, $data['recordsEdit'][0]->phase);

            $seenBy = explode(",", $data['recordsEdit'][0]->seenBy);
            if (!(in_array($this->userId, $seenBy))) {
                $this->loginModel->seenByUpdate($id, $this->userId, $table);
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $this->db->select('BaseTbl.licenseStatus');
            $this->db->from('tbl_license as BaseTbl');
            $this->db->where('BaseTbl.id', $id);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $licenseStatus = $row->licenseStatus;
                    if ($licenseStatus == 'Draft') {
                        $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);
                    } else {
                        $this->session->set_flashdata('error', 'Record cannot be deleted.');
                        $result = 0;
                    }
                }
            }

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }
            $validationFailed = 0;
            // foreach ($data as $key => $value)
            // {
            //     if($key == 'remarks'){
            //         continue;
            //     }
            //     $this->form_validation->set_rules($key, ucwords(implode(' ', preg_split('/(?=[A-Z])/', $key))), ['required']);
            //     if($key == 'Something'){
            //         // Custom Rule
            //     }
            // }
            if ($this->form_validation->run() == FALSE) {
                $validationFailed = 1;
                $this->session->set_flashdata('error', validation_errors());
            }

            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }

            $this->db->select('BaseTbl.id, BaseTbl.companyId, Company.companyName');
            $this->db->from('tbls_user as BaseTbl');
            $this->db->join('tbls_company as Company', 'Company.id = BaseTbl.companyId', 'left');
            $this->db->where('BaseTbl.id', $this->userId);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    $companyId = $row->companyId;
                    $companyName = $row->companyName;
                }
            }

            // Licensing Workflow Save START
            if ($this->roleId == '26') { // Company Submission
                if ($data['licenseStatus'] == 'Save') {
                    $data['licenseStatus'] = 'Draft';
                    $data['companyId'] = $companyId;
                    $data['companyName'] = $companyName;
                    $data['phase'] = 'Site Verification';
                }
                unset($data['forwardedTo_detail101']);
                unset($data['remarks_detail101']);
                unset($data['sendQueryToCompany']);
            }
            // Licensing Workflow Save END

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
            }
            unset($data['undefined']);
            //extract challan data
            $challan_no = $data['challan_no'];
            $challan_fee = $data['challan_fee'];
            $challan_status = $data['challan_status'];
            $challan_msg = $data['challan_msg'];
            $challan_account_id = $data['challan_account_id'];
            $challan_account_title = $data['challan_account_title'];
            $challan_date = $data['challan_date'];

            unset($data['challan_no']);
            unset($data['challan_fee']);
            unset($data['challan_status']);
            unset($data['challan_msg']);
            unset($data['challan_account_id']);
            unset($data['challan_account_title']);
            unset($data['challan_date']);

            $result = $this->loginModel->recordAjaxSave($data, $table);

            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }
            // Save Challan Data
            $this->loginModel->recordAjaxSave(['masterId' => $result,
                'phase' => 'Site Verification',
                'challan_no' => $challan_no,
                'challan_fee' => $challan_fee,
                'challan_status' => $challan_status,
                'challan_msg' => $challan_msg,
                'challan_account_id' => $challan_account_id,
                'challan_account_title' => $challan_account_title,
                'challan_date' => $challan_date,
                'status' => $challan_status,
                'createdby' => $data['updatedby'],
                'createddate' => $data['updateddate']
            ], 'tbl_challan');


            $sId = 0;
            $keys = array_keys($dataDetailTable);
            foreach (array_keys($dataDetailTable) as $key) {
                $current_key = current($keys);
                $current_value = $dataDetailTable[$current_key];
                $next_key = next($keys);
                $next_value = @$dataDetailTable[$next_key];
                $tableName = substr($current_key, 0, strpos($current_key, '-'));
                $nextTableName = substr($next_key, 0, strpos($next_key, '-'));
                if ($tableName == 'tabledetailmanagement') {
                    $tableDetail = 'tbl_companymanagement';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                $sId++;
            }

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else if ($myAction == 'update' && $recordSubmit == 1) {

            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }
            $validationFailed = 0;
            // foreach ($data as $key => $value)
            // {
            //     if($key == 'remarks'){
            //         continue;
            //     }
            //     $this->form_validation->set_rules($key, ucwords(implode(' ', preg_split('/(?=[A-Z])/', $key))), ['required']);
            //     if($key == 'Something'){
            //         // Custom Rule
            //     }
            // }
            if ($this->form_validation->run() == FALSE) {
                $validationFailed = 1;
                $this->session->set_flashdata('error', validation_errors());
            }

            $data['reportby'] = $this->userId;
            $data['reportdate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }

            // Licensing Workflow Update START
            $this->db->select('BaseTbl.id, User.email, User.userName, BaseTbl.rniRefNo, BaseTbl.licenseNo, Company.id as companyId, Company.companyUniqueNo, BaseTbl.licenseStatus, BaseTbl.phase');
            $this->db->from('tbl_license as BaseTbl');
            $this->db->join('tbls_company as Company', 'Company.id = BaseTbl.companyId', 'left');
            $this->db->join('tbls_user as User', 'User.companyId = Company.id', 'left');
            $this->db->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    $email = $row->email;
                    $userName = $row->userName;
                    $rniRefNo = $row->rniRefNo;
                    $licenseNo = $row->licenseNo;
                    $companyId = $row->companyId;
                    $companyUniqueNo = $row->companyUniqueNo;
                    $licenseStatus = $row->licenseStatus;
                    $phase = $row->phase;

                }
            }


            unset($data['forwardedTo_detail101']);
            unset($data['remarks_detail101']);
            unset($data['sendQueryToCompany']);
            unset($data['undefined']);
            unset($data['licenseStatus']);
            //$data['licenseStatus'] = $licenseStatus;


            // Licensing Workflow Update END


            $result = $this->loginModel->recordAjaxUpdate('id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), $data, $table);

            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }

            $sId = 0;
            $keys = array_keys($dataDetailTable);
            foreach (array_keys($dataDetailTable) as $key) {
                $current_key = current($keys);
                $current_value = $dataDetailTable[$current_key];
                $next_key = next($keys);
                $next_value = @$dataDetailTable[$next_key];
                $tableName = substr($current_key, 0, strpos($current_key, '-'));
                $nextTableName = substr($next_key, 0, strpos($next_key, '-'));
                if ($tableName == 'tabledetailmanagement1') {
                    $tableDetail = 'tbl_companymanagement';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }

                    if ($nextTableName <> $tableName) {

                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetaillayoutplan') {
                    $tableDetail = 'tbl_licenselayoutplan';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailapi') {
                    $tableDetail = 'tbl_licenseapi';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailfacility') {
                    $tableDetail = 'tbl_licensefacility';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailsection') {
                    $tableDetail = 'tbl_licensesection';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailqualifiedstaff') {
                    $tableDetail = 'tbl_companyqualifiedstaff';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailsections') {
                    $tableDetail = 'tbl_licensesection';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailsection2') {
                    $tableDetail = 'tbl_licensesectionmachine';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailmeeting' && ($this->roleId == '43')) {
                    $tableDetail = 'tbl_licensemeeting';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    $meetingdetail = $this->myModel->licenseDetailMeetingEdit($datadetail['id'][0]);

                    if ($nextTableName <> $tableName) {
                        if ($meetingdetail['remarks'] != $datadetail['remarks'][0] || $meetingdetail['status'] != $datadetail['status'][0]) {
                            $tableDetail = 'tbl_meetingagenda';

                            $masterId = $datadetail['agendaid'][0];
                            unset($datadetail['agendaid']);
                            $resultdetail = $this->loginModel->recordAjaxUpdate('id', $masterId, ['remarks' => $datadetail['remarks'][0], 'status' => $datadetail['status'][0], 'updatedby' => $this->userId, 'updateddate' => date($this->dateTimeFormat)], $tableDetail);

                            //$resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                            unset($datadetail);
                        }
                    }
                }
                $sId++;
            }

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/edit/' . $id);
        } else {

            $this->accessDenied();
            return;
        }
    }


    function newlicense($action = NULL, $id = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $myAction = '';
        if ($action == 'submit') {
            if (explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            }
            if (explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            }
            if ($myAction == 'add') {
                $myAction = 'save';
            }
            if ($myAction == 'edit') {
                $myAction = 'update';
            }
        }


        //---------- STAGES ---------
        // * Draft
        // * Submitted
        // * Screening
        // * Under R and I
        // * Received By DRAP
        // * Under Review Stage 1
        // * Review Complete
        // * Under Inspection
        // * Post Inspection Process
        // * Under Board Stage 2
        // * Referred Back To Company (Editable)
        // * Referred Back To Company (Locked)
        // * Recommended By Board Stage 3
        // * Deferred and Closed
        // * Approved
        //---------- STAGES ---------

        $table = 'tbl_license';
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        if ($action == 'lookup') {
            $data['records'] = $this->myModel->$functionName($table, $id);
        }else{
            $data['records'] = $this->myModel->$functionName($table, $searchText);
        }
        $data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);
        $data['recordsDetailManagement'] = $this->myModel->applylicenseDetailManagementEdit($id);
        $data['recordsDetailSection'] = $this->myModel->applylicenseDetailSectionEdit($id);
        $data['recordsDetailSectionMachine'] = $this->myModel->applylicenseDetailSectionMachineEdit($id);
        $data['recordsDetailQualifiedStaff'] = $this->myModel->applylicenseDetailQualifiedStaffEdit($id);
        $data['recordsDetailLayoutPlan'] = $this->myModel->applylicenseDetailLayoutPlanEdit($id);
        $data['recordsDetailApi'] = $this->myModel->applylicenseDetailApiEdit($id);
        $data['recordsDetailFacility'] = $this->myModel->applylicenseDetailFacilityEdit($id);
        $data['recordsDetailQuery'] = $this->myModel->licenseDetailQueryEdit($id);
        $data['licenseType'] = $this->myModel->licenseTypeGet();
        $data['pharmaGroup'] = $this->myModel->pharmaGroupGet();
        $data['usedFor'] = $this->myModel->usedForGet();
        $data['section'] = $this->myModel->sectionGet();
        $data['designation'] = $this->myModel->companyDesignationGet();
        $data['qualification'] = $this->myModel->companyQualificationGet();
        $data['specialization'] = $this->myModel->companySpecializationGet();
        $data['sectionApproved'] = $this->myModel->sectionApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['pharmaGroupApproved'] = $this->myModel->pharmaGroupApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['usedForApproved'] = $this->myModel->usedForApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['sectionApproved11'] = $this->myModel->sectionApprovedGet11($id);
        $data['pharmaGroupApproved11'] = $this->myModel->pharmaGroupApprovedGet11($id);
        $data['usedForApproved11'] = $this->myModel->usedForApprovedGet11($id);
        $data['historyDesignation'] = $this->myModel->licenseDesignationGet();
        $data['recordsDetailMeeting'] = $this->myModel->licenseDetailMeetingEdit($id);
        $data['recordsDetailHistory'] = $this->myModel->licenseDetailHistoryEdit($id);
        $data['city'] = $this->loginModel->cityGet();

        if ($action == 'lookup' && $recordLookup == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }
            $data['challanInfo'] = $this->myModel->getChallanInfo($id, $data['recordsEdit'][0]->phase);

            $seenBy = explode(",", $data['recordsEdit'][0]->seenBy);
            if (!(in_array($this->userId, $seenBy))) {
                $this->loginModel->seenByUpdate($id, $this->userId, $table);
            }

            if ($data['recordsEdit'][0]->licenseStatus == 'Draft') {
                if ($this->roleId <> '26' && $data['recordsEdit'][0]->companyUniqueNo <> $this->companyUniqueNo) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            } else if ($data['recordsEdit'][0]->licenseStatus == 'Submitted') {
                if ($this->roleId <> '38') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            } else if ($data['recordsEdit'][0]->licenseStatus == 'Recommended By Board Stage 3') {

                if ($data['recordsEdit'][0]->discussInBoard == 1) {
                    if ($this->roleId <> '6') {
                        $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                        redirect(__FUNCTION__ . '/lookup');
                    }
                } else {
                    if ($data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                        $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                        redirect(__FUNCTION__ . '/lookup');
                    }
                }

            } else {
                if ($this->roleId == 38) {
                    /*
                     if ($data['recordsEdit'][0]->lastAssignedroleId <> 38) {
                        $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                        redirect(__FUNCTION__ . '/lookup');
                    }
                    */
                } else if ($data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }

            if ($data['recordsEdit'][0]->licenseStatus == 'Under Inspection') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }


            if ($data['recordsEdit'][0]->licenseStatus == 'Rejected and Closed') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->licenseStatus == 'Approved') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }


            /*
            if($data['recordsEdit'][0]->licenseStatus == 'Referred Back To Company (Editable)'){
                //if($this->roleId <> '26' && $data['records'][0]->companyUniqueNo <> $this->companyUniqueNo){
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__.'/lookup');
                //}
            }*/
            if ($data['recordsEdit'][0]->licenseStatus == 'Under Board Stage 2') {
                if ($this->roleId <> '43') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->licenseStatus == 'Referred Back To Company (Locked)') {
                //if($this->roleId <> '26' && $data['records'][0]->companyUniqueNo <> $this->companyUniqueNo){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
                //}
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }
            $data['challanInfo'] = $this->myModel->getChallanInfo($id, $data['recordsEdit'][0]->phase);

            $seenBy = explode(",", $data['recordsEdit'][0]->seenBy);
            if (!(in_array($this->userId, $seenBy))) {
                $this->loginModel->seenByUpdate($id, $this->userId, $table);
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $this->db->select('BaseTbl.licenseStatus');
            $this->db->from('tbl_license as BaseTbl');
            $this->db->where('BaseTbl.id', $id);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $licenseStatus = $row->licenseStatus;
                    if ($licenseStatus == 'Draft') {
                        $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);
                    } else {
                        $this->session->set_flashdata('error', 'Record cannot be deleted.');
                        $result = 0;
                    }
                }
            }

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }
            $validationFailed = 0;
            // foreach ($data as $key => $value)
            // {
            //     if($key == 'remarks'){
            //         continue;
            //     }
            //     $this->form_validation->set_rules($key, ucwords(implode(' ', preg_split('/(?=[A-Z])/', $key))), ['required']);
            //     if($key == 'Something'){
            //         // Custom Rule
            //     }
            // }
            if ($this->form_validation->run() == FALSE) {
                $validationFailed = 1;
                $this->session->set_flashdata('error', validation_errors());
            }

            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }

            $this->db->select('BaseTbl.id, BaseTbl.companyId, Company.companyName');
            $this->db->from('tbls_user as BaseTbl');
            $this->db->join('tbls_company as Company', 'Company.id = BaseTbl.companyId', 'left');
            $this->db->where('BaseTbl.id', $this->userId);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    $companyId = $row->companyId;
                    $companyName = $row->companyName;
                }
            }

            // Licensing Workflow Save START
            if ($this->roleId == '26') { // Company Submission
                if ($data['licenseStatus'] == 'Save') {
                    $data['licenseStatus'] = 'Draft';
                    $data['companyId'] = $companyId;
                    $data['companyName'] = $companyName;
                    $data['phase'] = 'Site Verification';
                }
                unset($data['forwardedTo_detail101']);
                unset($data['remarks_detail101']);
                unset($data['sendQueryToCompany']);
            }
            // Licensing Workflow Save END

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
            }
            unset($data['undefined']);
            //extract challan data
            $challan_no = $data['challan_no'];
            $challan_fee = $data['challan_fee'];
            $challan_status = $data['challan_status'];
            $challan_msg = $data['challan_msg'];
            $challan_account_id = $data['challan_account_id'];
            $challan_account_title = $data['challan_account_title'];
            $challan_date = $data['challan_date'];

            unset($data['challan_no']);
            unset($data['challan_fee']);
            unset($data['challan_status']);
            unset($data['challan_msg']);
            unset($data['challan_account_id']);
            unset($data['challan_account_title']);
            unset($data['challan_date']);

            $result = $this->loginModel->recordAjaxSave($data, $table);

            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }
            // Save Challan Data
            $this->loginModel->recordAjaxSave(['masterId' => $result,
                'phase' => 'Site Verification',
                'challan_no' => $challan_no,
                'challan_fee' => $challan_fee,
                'challan_status' => $challan_status,
                'challan_msg' => $challan_msg,
                'challan_account_id' => $challan_account_id,
                'challan_account_title' => $challan_account_title,
                'challan_date' => $challan_date,
                'status' => $challan_status,
                'createdby' => $data['updatedby'],
                'createddate' => $data['updateddate']
            ], 'tbl_challan');


            $sId = 0;
            $keys = array_keys($dataDetailTable);
            foreach (array_keys($dataDetailTable) as $key) {
                $current_key = current($keys);
                $current_value = $dataDetailTable[$current_key];
                $next_key = next($keys);
                $next_value = @$dataDetailTable[$next_key];
                $tableName = substr($current_key, 0, strpos($current_key, '-'));
                $nextTableName = substr($next_key, 0, strpos($next_key, '-'));
                if ($tableName == 'tabledetailmanagement') {
                    $tableDetail = 'tbl_companymanagement';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                $sId++;
            }

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'update' && $recordSubmit == 1) {

            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }


            $validationFailed = 0;

            if ($this->form_validation->run() == FALSE) {
                $validationFailed = 1;
                $this->session->set_flashdata('error', validation_errors());
            }

            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }

            // Licensing Workflow Update START
            $this->db->select('BaseTbl.id, User.email, User.userName, BaseTbl.rniRefNo, BaseTbl.licenseNo, Company.id as companyId, Company.companyUniqueNo, BaseTbl.licenseStatus, BaseTbl.phase');
            $this->db->from('tbl_license as BaseTbl');
            $this->db->join('tbls_company as Company', 'Company.id = BaseTbl.companyId', 'left');
            $this->db->join('tbls_user as User', 'User.companyId = Company.id', 'left');
            $this->db->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    $email = $row->email;
                    $userName = $row->userName;
                    $rniRefNo = $row->rniRefNo;
                    $licenseNo = $row->licenseNo;
                    $companyId = $row->companyId;
                    $companyUniqueNo = $row->companyUniqueNo;
                    $licenseStatus = $row->licenseStatus;
                    $phase = $row->phase;

                }
            }

            // Save Challan Data
            // check if already challan is added
            $this->db->select('"' . $result . '" as masterId, BaseTbl.challan_no, ');
            $this->db->from('tbl_challan as BaseTbl');
            $this->db->where('BaseTbl.isDeleted', 0);
            $this->db->where('BaseTbl.phase', $phase);
            $this->db->where('BaseTbl.masterId', $id);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->loginModel->recordAjaxSave(['masterId' => $id,
                    'phase' => $phase,
                    'challan_no' => $data['challan_no'],
                    'challan_fee' => $data['challan_fee'],
                    'challan_status' => $data['challan_status'],
                    'challan_msg' => $data['challan_msg'],
                    'challan_account_id' => $data['challan_account_id'],
                    'challan_account_title' => $data['challan_account_title'],
                    'challan_date' => $data['challan_date'],
                    'status' => $data['challan_status'],
                    'createdby' => $data['updatedby'],
                    'createddate' => $data['updateddate']
                ], 'tbl_challan');
                unset($data['challan_no']);
                unset($data['challan_fee']);
                unset($data['challan_status']);
                unset($data['challan_msg']);
                unset($data['challan_account_id']);
                unset($data['challan_account_title']);
                unset($data['challan_date']);
            }


            if ($this->roleId <> '26' && $data['licenseStatus'] != 'Save') {
                $byRole = $this->designation.' '.$this->department;

                if ($data['forwardedTo_detail101']) {

                    if (isset($data['sendQueryToCompany']) && $data['sendQueryToCompany'] == '1') {
                        if ($data['forwardedTo_detail101'] == $this->userId) {
                            $forwardedRoleUser = $this->loginModel->getDesignationDepartment(103);
                            $forwardedRole = $forwardedRoleUser[0]->urole;
                            $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => 103, 'byRole'=>$byRole,'forwardedRole'=>$forwardedRole, 'remarks' => $data['remarks_detail101'], 'status' => $licenseStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'isDeleted' => 1], 'tbl_licensehistory');
                        } else {
                            $forwardedRoleUser = $this->loginModel->getDesignationDepartment($data['forwardedTo_detail101']);
                            $forwardedRole = $forwardedRoleUser[0]->urole;
                            $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'byRole'=>$byRole, 'forwardedTo' => $data['forwardedTo_detail101'],'forwardedRole'=>$forwardedRole, 'remarks' => $data['remarks_detail101'], 'status' => $licenseStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                        }
                        if ($phase == 'Site Verification') {
                            $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'dateTime' => date($this->dateTimeFormat), 'title' => 'Site Verification', 'type' => 'License', 'message' => $data['remarks_detail101'], 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => 'Info Required From Company', 'shortcomming' => $data['reviewer1Remarks'], 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_query');
                        }
                        if ($phase == 'Layout Plan') {
                            $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'dateTime' => date($this->dateTimeFormat), 'title' => 'Layout Plan', 'type' => 'License', 'message' => $data['remarks_detail101'], 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => 'Info Required From Company', 'shortcomming' => $data['reviewer1Remarks'], 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_query');
                        }
                        if ($phase == 'Grant of License') {
                            $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'dateTime' => date($this->dateTimeFormat), 'title' => 'Grant of License', 'type' => 'License', 'message' => $data['remarks_detail101'], 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => 'Info Required From Company', 'shortcomming' => $data['reviewer1Remarks'], 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_query');
                        }
                        // ------------------- Send Mail Start -------------------
                        if (isset($email)) {
                            $mailData['from'] = 'DRAP';
                            $mailData['subject'] = 'PIRIMS | Query';
                            $mailData['title'] = 'Greetings, ' . $userName . '!';
                            $mailData['message'] = "Your have a query from DRAP of new license application with ref. no " . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . ".";
                            $mailData['email'] = $email;
                            $sendStatus = emailSend($mailData);
                            if ($sendStatus == true) {
                                $result = 1;
                            }
                        }
                        if (!isset($email)) {
                            $result = 0;
                        }
                        // ------------------- Send Mail End -------------------

                    } else {
                        $forwardedRoleUser = $this->loginModel->getDesignationDepartment($data['forwardedTo_detail101']);
                        $forwardedRole = $forwardedRoleUser[0]->urole;
                        $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo_detail101'], 'byRole'=>$byRole,'forwardedRole'=>$forwardedRole, 'remarks' => $data['remarks_detail101'], 'status' => $licenseStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                    }
                } else {
                    if ($this->roleId == '18' && $data['licenseStatus'] == 'Proceed' && $licenseStatus == 'Under Review Stage 1') {
                        $forwardedRoleUser = $this->loginModel->getDesignationDepartment(103);
                        $forwardedRole = $forwardedRoleUser[0]->urole;
                        $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => 103, 'byRole'=>$byRole,'forwardedRole'=>$forwardedRole, 'remarks' => $data['remarks_detail101'], 'status' => $licenseStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'isDeleted' => 1], 'tbl_licensehistory');
                    }
                }
            }
            unset($data['forwardedTo_detail101']);
            unset($data['remarks_detail101']);
            unset($data['sendQueryToCompany']);
            unset($data['undefined']);

            if ($this->roleId == '26') { // Company Submission
                if ($data['licenseStatus'] == 'Save') {
                    $data['licenseStatus'] = $licenseStatus;
                }
                if ($data['licenseStatus'] == 'Submit') {
                    $data['submissionDate'] = date($this->dateTimeFormat);
                    $data['rniRefNo'] = $rniRefNo;
                    if ($rniRefNo == NULL) {
                        $data['rniRefNo'] = 'L-N-' . $id;
                    }
                    if ($phase == 'Site Verification') {
                        if ($licenseStatus == 'Draft') {
                            $data['licenseStatus'] = 'Submitted';
                            $data['siteSubmissionDate'] = date($this->dateTimeFormat);
                            $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "License" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response From Applicant" as remarks, "Draft" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                            $this->db->from('tbl_licensehistory as BaseTbl');
                            $this->db->where('BaseTbl.isDeleted', 0);
                            $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                            $this->db->limit(1);
                            $this->db->order_by('BaseTbl.id', 'desc');
                            $query = $this->db->get();
                            $count = $query->num_rows();
                            if ($count === 0) {
                                //$this->session->set_flashdata('error', 'No record found.');
                                $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'userId' => $this->userId, 'forwardedTo' => 103, 'dateTime' => date($this->dateTimeFullFormat), 'remarks' => "Response From Applicant", 'status' => "Draft", 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');

                                // ------------------- Send Alert Start -------------------
                                $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                                $this->db->from('tbl_licensehistory as BaseTbl');
                                $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                                $this->db->where('BaseTbl.isDeleted', 0);
                                $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                                $this->db->limit(1);
                                $this->db->order_by('BaseTbl.id', 'desc');
                                $queryAlert = $this->db->get();
                                $countAlert = $queryAlert->num_rows();
                                if ($countAlert === 0) {
                                    $this->session->set_flashdata('error', 'No record found.');
                                }
                                if ($countAlert > 0) {
                                    foreach ($queryAlert->result() as $rowAlert) {
                                        $id = $rowAlert->id;
                                        $masterId = $rowAlert->masterId;
                                        $forwardedTo = $rowAlert->forwardedTo;
                                        $userName = $rowAlert->userName;
                                    }
                                }

                                $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'license/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                                // ------------------- Send Alert End -------------------
                            }
                            if ($count > 0) {
                                foreach ($query->result() as $row) {
                                    $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licensehistory');
                                }

                                // ------------------- Send Alert Start -------------------
                                $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                                $this->db->from('tbl_licensehistory as BaseTbl');
                                $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                                $this->db->where('BaseTbl.isDeleted', 0);
                                $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                                $this->db->limit(1);
                                $this->db->order_by('BaseTbl.id', 'desc');
                                $queryAlert = $this->db->get();
                                $countAlert = $queryAlert->num_rows();
                                if ($countAlert === 0) {
                                    $this->session->set_flashdata('error', 'No record found.');
                                }
                                if ($countAlert > 0) {
                                    foreach ($queryAlert->result() as $rowAlert) {
                                        $id = $rowAlert->id;
                                        $masterId = $rowAlert->masterId;
                                        $forwardedTo = $rowAlert->forwardedTo;
                                        $userName = $rowAlert->userName;
                                    }
                                }

                                $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'license/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                                // ------------------- Send Alert End -------------------
                            }
                        }
                        if ($licenseStatus == 'Referred Back To Company (Locked)') {
                            $data['licenseStatus'] = 'Under Review Stage 1';
                            $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "License" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response From Applicant" as remarks, "Referred Back To Company (Locked)" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                            $this->db->from('tbl_licensehistory as BaseTbl');
                            $this->db->where('BaseTbl.isDeleted', 0);
                            $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                            $this->db->limit(1);
                            $this->db->order_by('BaseTbl.id', 'desc');
                            $query = $this->db->get();
                            $count = $query->num_rows();
                            if ($count === 0) {
                                $this->session->set_flashdata('error', 'No record found.');
                            }
                            if ($count > 0) {
                                foreach ($query->result() as $row) {
                                    $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licensehistory');
                                }
                            }
                        }
                    }
                    if ($phase == 'Layout Plan') {
                        if ($licenseStatus == 'Draft') {
                            $data['licenseStatus'] = 'Submitted';
                            $data['layoutSubmissionDate'] = date($this->dateTimeFormat);
                            $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "License" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response From Applicant" as remarks, "Draft" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                            $this->db->from('tbl_licensehistory as BaseTbl');
                            $this->db->where('BaseTbl.isDeleted', 0);
                            $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                            $this->db->limit(1);
                            $this->db->order_by('BaseTbl.id', 'desc');
                            $query = $this->db->get();
                            $count = $query->num_rows();

                            if ($count === 0) {
                                //$this->session->set_flashdata('error', 'No record found.');
                                $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'userId' => $this->userId, 'forwardedTo' => 103, 'dateTime' => date($this->dateTimeFullFormat), 'remarks' => "Response From Applicant", 'status' => "Draft", 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                            }
                            if ($count > 0) {
                                foreach ($query->result() as $row) {
                                    $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licensehistory');
                                }

                            }

                        }
                        if ($licenseStatus == 'Referred Back To Company (Locked)') {
                            $data['licenseStatus'] = 'Under Review Stage 1';
                        }
                    }
                    if ($phase == 'Grant of License') {
                        if ($licenseStatus == 'Draft') {
                            $data['licenseStatus'] = 'Submitted';
                            $data['grantSubmissionDate'] = date($this->dateTimeFormat);
                            $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "License" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response From Applicant" as remarks, "Draft" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                            $this->db->from('tbl_licensehistory as BaseTbl');
                            $this->db->where('BaseTbl.isDeleted', 0);
                            $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                            $this->db->limit(1);
                            $this->db->order_by('BaseTbl.id', 'desc');
                            $query = $this->db->get();
                            $count = $query->num_rows();

                            if ($count === 0) {
                                //$this->session->set_flashdata('error', 'No record found.');
                                $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'userId' => $this->userId, 'forwardedTo' => 103, 'dateTime' => date($this->dateTimeFullFormat), 'remarks' => "Response From Applicant", 'status' => "Draft", 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                            }
                            if ($count > 0) {
                                foreach ($query->result() as $row) {
                                    $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licensehistory');
                                }

                            }
                        }
                        if ($licenseStatus == 'Referred Back To Company (Locked)') {
                            $data['licenseStatus'] = 'Under Review Stage 1';
                        }
                    }
                    if ($validationFailed == 1) {
                        //$data['licenseStatus'] = $licenseStatus;
                    }
                }
            }
            else if ($this->roleId == '6') { // Licensing Director
                if ($data['licenseStatus'] == 'Save') {
                    $data['licenseStatus'] = $licenseStatus;
                }
                if ($data['licenseStatus'] == 'Rejected and Closed') {
                    $data['licenseStatus'] = 'Rejected and Closed';
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | License Rejected';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your license application with ref. no " . $rniRefNo . " has been rejected. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = emailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }
                if ($data['licenseStatus'] == 'Proceed') {
                    $data['licenseStatus'] = $licenseStatus;
                }
                if ($data['licenseStatus'] == 'approveclb') {
                    $data['licenseStatus'] = $licenseStatus;
                    $data['discussInBoard'] = 0;
                }

            }
            else if ($this->roleId == '10') { // Licensing Additional Director
                if ($data['licenseStatus'] == 'Save') {
                    $data['licenseStatus'] = $licenseStatus;
                }
                if ($data['licenseStatus'] == 'Proceed') {
                    $data['licenseStatus'] = $licenseStatus;
                }
            }
            else if ($this->roleId == '14') { // Licensing Deputy Director
                if ($data['licenseStatus'] == 'Save') {
                    $data['licenseStatus'] = $licenseStatus;
                }
                if ($data['licenseStatus'] == 'Proceed') {
                    $data['licenseStatus'] = $licenseStatus;
                }
            }
            else if ($this->roleId == '18') { // Licensing Assistant Director
                if ($data['licenseStatus'] == 'Save' || $data['licenseStatus'] == 'fwdapproval') {
                    $data['licenseStatus'] = $licenseStatus;
                }
                if ($data['licenseStatus'] == 'Referred Back To Company') {
                    if ($licenseStatus == 'Under Review Stage 1') {
                        $data['licenseStatus'] = 'Referred Back To Company (Locked)';
                    } else {
                        $data['licenseStatus'] = 'Referred Back To Company (Locked)';
                    }
                }


                if ($data['licenseStatus'] == 'Proceed') {
                    if ($licenseStatus == 'Under Review Stage 1') {
                        if ($phase == 'Site Verification' || $phase == 'Grant of License') {
                            $data['licenseStatus'] = 'Under Inspection';
                        }
                        if ($phase == 'Layout Plan') {
                            $data['layoutApprovedBy'] = $this->userId;
                            $data['licenseStatus'] = 'Draft';
                            $data['phase'] = 'Grant of License';
                        }

                        if ($phase == 'Site Verification') {
                            $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => 5, 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                        }
                        if ($phase == 'Grant of License') {
                            $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => 7, 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                        }
                        if ($data['licenseStatus'] == 'Under Inspection') {
                            // ------------------- Send Mail Start -------------------
                            $inspDirector = $this->myModel->getRecords('tbls_user', 'id', 121);
                            if (isset($inspDirector[0]->email)) {
                                $mailData['from'] = 'DRAP';
                                $mailData['subject'] = 'PIRIMS | Inspection';
                                $mailData['title'] = 'Greetings, ' . $inspDirector[0]->userName . '!';
                                $mailData['message'] = "The Licensing Division requested an inspection, please log in to PIRIMS to complete the inspection. ";
                                $mailData['email'] = $inspDirector[0]->email;
                                $sendStatus = emailSend($mailData);
                                if ($sendStatus == true) {
                                    $result = 1;
                                }
                            }
                            if (!isset($inspDirector[0]->email)) {
                                $result = 0;
                            }
                            // ------------------- Send Mail End -------------------

                        }
                    }
                    if ($licenseStatus == 'Post Inspection Process') {
                        if ($phase == 'Site Verification') {
                            $data['siteApprovedBy'] = $this->userId;
                            $data['licenseStatus'] = 'Draft';
                            $data['phase'] = 'Layout Plan';
                        }
                        if ($phase == 'Grant of License') {
                            $data['licenseStatus'] = 'Under Board Stage 2';
                            $data['phase'] = 'Grant of License';
                        }
                    }
                    if ($licenseStatus == 'Recommended By Board Stage 3') {
                        $data['licenseStatus'] = $licenseStatus;
                    }
                }

                if ($data['licenseStatus'] == 'Approved') {
                    if ($licenseStatus == 'Recommended By Board Stage 3' && $phase == 'Grant of License') {
                        $data['licenseStatus'] = 'Approved';
                        $data['licenseApprovedBy'] = $this->userId;
                        $data['issueDate'] = date($this->dateTimeFormat);
                        $validTill1 = date_create(date('Y-m-d H:i', strtotime($validTill1 . ' +5 YEAR')));
                        $validTill1 = date_format($validTill1, $this->dateTimeFormat);
                        $data['validTill'] = $validTill1;
                        $data['licenseNo'] = 'L-N-' . $id;
                        $data['status'] = 'Active';
                        // ------------------- Send Mail Start -------------------
                        if (isset($email)) {
                            $mailData['from'] = 'DRAP';
                            $mailData['subject'] = 'PIRIMS | License Approved';
                            $mailData['title'] = 'Greetings, ' . $userName . '!';
                            $mailData['message'] = "Your license application with ref. no " . $rniRefNo . " has been approved. In case of any query please write us at: support.pirims@dra.gov.pk";
                            $mailData['email'] = $email;
                            $sendStatus = emailSend($mailData);
                            if ($sendStatus == true) {
                                $result = 1;
                            }
                        }
                        if (!isset($email)) {
                            $result = 0;
                        }
                        // ------------------- Send Mail End -------------------
                    }
                }
                if ($data['licenseStatus'] == 'Rejected and Closed') {
                    $data['licenseStatus'] = 'Rejected and Closed';
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | License Rejected';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your license application with ref. no " . $rniRefNo . " has been rejected. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = emailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }

            }
            else if ($this->roleId == '38') { // Licensing Assigning Officer
                if ($data['licenseStatus'] == 'Save') {
                    $data['licenseStatus'] = $licenseStatus;
                }
                if ($data['licenseStatus'] == 'Proceed') {
                    $data['licenseStatus'] = $licenseStatus;
                    if ($licenseStatus == 'Submitted' || $licenseStatus == 'Screening') {
                        $data['licenseStatus'] = 'Under Review Stage 1';
                        // ------------------- Send Alert Start -------------------
                        $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                        $this->db->from('tbl_licensehistory as BaseTbl');
                        $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $queryAlert = $this->db->get();
                        $countAlert = $queryAlert->num_rows();
                        if ($countAlert === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($countAlert > 0) {
                            foreach ($queryAlert->result() as $rowAlert) {
                                $id = $rowAlert->id;
                                $masterId = $rowAlert->masterId;
                                $forwardedTo = $rowAlert->forwardedTo;
                                $userName = $rowAlert->userName;
                            }
                        }

                        $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'license/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                        // ------------------- Send Alert End -------------------
                    }
                    if ($licenseStatus == 'Under Review Stage 1') {
                        $data['licenseStatus'] = $licenseStatus;
                        // ------------------- Send Alert Start -------------------
                        $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                        $this->db->from('tbl_licensehistory as BaseTbl');
                        $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $queryAlert = $this->db->get();
                        $countAlert = $queryAlert->num_rows();
                        if ($countAlert === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($countAlert > 0) {
                            foreach ($queryAlert->result() as $rowAlert) {
                                $id = $rowAlert->id;
                                $masterId = $rowAlert->masterId;
                                $forwardedTo = $rowAlert->forwardedTo;
                                $userName = $rowAlert->userName;
                            }
                        }

                        $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'license/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                        // ------------------- Send Alert End -------------------
                    }
                }
            }
            else if ($this->roleId == '43') { // Licensing Board Secretary
                if ($data['licenseStatus'] == 'Save') {
                    $data['licenseStatus'] = $licenseStatus;
                }
                if ($data['licenseStatus'] == 'Rejected and Closed') {
                    if ($licenseStatus == 'Under Board Stage 2') {
                        $data['licenseStatus'] = 'Rejected and Closed';
                    }
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | License Rejected';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your license application with ref. no " . $rniRefNo . " has been rejected. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = emailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }
                if ($data['licenseStatus'] == 'Proceed') {
                    if ($licenseStatus == 'Under Board Stage 2' && $phase == 'Grant of License') {
                        $data['licenseStatus'] = 'Recommended By Board Stage 3';
                    }
                    /*else if ($licenseStatus == 'Recommended By Board Stage 3' && $phase == 'Grant of License') {
                        $data['licenseStatus'] = $licenseStatus;
                    }*/
                    else{
                        $data['licenseStatus'] = $licenseStatus;
                    }
                }

            } else if ($this->roleId == '42') { // CEO

            } else {
                $data['licenseStatus'] = $licenseStatus;
            }
            // Licensing Workflow Update END

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $companyUniqueNo, 'docs');
                }
            }

            $result = $this->loginModel->recordAjaxUpdate('id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), $data, $table);


            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }


            $sId = 0;
            $keys = array_keys($dataDetailTable);
            foreach (array_keys($dataDetailTable) as $key) {
                $current_key = current($keys);
                $current_value = $dataDetailTable[$current_key];
                $next_key = next($keys);
                $next_value = @$dataDetailTable[$next_key];
                $tableName = substr($current_key, 0, strpos($current_key, '-'));
                $nextTableName = substr($next_key, 0, strpos($next_key, '-'));
                if ($tableName == 'tabledetailmanagement') {
                    $tableDetail = 'tbl_companymanagement';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetaillayoutplan') {
                    $tableDetail = 'tbl_licenselayoutplan';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailapi') {
                    $tableDetail = 'tbl_licenseapi';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);

                    for ($i = 0; $i < $totalFiles; $i++) {
                        $fileNames = $current_value;

                        if (@$_FILES[$current_key]['tmp_name'][$i]) {

                            $fileNames[$i] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }

                    }

                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);

                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailfacility') {
                    $tableDetail = 'tbl_licensefacility';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailsection') {
                    $tableDetail = 'tbl_licensesection';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailqualifiedstaff') {
                    $tableDetail = 'tbl_companyqualifiedstaff';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailsections') {
                    $tableDetail = 'tbl_licensesection';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailsection2') {
                    $tableDetail = 'tbl_licensesectionmachine';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailmeeting' && ($this->roleId == '43')) {
                    $tableDetail = 'tbl_licensemeeting';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    $meetingdetail = $this->myModel->licenseDetailMeetingEdit($datadetail['id'][0]);

                    if ($nextTableName <> $tableName) {
                        if ($meetingdetail['remarks'] != $datadetail['remarks'][0] || $meetingdetail['status'] != $datadetail['status'][0]) {
                            $tableDetail = 'tbl_meetingagenda';

                            $masterId = $datadetail['agendaid'][0];
                            unset($datadetail['agendaid']);
                            $resultdetail = $this->loginModel->recordAjaxUpdate('id', $masterId, ['remarks' => $datadetail['remarks'][0], 'status' => $datadetail['status'][0], 'updatedby' => $this->userId, 'updateddate' => date($this->dateTimeFormat)], $tableDetail);

                            //$resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                            unset($datadetail);
                        }
                    }
                }
                $sId++;
            }

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else {
            $this->accessDenied();
            return;
        }
    }

    function licenseFilter($action = NULL, $id = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $myAction = '';
        if ($action == 'submit') {
            if (explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            }
            if (explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            }
            if ($myAction == 'add') {
                $myAction = 'save';
            }
            if ($myAction == 'edit') {
                $myAction = 'update';
            }
        }


        //---------- STAGES ---------
        // * Draft
        // * Submitted
        // * Screening
        // * Under R and I
        // * Received By DRAP
        // * Under Review Stage 1
        // * Review Complete
        // * Under Inspection
        // * Post Inspection Process
        // * Under Board Stage 2
        // * Referred Back To Company (Editable)
        // * Referred Back To Company (Locked)
        // * Recommended By Board Stage 3
        // * Rejected and Closed
        // * Approved
        //---------- STAGES ---------

        $table = 'tbl_license';
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        $data['records'] = $this->myModel->$functionName($table, $searchText);
        //$data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);
        $data['recordsDetailManagement'] = $this->myModel->applylicenseDetailManagementEdit($id);
        $data['recordsDetailSection'] = $this->myModel->applylicenseDetailSectionEdit($id);
        $data['recordsDetailSectionMachine'] = $this->myModel->applylicenseDetailSectionMachineEdit($id);
        $data['recordsDetailQualifiedStaff'] = $this->myModel->applylicenseDetailQualifiedStaffEdit($id);
        $data['recordsDetailLayoutPlan'] = $this->myModel->applylicenseDetailLayoutPlanEdit($id);
        $data['recordsDetailApi'] = $this->myModel->applylicenseDetailApiEdit($id);
        $data['recordsDetailFacility'] = $this->myModel->applylicenseDetailFacilityEdit($id);
        $data['recordsDetailQuery'] = $this->myModel->licenseDetailQueryEdit($id);
        $data['licenseType'] = $this->myModel->licenseTypeGet();
        $data['pharmaGroup'] = $this->myModel->pharmaGroupGet();
        $data['usedFor'] = $this->myModel->usedForGet();
        $data['sections'] = $this->myModel->sectionGet();
        $data['designation'] = $this->myModel->companyDesignationGet();
        $data['qualification'] = $this->myModel->companyQualificationGet();
        $data['specialization'] = $this->myModel->companySpecializationGet();
        $data['sectionApproved'] = $this->myModel->sectionApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['pharmaGroupApproved'] = $this->myModel->pharmaGroupApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['usedForApproved'] = $this->myModel->usedForApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['sectionApproved11'] = $this->myModel->sectionApprovedGet11($id);
        $data['pharmaGroupApproved11'] = $this->myModel->pharmaGroupApprovedGet11($id);
        $data['usedForApproved11'] = $this->myModel->usedForApprovedGet11($id);
        $data['historyDesignation'] = $this->myModel->licenseDesignationGet();
        $data['recordsDetailMeeting'] = $this->myModel->licenseDetailMeetingEdit($id);
        $data['recordsDetailHistory'] = $this->myModel->licenseDetailHistoryEdit($id);
        $data['city'] = $this->loginModel->cityGet();

        if ($action == 'lookup' && $recordLookup == 1) {
            $input = $this->input->post();
            if ($input) {
                $type = $input['searchby'];
                $searchstring = $input['searchstring'];
                $data['searchby'] = $type;
                $data['searchstring'] = $searchstring;
                if ($type == 1) {
                    $searchstring = str_replace("-","",$searchstring);
                    $data['records'] = $this->myModel->licenseFilterRecord($searchstring, 'staff');
                } elseif ($type == 2) {
                    $sectionId = $input['sectionId'];
                    $pharmaGroupId = $input['pharmaGroupId'];
                    $data['sectionId'] = $sectionId;
                    $data['pharmaGroupId'] = $pharmaGroupId;

                    $data['records'] = $this->myModel->licenseFilterRecord(array('sectionId'=>$sectionId,'pharmaGroupId'=>$pharmaGroupId), 'section');
                }else if ($type == 3) {
                    $searchstring = str_replace("-","",$searchstring);
                    $data['records'] = $this->myModel->licenseFilterRecord($searchstring, 'management');
                }
            }
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }
            $data['challanInfo'] = $this->myModel->getChallanInfo($id, $data['recordsEdit'][0]->phase);

            $seenBy = explode(",", $data['recordsEdit'][0]->seenBy);
            if (!(in_array($this->userId, $seenBy))) {
                $this->loginModel->seenByUpdate($id, $this->userId, $table);
            }

            if ($data['recordsEdit'][0]->licenseStatus == 'Draft') {
                if ($this->roleId <> '26' && $data['recordsEdit'][0]->companyUniqueNo <> $this->companyUniqueNo) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            } else if ($data['recordsEdit'][0]->licenseStatus == 'Submitted') {
                if ($this->roleId <> '38') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            } else if ($data['recordsEdit'][0]->licenseStatus == 'Recommended By Board Stage 3') {

                if ($data['recordsEdit'][0]->discussInBoard == 1) {
                    if ($this->roleId <> '6') {
                        $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                        redirect(__FUNCTION__ . '/lookup');
                    }
                } else {
                    if ($data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                        $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                        redirect(__FUNCTION__ . '/lookup');
                    }
                }

            } else {
                if ($this->roleId == 38) {
                    if ($data['recordsEdit'][0]->lastAssignedroleId <> 38) {
                        $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                        redirect(__FUNCTION__ . '/lookup');
                    }
                } else if ($data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }

            if ($data['recordsEdit'][0]->licenseStatus == 'Under Inspection') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }


            if ($data['recordsEdit'][0]->licenseStatus == 'Rejected and Closed') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->licenseStatus == 'Approved') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }


            /*
            if($data['recordsEdit'][0]->licenseStatus == 'Referred Back To Company (Editable)'){
                //if($this->roleId <> '26' && $data['records'][0]->companyUniqueNo <> $this->companyUniqueNo){
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__.'/lookup');
                //}
            }*/
            if ($data['recordsEdit'][0]->licenseStatus == 'Under Board Stage 2') {
                if ($this->roleId <> '43') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->licenseStatus == 'Referred Back To Company (Locked)') {
                //if($this->roleId <> '26' && $data['records'][0]->companyUniqueNo <> $this->companyUniqueNo){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
                //}
            }
            /*
            if($data['recordsEdit'][0]->licenseStatus == 'Submitted'){
                if($this->roleId <> '38'){
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__.'/lookup');
                }
            }
            if($data['recordsEdit'][0]->licenseStatus == 'Screening'){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__.'/lookup');
            }
            if($data['recordsEdit'][0]->licenseStatus == 'Under R and I'){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__.'/lookup');
            }
            if($data['recordsEdit'][0]->licenseStatus == 'Received By DRAP'){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__.'/lookup');
            }
            if($data['recordsEdit'][0]->licenseStatus == 'Under Review Stage 1'){
                if($this->roleId <> '6' && $this->roleId <> '10' && $this->roleId <> '14' && $this->roleId <> '18' && $this->roleId <> '38' && $this->roleId <> '43' && $data['recordsEdit'][0]->lastAssignedUserId <> $this->userId){
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__.'/lookup');
                }
            }
            if($data['recordsEdit'][0]->licenseStatus == 'Under Inspection'){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__.'/lookup');
            }

            if($data['recordsEdit'][0]->licenseStatus == 'Recommended By Board Stage 3'){
                if($this->roleId <> '6' && $this->roleId <> '10' && $this->roleId <> '14' && $this->roleId <> '18' && $this->roleId <> '38' && $this->roleId <> '43' && $data['recordsEdit'][0]->lastAssignedUserId <> $this->userId){
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__.'/lookup');
                }
            }
            if($data['recordsEdit'][0]->licenseStatus == 'Rejected and Closed'){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__.'/lookup');
            }
            if($data['recordsEdit'][0]->licenseStatus == 'Approved'){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__.'/lookup');
            }
            */
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }
            $data['challanInfo'] = $this->myModel->getChallanInfo($id, $data['recordsEdit'][0]->phase);

            $seenBy = explode(",", $data['recordsEdit'][0]->seenBy);
            if (!(in_array($this->userId, $seenBy))) {
                $this->loginModel->seenByUpdate($id, $this->userId, $table);
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $this->db->select('BaseTbl.licenseStatus');
            $this->db->from('tbl_license as BaseTbl');
            $this->db->where('BaseTbl.id', $id);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $licenseStatus = $row->licenseStatus;
                    if ($licenseStatus == 'Draft') {
                        $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);
                    } else {
                        $this->session->set_flashdata('error', 'Record cannot be deleted.');
                        $result = 0;
                    }
                }
            }

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }
            $validationFailed = 0;
            // foreach ($data as $key => $value)
            // {
            //     if($key == 'remarks'){
            //         continue;
            //     }
            //     $this->form_validation->set_rules($key, ucwords(implode(' ', preg_split('/(?=[A-Z])/', $key))), ['required']);
            //     if($key == 'Something'){
            //         // Custom Rule
            //     }
            // }
            if ($this->form_validation->run() == FALSE) {
                $validationFailed = 1;
                $this->session->set_flashdata('error', validation_errors());
            }

            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }

            $this->db->select('BaseTbl.id, BaseTbl.companyId, Company.companyName');
            $this->db->from('tbls_user as BaseTbl');
            $this->db->join('tbls_company as Company', 'Company.id = BaseTbl.companyId', 'left');
            $this->db->where('BaseTbl.id', $this->userId);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    $companyId = $row->companyId;
                    $companyName = $row->companyName;
                }
            }

            // Licensing Workflow Save START
            if ($this->roleId == '26') { // Company Submission
                if ($data['licenseStatus'] == 'Save') {
                    $data['licenseStatus'] = 'Draft';
                    $data['companyId'] = $companyId;
                    $data['companyName'] = $companyName;
                    $data['phase'] = 'Site Verification';
                }
                unset($data['forwardedTo_detail101']);
                unset($data['remarks_detail101']);
                unset($data['sendQueryToCompany']);
            }
            // Licensing Workflow Save END

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
            }
            unset($data['undefined']);
            //extract challan data
            $challan_no = $data['challan_no'];
            $challan_fee = $data['challan_fee'];
            $challan_status = $data['challan_status'];
            $challan_msg = $data['challan_msg'];
            $challan_account_id = $data['challan_account_id'];
            $challan_account_title = $data['challan_account_title'];
            $challan_date = $data['challan_date'];

            unset($data['challan_no']);
            unset($data['challan_fee']);
            unset($data['challan_status']);
            unset($data['challan_msg']);
            unset($data['challan_account_id']);
            unset($data['challan_account_title']);
            unset($data['challan_date']);

            $result = $this->loginModel->recordAjaxSave($data, $table);

            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }
            // Save Challan Data
            $this->loginModel->recordAjaxSave(['masterId' => $result,
                'phase' => 'Site Verification',
                'challan_no' => $challan_no,
                'challan_fee' => $challan_fee,
                'challan_status' => $challan_status,
                'challan_msg' => $challan_msg,
                'challan_account_id' => $challan_account_id,
                'challan_account_title' => $challan_account_title,
                'challan_date' => $challan_date,
                'status' => $challan_status,
                'createdby' => $data['updatedby'],
                'createddate' => $data['updateddate']
            ], 'tbl_challan');


            $sId = 0;
            $keys = array_keys($dataDetailTable);
            foreach (array_keys($dataDetailTable) as $key) {
                $current_key = current($keys);
                $current_value = $dataDetailTable[$current_key];
                $next_key = next($keys);
                $next_value = @$dataDetailTable[$next_key];
                $tableName = substr($current_key, 0, strpos($current_key, '-'));
                $nextTableName = substr($next_key, 0, strpos($next_key, '-'));
                if ($tableName == 'tabledetailmanagement') {
                    $tableDetail = 'tbl_companymanagement';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                $sId++;
            }

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else if ($myAction == 'update' && $recordSubmit == 1) {

            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }


            $validationFailed = 0;
            // foreach ($data as $key => $value)
            // {
            //     if($key == 'remarks'){
            //         continue;
            //     }
            //     $this->form_validation->set_rules($key, ucwords(implode(' ', preg_split('/(?=[A-Z])/', $key))), ['required']);
            //     if($key == 'Something'){
            //         // Custom Rule
            //     }
            // }
            if ($this->form_validation->run() == FALSE) {
                $validationFailed = 1;
                $this->session->set_flashdata('error', validation_errors());
            }

            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }

            // Licensing Workflow Update START
            $this->db->select('BaseTbl.id, User.email, User.userName, BaseTbl.rniRefNo, BaseTbl.licenseNo, Company.id as companyId, Company.companyUniqueNo, BaseTbl.licenseStatus, BaseTbl.phase');
            $this->db->from('tbl_license as BaseTbl');
            $this->db->join('tbls_company as Company', 'Company.id = BaseTbl.companyId', 'left');
            $this->db->join('tbls_user as User', 'User.companyId = Company.id', 'left');
            $this->db->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    $email = $row->email;
                    $userName = $row->userName;
                    $rniRefNo = $row->rniRefNo;
                    $licenseNo = $row->licenseNo;
                    $companyId = $row->companyId;
                    $companyUniqueNo = $row->companyUniqueNo;
                    $licenseStatus = $row->licenseStatus;
                    $phase = $row->phase;

                }
            }

            // Save Challan Data
            // check if already challan is added
            $this->db->select('"' . $result . '" as masterId, BaseTbl.challan_no, ');
            $this->db->from('tbl_challan as BaseTbl');
            $this->db->where('BaseTbl.isDeleted', 0);
            $this->db->where('BaseTbl.phase', $phase);
            $this->db->where('BaseTbl.masterId', $id);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->loginModel->recordAjaxSave(['masterId' => $id,
                    'phase' => $phase,
                    'challan_no' => $data['challan_no'],
                    'challan_fee' => $data['challan_fee'],
                    'challan_status' => $data['challan_status'],
                    'challan_msg' => $data['challan_msg'],
                    'challan_account_id' => $data['challan_account_id'],
                    'challan_account_title' => $data['challan_account_title'],
                    'challan_date' => $data['challan_date'],
                    'status' => $data['challan_status'],
                    'createdby' => $data['updatedby'],
                    'createddate' => $data['updateddate']
                ], 'tbl_challan');
                unset($data['challan_no']);
                unset($data['challan_fee']);
                unset($data['challan_status']);
                unset($data['challan_msg']);
                unset($data['challan_account_id']);
                unset($data['challan_account_title']);
                unset($data['challan_date']);
            }


            if ($this->roleId <> '26' && $data['licenseStatus'] != 'Save') {
                if ($data['forwardedTo_detail101']) {

                    if (isset($data['sendQueryToCompany']) && $data['sendQueryToCompany'] == '1') {
                        if ($data['forwardedTo_detail101'] == $this->userId) {
                            $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => 103, 'remarks' => $data['remarks_detail101'], 'status' => $licenseStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'isDeleted' => 1], 'tbl_licensehistory');
                        } else {
                            $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo_detail101'], 'remarks' => $data['remarks_detail101'], 'status' => $licenseStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                        }
                        if ($phase == 'Site Verification') {
                            $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'dateTime' => date($this->dateTimeFormat), 'title' => 'Site Verification', 'type' => 'License', 'message' => $data['remarks_detail101'], 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => 'Info Required From Company', 'shortcomming' => $data['reviewer1Remarks'], 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_query');
                        }
                        if ($phase == 'Layout Plan') {
                            $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'dateTime' => date($this->dateTimeFormat), 'title' => 'Layout Plan', 'type' => 'License', 'message' => $data['remarks_detail101'], 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => 'Info Required From Company', 'shortcomming' => $data['reviewer1Remarks'], 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_query');
                        }
                        if ($phase == 'Grant of License') {
                            $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'dateTime' => date($this->dateTimeFormat), 'title' => 'Grant of License', 'type' => 'License', 'message' => $data['remarks_detail101'], 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => 'Info Required From Company', 'shortcomming' => $data['reviewer1Remarks'], 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_query');
                        }
                        // ------------------- Send Mail Start -------------------
                        if (isset($email)) {
                            $mailData['from'] = 'DRAP';
                            $mailData['subject'] = 'PIRIMS | Query';
                            $mailData['title'] = 'Greetings, ' . $userName . '!';
                            $mailData['message'] = "Your have a query from DRAP of new license application with ref. no " . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . ".";
                            $mailData['email'] = $email;
                            $sendStatus = emailSend($mailData);
                            if ($sendStatus == true) {
                                $result = 1;
                            }
                        }
                        if (!isset($email)) {
                            $result = 0;
                        }
                        // ------------------- Send Mail End -------------------

                    } else {
                        $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo_detail101'], 'remarks' => $data['remarks_detail101'], 'status' => $licenseStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                    }
                } else {
                    if ($this->roleId == '18' && $data['licenseStatus'] == 'Proceed' && $licenseStatus == 'Under Review Stage 1') {
                        $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => 103, 'remarks' => $data['remarks_detail101'], 'status' => $licenseStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'isDeleted' => 1], 'tbl_licensehistory');
                    }
                }
            }
            unset($data['forwardedTo_detail101']);
            unset($data['remarks_detail101']);
            unset($data['sendQueryToCompany']);
            unset($data['undefined']);

            if ($this->roleId == '26') { // Company Submission
                if ($data['licenseStatus'] == 'Save') {
                    $data['licenseStatus'] = $licenseStatus;
                }
                if ($data['licenseStatus'] == 'Submit') {
                    $data['rniRefNo'] = $rniRefNo;
                    if ($rniRefNo == NULL) {
                        $data['rniRefNo'] = 'L-N-' . $id;
                    }
                    if ($phase == 'Site Verification') {
                        if ($licenseStatus == 'Draft') {
                            $data['licenseStatus'] = 'Submitted';
                            $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "License" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response From Applicant" as remarks, "Draft" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                            $this->db->from('tbl_licensehistory as BaseTbl');
                            $this->db->where('BaseTbl.isDeleted', 0);
                            $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                            $this->db->limit(1);
                            $this->db->order_by('BaseTbl.id', 'desc');
                            $query = $this->db->get();
                            $count = $query->num_rows();
                            if ($count === 0) {
                                //$this->session->set_flashdata('error', 'No record found.');
                                $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'userId' => $this->userId, 'forwardedTo' => 103, 'dateTime' => date($this->dateTimeFullFormat), 'remarks' => "Response From Applicant", 'status' => "Draft", 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');

                                // ------------------- Send Alert Start -------------------
                                $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                                $this->db->from('tbl_licensehistory as BaseTbl');
                                $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                                $this->db->where('BaseTbl.isDeleted', 0);
                                $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                                $this->db->limit(1);
                                $this->db->order_by('BaseTbl.id', 'desc');
                                $queryAlert = $this->db->get();
                                $countAlert = $queryAlert->num_rows();
                                if ($countAlert === 0) {
                                    $this->session->set_flashdata('error', 'No record found.');
                                }
                                if ($countAlert > 0) {
                                    foreach ($queryAlert->result() as $rowAlert) {
                                        $id = $rowAlert->id;
                                        $masterId = $rowAlert->masterId;
                                        $forwardedTo = $rowAlert->forwardedTo;
                                        $userName = $rowAlert->userName;
                                    }
                                }

                                $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'license/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                                // ------------------- Send Alert End -------------------
                            }
                            if ($count > 0) {
                                foreach ($query->result() as $row) {
                                    $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licensehistory');
                                }

                                // ------------------- Send Alert Start -------------------
                                $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                                $this->db->from('tbl_licensehistory as BaseTbl');
                                $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                                $this->db->where('BaseTbl.isDeleted', 0);
                                $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                                $this->db->limit(1);
                                $this->db->order_by('BaseTbl.id', 'desc');
                                $queryAlert = $this->db->get();
                                $countAlert = $queryAlert->num_rows();
                                if ($countAlert === 0) {
                                    $this->session->set_flashdata('error', 'No record found.');
                                }
                                if ($countAlert > 0) {
                                    foreach ($queryAlert->result() as $rowAlert) {
                                        $id = $rowAlert->id;
                                        $masterId = $rowAlert->masterId;
                                        $forwardedTo = $rowAlert->forwardedTo;
                                        $userName = $rowAlert->userName;
                                    }
                                }

                                $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'license/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                                // ------------------- Send Alert End -------------------
                            }
                        }
                        if ($licenseStatus == 'Referred Back To Company (Locked)') {
                            $data['licenseStatus'] = 'Under Review Stage 1';
                            $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "License" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response From Applicant" as remarks, "Referred Back To Company (Locked)" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                            $this->db->from('tbl_licensehistory as BaseTbl');
                            $this->db->where('BaseTbl.isDeleted', 0);
                            $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                            $this->db->limit(1);
                            $this->db->order_by('BaseTbl.id', 'desc');
                            $query = $this->db->get();
                            $count = $query->num_rows();
                            if ($count === 0) {
                                $this->session->set_flashdata('error', 'No record found.');
                            }
                            if ($count > 0) {
                                foreach ($query->result() as $row) {
                                    $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licensehistory');
                                }
                            }
                        }
                    }
                    if ($phase == 'Layout Plan') {
                        if ($licenseStatus == 'Draft') {
                            $data['licenseStatus'] = 'Submitted';
                            $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "License" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response From Applicant" as remarks, "Draft" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                            $this->db->from('tbl_licensehistory as BaseTbl');
                            $this->db->where('BaseTbl.isDeleted', 0);
                            $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                            $this->db->limit(1);
                            $this->db->order_by('BaseTbl.id', 'desc');
                            $query = $this->db->get();
                            $count = $query->num_rows();

                            if ($count === 0) {
                                //$this->session->set_flashdata('error', 'No record found.');
                                $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'userId' => $this->userId, 'forwardedTo' => 103, 'dateTime' => date($this->dateTimeFullFormat), 'remarks' => "Response From Applicant", 'status' => "Draft", 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                            }
                            if ($count > 0) {
                                foreach ($query->result() as $row) {
                                    $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licensehistory');
                                }

                            }

                        }
                        if ($licenseStatus == 'Referred Back To Company (Locked)') {
                            $data['licenseStatus'] = 'Under Review Stage 1';
                        }
                    }
                    if ($phase == 'Grant of License') {
                        if ($licenseStatus == 'Draft') {
                            $data['licenseStatus'] = 'Submitted';
                            $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "License" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response From Applicant" as remarks, "Draft" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                            $this->db->from('tbl_licensehistory as BaseTbl');
                            $this->db->where('BaseTbl.isDeleted', 0);
                            $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                            $this->db->limit(1);
                            $this->db->order_by('BaseTbl.id', 'desc');
                            $query = $this->db->get();
                            $count = $query->num_rows();

                            if ($count === 0) {
                                //$this->session->set_flashdata('error', 'No record found.');
                                $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'userId' => $this->userId, 'forwardedTo' => 103, 'dateTime' => date($this->dateTimeFullFormat), 'remarks' => "Response From Applicant", 'status' => "Draft", 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                            }
                            if ($count > 0) {
                                foreach ($query->result() as $row) {
                                    $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licensehistory');
                                }

                            }
                        }
                        if ($licenseStatus == 'Referred Back To Company (Locked)') {
                            $data['licenseStatus'] = 'Under Review Stage 1';
                        }
                    }
                    if ($validationFailed == 1) {
                        //$data['licenseStatus'] = $licenseStatus;
                    }
                }
            } else if ($this->roleId == '6') { // Licensing Director
                if ($data['licenseStatus'] == 'Save') {
                    $data['licenseStatus'] = $licenseStatus;
                }
                if ($data['licenseStatus'] == 'Rejected and Closed') {
                    $data['licenseStatus'] = 'Rejected and Closed';
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | License Rejected';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your license application with ref. no " . $rniRefNo . " has been rejected. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = emailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }
                if ($data['licenseStatus'] == 'Proceed') {
                    $data['licenseStatus'] = $licenseStatus;
                }
                if ($data['licenseStatus'] == 'approveclb') {
                    $data['licenseStatus'] = $licenseStatus;
                    $data['discussInBoard'] = 0;
                }

            } else if ($this->roleId == '10') { // Licensing Additional Director
                if ($data['licenseStatus'] == 'Save') {
                    $data['licenseStatus'] = $licenseStatus;
                }
                if ($data['licenseStatus'] == 'Proceed') {
                    $data['licenseStatus'] = $licenseStatus;
                }
            } else if ($this->roleId == '14') { // Licensing Deputy Director
                if ($data['licenseStatus'] == 'Save') {
                    $data['licenseStatus'] = $licenseStatus;
                }
                if ($data['licenseStatus'] == 'Proceed') {
                    $data['licenseStatus'] = $licenseStatus;
                }
            } else if ($this->roleId == '18') { // Licensing Assistant Director
                if ($data['licenseStatus'] == 'Save' || $data['licenseStatus'] == 'fwdapproval') {
                    $data['licenseStatus'] = $licenseStatus;
                }
                if ($data['licenseStatus'] == 'Referred Back To Company') {
                    if ($licenseStatus == 'Under Review Stage 1') {
                        $data['licenseStatus'] = 'Referred Back To Company (Locked)';
                    } else {
                        $data['licenseStatus'] = 'Referred Back To Company (Locked)';
                    }
                }


                if ($data['licenseStatus'] == 'Proceed') {
                    if ($licenseStatus == 'Under Review Stage 1') {
                        if ($phase == 'Site Verification' || $phase == 'Grant of License') {
                            $data['licenseStatus'] = 'Under Inspection';
                        }
                        if ($phase == 'Layout Plan') {
                            $data['layoutApprovedBy'] = $this->userId;
                            $data['licenseStatus'] = 'Draft';
                            $data['phase'] = 'Grant of License';
                        }

                        if ($phase == 'Site Verification') {
                            $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => 5, 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                        }
                        if ($phase == 'Grant of License') {
                            $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => 7, 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                        }
                        if ($data['licenseStatus'] == 'Under Inspection') {
                            // ------------------- Send Mail Start -------------------
                            $inspDirector = $this->myModel->getRecords('tbls_user', 'id', 121);
                            if (isset($inspDirector[0]->email)) {
                                $mailData['from'] = 'DRAP';
                                $mailData['subject'] = 'PIRIMS | Inspection';
                                $mailData['title'] = 'Greetings, ' . $inspDirector[0]->userName . '!';
                                $mailData['message'] = "The Licensing Division requested an inspection, please log in to PIRIMS to complete the inspection. ";
                                $mailData['email'] = $inspDirector[0]->email;
                                $sendStatus = emailSend($mailData);
                                if ($sendStatus == true) {
                                    $result = 1;
                                }
                            }
                            if (!isset($inspDirector[0]->email)) {
                                $result = 0;
                            }
                            // ------------------- Send Mail End -------------------

                        }
                    }
                    if ($licenseStatus == 'Post Inspection Process') {
                        if ($phase == 'Site Verification') {
                            $data['siteApprovedBy'] = $this->userId;
                            $data['licenseStatus'] = 'Draft';
                            $data['phase'] = 'Layout Plan';
                        }
                        if ($phase == 'Grant of License') {
                            $data['licenseStatus'] = 'Under Board Stage 2';
                            $data['phase'] = 'Grant of License';
                        }
                    }
                    if ($licenseStatus == 'Recommended By Board Stage 3') {
                        $data['licenseStatus'] = $licenseStatus;
                    }
                }

                if ($data['licenseStatus'] == 'Approved') {
                    if ($licenseStatus == 'Recommended By Board Stage 3' && $phase == 'Grant of License') {
                        $data['licenseStatus'] = 'Approved';
                        $data['licenseApprovedBy'] = $this->userId;
                        $data['issueDate'] = date($this->dateTimeFormat);
                        $validTill1 = date_create(date('Y-m-d H:i', strtotime($validTill1 . ' +5 YEAR')));
                        $validTill1 = date_format($validTill1, $this->dateTimeFormat);
                        $data['validTill'] = $validTill1;
                        $data['licenseNo'] = 'L-N-' . $id;
                        $data['status'] = 'Active';
                        // ------------------- Send Mail Start -------------------
                        if (isset($email)) {
                            $mailData['from'] = 'DRAP';
                            $mailData['subject'] = 'PIRIMS | License Approved';
                            $mailData['title'] = 'Greetings, ' . $userName . '!';
                            $mailData['message'] = "Your license application with ref. no " . $rniRefNo . " has been approved. In case of any query please write us at: support.pirims@dra.gov.pk";
                            $mailData['email'] = $email;
                            $sendStatus = emailSend($mailData);
                            if ($sendStatus == true) {
                                $result = 1;
                            }
                        }
                        if (!isset($email)) {
                            $result = 0;
                        }
                        // ------------------- Send Mail End -------------------
                    }
                }
                if ($data['licenseStatus'] == 'Rejected and Closed') {
                    $data['licenseStatus'] = 'Rejected and Closed';
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | License Rejected';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your license application with ref. no " . $rniRefNo . " has been rejected. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = emailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }

            } else if ($this->roleId == '38') { // Licensing Assigning Officer
                if ($data['licenseStatus'] == 'Save') {
                    $data['licenseStatus'] = $licenseStatus;
                }
                if ($data['licenseStatus'] == 'Proceed') {
                    $data['licenseStatus'] = $licenseStatus;
                    if ($licenseStatus == 'Submitted' || $licenseStatus == 'Screening') {
                        $data['licenseStatus'] = 'Under Review Stage 1';
                        // ------------------- Send Alert Start -------------------
                        $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                        $this->db->from('tbl_licensehistory as BaseTbl');
                        $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $queryAlert = $this->db->get();
                        $countAlert = $queryAlert->num_rows();
                        if ($countAlert === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($countAlert > 0) {
                            foreach ($queryAlert->result() as $rowAlert) {
                                $id = $rowAlert->id;
                                $masterId = $rowAlert->masterId;
                                $forwardedTo = $rowAlert->forwardedTo;
                                $userName = $rowAlert->userName;
                            }
                        }

                        $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'license/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                        // ------------------- Send Alert End -------------------
                    }
                    if ($licenseStatus == 'Under Review Stage 1') {
                        $data['licenseStatus'] = $licenseStatus;
                        // ------------------- Send Alert Start -------------------
                        $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                        $this->db->from('tbl_licensehistory as BaseTbl');
                        $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $queryAlert = $this->db->get();
                        $countAlert = $queryAlert->num_rows();
                        if ($countAlert === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($countAlert > 0) {
                            foreach ($queryAlert->result() as $rowAlert) {
                                $id = $rowAlert->id;
                                $masterId = $rowAlert->masterId;
                                $forwardedTo = $rowAlert->forwardedTo;
                                $userName = $rowAlert->userName;
                            }
                        }

                        $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'license/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                        // ------------------- Send Alert End -------------------
                    }
                }
            } else if ($this->roleId == '43') { // Licensing Board Secretary
                if ($data['licenseStatus'] == 'Save') {
                    $data['licenseStatus'] = $licenseStatus;
                }
                if ($data['licenseStatus'] == 'Rejected and Closed') {
                    if ($licenseStatus == 'Under Board Stage 2') {
                        $data['licenseStatus'] = 'Rejected and Closed';
                    }
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | License Rejected';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your license application with ref. no " . $rniRefNo . " has been rejected. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = emailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }
                if ($data['licenseStatus'] == 'Proceed') {
                    if ($licenseStatus == 'Under Board Stage 2' && $phase == 'Grant of License') {
                        $data['licenseStatus'] = 'Recommended By Board Stage 3';
                    }
                    if ($licenseStatus == 'Recommended By Board Stage 3' && $phase == 'Grant of License') {
                        $data['licenseStatus'] = $licenseStatus;
                    }
                }
            } else if ($this->roleId == '42') { // CEO

            } else {
                $data['licenseStatus'] = $licenseStatus;
            }
            // Licensing Workflow Update END

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $companyUniqueNo, 'docs');
                }
            }

            $result = $this->loginModel->recordAjaxUpdate('id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), $data, $table);


            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }


            $sId = 0;
            $keys = array_keys($dataDetailTable);
            foreach (array_keys($dataDetailTable) as $key) {
                $current_key = current($keys);
                $current_value = $dataDetailTable[$current_key];
                $next_key = next($keys);
                $next_value = @$dataDetailTable[$next_key];
                $tableName = substr($current_key, 0, strpos($current_key, '-'));
                $nextTableName = substr($next_key, 0, strpos($next_key, '-'));
                if ($tableName == 'tabledetailmanagement') {
                    $tableDetail = 'tbl_companymanagement';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetaillayoutplan') {
                    $tableDetail = 'tbl_licenselayoutplan';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailapi') {
                    $tableDetail = 'tbl_licenseapi';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);

                    for ($i = 0; $i < $totalFiles; $i++) {
                        $fileNames = $current_value;

                        if (@$_FILES[$current_key]['tmp_name'][$i]) {

                            $fileNames[$i] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }

                    }

                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);

                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailfacility') {
                    $tableDetail = 'tbl_licensefacility';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailsection') {
                    $tableDetail = 'tbl_licensesection';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailqualifiedstaff') {
                    $tableDetail = 'tbl_companyqualifiedstaff';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailsections') {
                    $tableDetail = 'tbl_licensesection';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailsection2') {
                    $tableDetail = 'tbl_licensesectionmachine';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailmeeting' && ($this->roleId == '43')) {
                    $tableDetail = 'tbl_licensemeeting';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    $meetingdetail = $this->myModel->licenseDetailMeetingEdit($datadetail['id'][0]);

                    if ($nextTableName <> $tableName) {
                        if ($meetingdetail['remarks'] != $datadetail['remarks'][0] || $meetingdetail['status'] != $datadetail['status'][0]) {
                            $tableDetail = 'tbl_meetingagenda';

                            $masterId = $datadetail['agendaid'][0];
                            unset($datadetail['agendaid']);
                            $resultdetail = $this->loginModel->recordAjaxUpdate('id', $masterId, ['remarks' => $datadetail['remarks'][0], 'status' => $datadetail['status'][0], 'updatedby' => $this->userId, 'updateddate' => date($this->dateTimeFormat)], $tableDetail);

                            //$resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                            unset($datadetail);
                        }
                    }
                }
                $sId++;
            }

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else {
            $this->accessDenied();
            return;
        }
    }

    function licenserenewal($action = NULL, $id = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $myAction = '';
        if ($action == 'submit') {
            if (explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            }
            if (explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            }
            if ($myAction == 'add') {
                $myAction = 'save';
            }
            if ($myAction == 'edit') {
                $myAction = 'update';
            }
        }

        //---------- STAGES ---------
        // * Draft
        // * Submitted
        // * Screening
        // * Under R and I
        // * Received By DRAP
        // * Under Review Stage 1
        // * Review Complete
        // * Under Inspection
        // * Post Inspection Process
        // * Under Board Stage 2
        // * Referred Back To Company (Editable)
        // * Referred Back To Company (Locked)
        // * Recommended By Board Stage 3
        // * Rejected and Closed
        // * Approved
        //---------- STAGES ---------

        $table = 'tbl_license';
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        $data['records'] = $this->myModel->$functionName($table, $searchText);
        $data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);
        $data['recordsDetailManagement'] = $this->myModel->applylicenserenewalDetailManagementEdit(@$data['recordsEdit'][0]->maxApprovedId);
        $data['recordsDetailSection'] = $this->myModel->applylicenserenewalDetailSectionEdit(@$data['recordsEdit'][0]->maxApprovedId);
        //$data['recordsDetailSectionMachine'] = $this->myModel->applylicenserenewalDetailSectionMachineEdit(@$data['recordsEdit'][0]->maxApprovedId);
        $data['recordsDetailFacility'] = $this->myModel->applylicenseDetailFacilityEdit($id);
        $data['recordsDetailSectionMachine'] = $this->myModel->applylicenseDetailSectionMachineEdit($id);
        $data['recordsDetailQualifiedStaff'] = $this->myModel->applylicenserenewalDetailQualifiedStaffEdit(@$data['recordsEdit'][0]->maxApprovedId);
        $data['recordsDetailLayoutPlan'] = $this->myModel->applylicenserenewalDetailLayoutPlanEdit(@$data['recordsEdit'][0]->maxApprovedId);
        $data['recordsDetailApi'] = $this->myModel->applylicenserenewalDetailApiEdit(@$data['recordsEdit'][0]->maxApprovedId);
        $data['recordsDetailQuery'] = $this->myModel->licenserenewalDetailQueryEdit($id);
        $data['licenseType'] = $this->myModel->licenseTypeGet();
        $data['pharmaGroup'] = $this->myModel->pharmaGroupGet();
        $data['usedFor'] = $this->myModel->usedForGet();
        $data['section'] = $this->myModel->sectionGet();
        $data['designation'] = $this->myModel->companyDesignationGet();
        $data['qualification'] = $this->myModel->companyQualificationGet();
        $data['specialization'] = $this->myModel->companySpecializationGet();
        $data['sectionApproved'] = $this->myModel->sectionApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['pharmaGroupApproved'] = $this->myModel->pharmaGroupApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['usedForApproved'] = $this->myModel->usedForApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['sectionApproved11'] = $this->myModel->sectionApprovedGet11($id);
        $data['pharmaGroupApproved11'] = $this->myModel->pharmaGroupApprovedGet11($id);
        $data['usedForApproved11'] = $this->myModel->usedForApprovedGet11($id);
        $data['historyDesignation'] = $this->myModel->licenseDesignationGet();
        $data['recordsDetailMeeting'] = $this->myModel->licenseDetailMeetingEdit($id);
        $data['recordsDetailHistory'] = $this->myModel->licenseDetailHistoryEdit($id);

        if ($action == 'lookup' && $recordLookup == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $seenBy = explode(",", $data['recordsEdit'][0]->seenBy);
            if (!(in_array($this->userId, $seenBy))) {
                $this->loginModel->seenByUpdate($id, $this->userId, $table);
            }

            if ($data['recordsEdit'][0]->renewalStatus == 'Draft') {
                if ($this->roleId <> '26' && $data['recordsEdit'][0]->companyUniqueNo <> $this->companyUniqueNo) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            } else if ($data['recordsEdit'][0]->renewalStatus == 'Submitted') {
                if ($this->roleId <> '38') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            } else if ($data['recordsEdit'][0]->renewalStatus == 'Recommended By Board Stage 3') {

                if ($data['recordsEdit'][0]->discussInBoard == 1) {
                    if ($this->roleId <> '6') {
                        $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                        redirect(__FUNCTION__ . '/lookup');
                    }
                } else {
                    if ($data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                        $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                        redirect(__FUNCTION__ . '/lookup');
                    }
                }

            } else {
                if ($this->roleId == 38) {
                    /*if ($data['recordsEdit'][0]->lastAssignedroleId <> 38) {
                        $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                        redirect(__FUNCTION__ . '/lookup');
                    }*/
                } else if ($data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }


            if ($data['recordsEdit'][0]->renewalStatus == 'Referred Back To Company (Editable)') {
                //if($this->roleId <> '26' && $data['records'][0]->companyUniqueNo <> $this->companyUniqueNo){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
                //}
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Referred Back To Company (Locked)') {
                //if($this->roleId <> '26' && $data['records'][0]->companyUniqueNo <> $this->companyUniqueNo){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
                //}
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Submitted') {
                if ($this->roleId <> '38') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Screening') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Under R and I') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Received By DRAP') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Under Review Stage 1') {
                if ($data['recordsEdit'][0]->lastAssignedUserId <> $this->userId && $this->roleId <> '38') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Under Inspection') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Under Board Stage 2') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Recommended By Board Stage 3') {
                if ($data['recordsEdit'][0]->discussInBoard == 1) {
                    if ($this->roleId <> '6') {
                        $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                        redirect(__FUNCTION__ . '/lookup');
                    }
                } else {
                    if ($data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                        $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                        redirect(__FUNCTION__ . '/lookup');
                    }
                }
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Rejected and Closed') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Approved') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $seenBy = explode(",", $data['recordsEdit'][0]->seenBy);
            if (!(in_array($this->userId, $seenBy))) {
                $this->loginModel->seenByUpdate($id, $this->userId, $table);
            }


            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $this->db->select('BaseTbl.renewalStatus');
            $this->db->from('tbl_license as BaseTbl');
            $this->db->where('BaseTbl.id', $id);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $renewalStatus = $row->renewalStatus;
                    if ($renewalStatus == 'Draft') {
                        $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);
                        $this->db->select('BaseTbl.id');
                        $this->db->from('tbl_challan as BaseTbl');
                        $this->db->where('BaseTbl.masterId', $id);
                        $query2 = $this->db->get();
                        $count2 = $query2->num_rows();
                        if ($count2 > 0) {
                            $this->loginModel->recordAjaxUpdate('masterId', $id, $data, 'tbl_challan');
                        }
                    } else {
                        $this->session->set_flashdata('error', 'Record cannot be deleted.');
                        $result = 0;
                    }
                }
            }

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $validationFailed = 0;
            // foreach ($data as $key => $value)
            // {
            //     if($key == 'remarks'){
            //         continue;
            //     }
            //     $this->form_validation->set_rules($key, ucwords(implode(' ', preg_split('/(?=[A-Z])/', $key))), ['required']);
            //     if($key == 'Something'){
            //         // Custom Rule
            //     }
            // }
            if ($this->form_validation->run() == FALSE) {
                $validationFailed = 1;
                $this->session->set_flashdata('error', validation_errors());
            }

            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            $result = $this->loginModel->recordAjaxSave($data, $table);

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $validationFailed = 0;

            if ($this->form_validation->run() == FALSE) {
                $validationFailed = 1;
                $this->session->set_flashdata('error', validation_errors());
            }

            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }

            // Licensing Renewal Workflow Update START
            $this->db->select('BaseTbl.id,BaseTbl.parentId, User.email, User.userName, BaseTbl.rniRefNo, BaseTbl.licenseNo, Company.id as companyId, Company.companyUniqueNo, BaseTbl.renewalStatus');
            $this->db->from('tbl_license as BaseTbl');
            $this->db->join('tbls_company as Company', 'Company.id = BaseTbl.companyId', 'left');
            $this->db->join('tbls_user as User', 'User.companyId = Company.id', 'left');
            $this->db->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    $parentId = $row->parentId;
                    $email = $row->email;
                    $userName = $row->userName;
                    $rniRefNo = $row->rniRefNo;
                    $licenseNo = $row->licenseNo;
                    $companyId = $row->companyId;
                    $companyUniqueNo = $row->companyUniqueNo;
                    $renewalStatus = $row->renewalStatus;
                }
            }

            // Save Challan Data
            // check if already challan is added
            $this->db->select('BaseTbl.*');
            $this->db->from('tbl_challan as BaseTbl');
            $this->db->where('BaseTbl.isDeleted', 0);
            $this->db->where('BaseTbl.masterId', $id);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->loginModel->recordAjaxSave(['masterId' => $id,
                    'challan_no' => $data['challan_no'],
                    'challan_fee' => $data['challan_fee'],
                    'challan_status' => $data['challan_status'],
                    'challan_msg' => $data['challan_msg'],
                    'challan_account_id' => $data['challan_account_id'],
                    'challan_account_title' => $data['challan_account_title'],
                    'challan_date' => $data['challan_date'],
                    'status' => $data['challan_status'],
                    'createdby' => $data['updatedby'],
                    'createddate' => $data['updateddate']
                ], 'tbl_challan');
                unset($data['challan_no']);
                unset($data['challan_fee']);
                unset($data['challan_status']);
                unset($data['challan_msg']);
                unset($data['challan_account_id']);
                unset($data['challan_account_title']);
                unset($data['challan_date']);
            }


            if ($this->roleId <> '26') {
                if ($data['forwardedTo_detail101']) {

                    $byRole = $this->designation.' '.$this->department;
                    if ($data['forwardedTo_detail101'] == $this->userId) {
                        $userRecord = $this->loginModel->getDesignationDepartment(103);
                        $forwardedRole = $userRecord[0]->urole;
                        $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License Renewal', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => 103, 'byRole'=>$byRole,'forwardedRole'=>$forwardedRole, 'remarks' => $data['remarks_detail101'], 'status' => $renewalStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'isDeleted' => 1], 'tbl_licensehistory');
                    } else {
                        $userRecord = $this->loginModel->getDesignationDepartment($data['forwardedTo_detail101']);
                        $forwardedRole = $userRecord[0]->urole;
                        $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License Renewal', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo_detail101'], 'byRole'=>$byRole,'forwardedRole'=>$forwardedRole, 'remarks' => $data['remarks_detail101'], 'status' => $renewalStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                    }
                    if ($data['sendQueryToCompany'] == '1') {
                        $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'dateTime' => date($this->dateTimeFormat), 'title' => 'License Renewal', 'type' => 'License Renewal', 'message' => $data['renewalRemarks'], 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => 'Info Required From Company', 'shortcomming' => $data['renewalRemarks'], 'letterType' =>$data['letterType'], 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_query');
                        // ------------------- Send Mail Start -------------------
                        if (isset($email)) {
                            $mailData['from'] = 'DRAP';
                            $mailData['subject'] = 'PIRIMS | Query';
                            $mailData['title'] = 'Greetings, ' . $userName . '!';
                            $mailData['message'] = "Your have a query from DRAP of license renewal application with ref. no " . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . ".";
                            $mailData['email'] = $email;
                            $sendStatus = emailSend($mailData);
                            if ($sendStatus == true) {
                                $result = 1;
                            }
                        }
                        if (!isset($email)) {
                            $result = 0;
                        }
                        // ------------------- Send Mail End -------------------

                    }
                } else {
                    if ($this->roleId == '18' && $data['licenseStatus'] == 'Proceed' && $licenseStatus == 'Under Review Stage 1') {
                        $userRecord = $this->loginModel->getDesignationDepartment($data['forwardedTo_detail101']);
                        $forwardedRole = $userRecord[0]->urole;
                        $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License Renewal', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => 103, 'byRole'=>$byRole,'forwardedRole'=>$forwardedRole, 'remarks' => $data['remarks_detail101'], 'status' => $renewalStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'isDeleted' => 1], 'tbl_licensehistory');
                    }
                }
            }
            unset($data['forwardedTo_detail101']);
            unset($data['remarks_detail101']);
            unset($data['sendQueryToCompany']);
            unset($data['letterType']);

            if ($this->roleId == '26') { // Company Submission
                if ($data['renewalStatus'] == 'Save') {
                    $data['renewalStatus'] = $renewalStatus;
                }
                if ($data['renewalStatus'] == 'Submit') {
                    $data['rniRefNo'] = $rniRefNo;
                    if ($rniRefNo == NULL) {
                        $data['rniRefNo'] = 'L-N-' . $id;
                    }
                    if ($renewalStatus == 'Draft') {
                        $data['renewalStatus'] = 'Submitted';
                        $data['submissionDate'] = date($this->dateTimeFormat);
                        $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "License" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response From Applicant" as remarks, "Draft" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                        $this->db->from('tbl_licensehistory as BaseTbl');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License Renewal', 'userId' => $this->userId, 'forwardedTo' => 103, 'dateTime' => date($this->dateTimeFullFormat), 'remarks' => "Response From Applicant", 'status' => "Draft", 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licensehistory');
                            }
                        }
                    }
                    if ($renewalStatus == 'Referred Back To Company (Locked)') {
                        $data['renewalStatus'] = 'Under Review Stage 1';
                    }
                    if ($validationFailed == 1) {
                        //$data['renewalStatus'] = $renewalStatus;
                    }
                }
            }
            else if ($this->roleId == '6') { // Licensing Director
                if ($data['renewalStatus'] == 'Save') {
                    $data['renewalStatus'] = $renewalStatus;
                }
                if ($data['renewalStatus'] == 'Rejected and Closed') {
                    $data['renewalStatus'] = 'Rejected and Closed';
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | License Rejected';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your license application with ref. no " . $rniRefNo . " has been rejected. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = emailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }
                if ($data['renewalStatus'] == 'Proceed') {
                    $data['renewalStatus'] = $renewalStatus;
                }
                if ($data['renewalStatus'] == 'approveclb') {
                    $data['renewalStatus'] = $renewalStatus;
                    $data['discussInBoard'] = 0;
                }
            }
            else if ($this->roleId == '10') { // Licensing Additional Director
                if ($data['renewalStatus'] == 'Save') {
                    $data['renewalStatus'] = $renewalStatus;
                }
                if ($data['renewalStatus'] == 'Proceed') {
                    $data['renewalStatus'] = $renewalStatus;
                }
            }
            else if ($this->roleId == '14') { // Licensing Deputy Director
                if ($data['renewalStatus'] == 'Save') {
                    $data['renewalStatus'] = $renewalStatus;
                }
                if ($data['renewalStatus'] == 'Proceed') {
                    $data['renewalStatus'] = $renewalStatus;
                }
            }
            else if ($this->roleId == '18') { // Licensing Assistant Director
                if ($data['renewalStatus'] == 'Save' || $data['renewalStatus'] == 'fwdapproval') {
                    $data['renewalStatus'] = $renewalStatus;
                }
                if ($data['renewalStatus'] == 'Referred Back To Company') {
                    if ($renewalStatus == 'Under Review Stage 1') {
                        $data['renewalStatus'] = 'Referred Back To Company (Locked)';
                    }
                }
                if ($data['renewalStatus'] == 'Proceed') {
                    if ($renewalStatus == 'Under Review Stage 1') {
                        $data['renewalStatus'] = 'Under Inspection';
                        $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => 8, 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                        // ------------------- Send Mail Start -------------------
                        $inspDirector = $this->myModel->getRecords('tbls_user', 'id', 121);
                        if (isset($inspDirector[0]->email)) {
                            $mailData['from'] = 'DRAP';
                            $mailData['subject'] = 'PIRIMS | Inspection';
                            $mailData['title'] = 'Greetings, ' . $inspDirector[0]->userName . '!';
                            $mailData['message'] = "The Licensing Division requested an inspection, please log in to PIRIMS to complete the inspection. ";
                            $mailData['email'] = $inspDirector[0]->email;
                            $sendStatus = emailSend($mailData);
                            if ($sendStatus == true) {
                                $result = 1;
                            }
                        }
                        if (!isset($inspDirector[0]->email)) {
                            $result = 0;
                        }
                        // ------------------- Send Mail End -------------------

                    }
                    if ($renewalStatus == 'Post Inspection Process') {
                        $data['renewalStatus'] = 'Under Board Stage 2';
                    }
                }

                if ($data['renewalStatus'] == 'Approved') {
                    if ($renewalStatus == 'Recommended By Board Stage 3') {
                        $data['licenseStatus'] = 'Approved';
                        $data['renewalApprovedBy'] = $this->userId;
                        $data['renewalStatus'] = 'Approved';
                        $data['lastRenewalDateManual'] = date($this->dateTimeFormat);
                        $data['renewalDateManual'] = date($this->dateTimeFormat);
                        $validTill1 = date_create(date('Y-m-d H:i', strtotime($validTill1 . ' +5 YEAR')));
                        $validTill1 = date_format($validTill1, $this->dateTimeFormat);
                        $data['validTill'] = $validTill1;
                        $data['status'] = 'Active';
                        // ------------------- Send Mail Start -------------------
                        if (isset($email)) {
                            $mailData['from'] = 'DRAP';
                            $mailData['subject'] = 'PIRIMS | License Renewal Approved';
                            $mailData['title'] = 'Greetings, ' . $userName . '!';
                            $mailData['message'] = "Your license reenwal application with ref. no " . $rniRefNo . " has been approved. In case of any query please write us at: support.pirims@dra.gov.pk";
                            $mailData['email'] = $email;
                            $sendStatus = emailSend($mailData);
                            if ($sendStatus == true) {
                                $result = 1;
                            }
                        }
                        if (!isset($email)) {
                            $result = 0;
                        }
                        // ------------------- Send Mail End -------------------
                        $markdelete = $this->loginModel->recordAjaxUpdate('id', $parentId, ['isDeleted' => '1', 'updatedby' => $this->userId, 'updateddate' => date($this->dateTimeFormat)], 'tbl_license');

                    }
                }


            }
            else if ($this->roleId == '38') { // Licensing Assigning Officer
                if ($data['renewalStatus'] == 'Save') {
                    $data['renewalStatus'] = $renewalStatus;
                }
                if ($data['renewalStatus'] == 'Proceed') {
                    $data['renewalStatus'] = $renewalStatus;
                    if ($renewalStatus == 'Submitted' || $renewalStatus == 'Screening') {
                        $data['renewalStatus'] = 'Under Review Stage 1';
                        // ------------------- Send Alert Start -------------------
                        $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                        $this->db->from('tbl_licensehistory as BaseTbl');
                        $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $queryAlert = $this->db->get();
                        $countAlert = $queryAlert->num_rows();
                        if ($countAlert === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($countAlert > 0) {
                            foreach ($queryAlert->result() as $rowAlert) {
                                $id = $rowAlert->id;
                                $masterId = $rowAlert->masterId;
                                $forwardedTo = $rowAlert->forwardedTo;
                                $userName = $rowAlert->userName;
                            }
                        }

                        $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'license/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                        // ------------------- Send Alert End -------------------
                    }
                    if ($renewalStatus == 'Under Review Stage 1') {
                        $data['renewalStatus'] = $renewalStatus;
                        // ------------------- Send Alert Start -------------------
                        $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                        $this->db->from('tbl_licensehistory as BaseTbl');
                        $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $queryAlert = $this->db->get();
                        $countAlert = $queryAlert->num_rows();
                        if ($countAlert === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($countAlert > 0) {
                            foreach ($queryAlert->result() as $rowAlert) {
                                $id = $rowAlert->id;
                                $masterId = $rowAlert->masterId;
                                $forwardedTo = $rowAlert->forwardedTo;
                                $userName = $rowAlert->userName;
                            }
                        }

                        $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'license/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                        // ------------------- Send Alert End -------------------
                    }
                }
            }
            else if ($this->roleId == '43') { // Licensing Board Secretary
                if ($data['renewalStatus'] == 'Save') {
                    $data['renewalStatus'] = $renewalStatus;
                }
                if ($data['renewalStatus'] == 'Rejected and Closed') {
                    if ($renewalStatus == 'Under Board Stage 2') {
                        $data['renewalStatus'] = 'Rejected and Closed';
                    }
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | License Rejected';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your license application with ref. no " . $rniRefNo . " has been rejected. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = emailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }
                if ($data['renewalStatus'] == 'Proceed') {
                    if ($renewalStatus == 'Under Board Stage 2') {
                        $data['renewalStatus'] = 'Recommended By Board Stage 3';
                    } else {
                        $data['renewalStatus'] = $renewalStatus;
                    }
                }
            } else if ($this->roleId == '42') { // CEO

            } else {
                $data['renewalStatus'] = $renewalStatus;
            }
            // Licensing Renewal Workflow Update END

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $companyUniqueNo, 'docs');
                }
            }

            $result = $this->loginModel->recordAjaxUpdate('id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), $data, $table);

            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }

            $sId = 0;
            $keys = array_keys($dataDetailTable);
            foreach (array_keys($dataDetailTable) as $key) {
                $current_key = current($keys);
                $current_value = $dataDetailTable[$current_key];
                $next_key = next($keys);
                $next_value = @$dataDetailTable[$next_key];
                $tableName = substr($current_key, 0, strpos($current_key, '-'));
                $nextTableName = substr($next_key, 0, strpos($next_key, '-'));
                if ($tableName == 'tabledetailsection2') {
                    $tableDetail = 'tbl_licensesectionmachine';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailmeeting') {
                    $tableDetail = 'tbl_licensemeeting';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                $sId++;
            }

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else {
            $this->accessDenied();
            return;
        }
    }

    function licensevariance($action = NULL, $id = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $myAction = '';
        if ($action == 'submit') {
            if (explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            }
            if (explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            }
            if ($myAction == 'add') {
                $myAction = 'save';
            }
            if ($myAction == 'edit') {
                $myAction = 'update';
            }
        }


        //---------- STAGES ---------
        // * Draft
        // * Submitted
        // * Screening
        // * Under R and I
        // * Received By DRAP
        // * Under Review Stage 1
        // * Review Complete
        // * Under Inspection
        // * Post Inspection Process
        // * Under Board Stage 2
        // * Referred Back To Company (Editable)
        // * Referred Back To Company (Locked)
        // * Recommended By Board Stage 3
        // * Rejected and Closed
        // * Approved
        //---------- STAGES ---------

        $table = 'tbl_license';
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        $data['records'] = $this->myModel->$functionName($table, $searchText);
        $data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);
        $data['recordsDetailManagement'] = $this->myModel->applylicensevarianceDetailManagementEdit($id);
        $data['recordsDetailSection'] = $this->myModel->applylicensevarianceDetailSectionEdit($id);
        $data['recordsDetailSectionMachine'] = $this->myModel->applylicensevarianceDetailSectionMachineEdit($id);
        $data['recordsDetailQualifiedStaff'] = $this->myModel->applylicensevarianceDetailQualifiedStaffEdit($id);
        $data['recordsDetailLayoutPlan'] = $this->myModel->applylicensevarianceDetailLayoutPlanEdit($id);
        $data['recordsDetailApi'] = $this->myModel->applylicensevarianceDetailApiEdit($id);
        $data['recordsDetailFacility'] = $this->myModel->applylicenseDetailFacilityEdit($id);
        $data['recordsDetailManagementApproved'] = $this->myModel->applylicenserenewalDetailManagementEdit(@$data['recordsEdit'][0]->maxApprovedId);
        $data['recordsDetailSectionApproved'] = $this->myModel->applylicenserenewalDetailSectionEdit(@$data['recordsEdit'][0]->maxApprovedId);
        $data['recordsDetailSectionMachineApproved'] = $this->myModel->applylicenserenewalDetailSectionMachineEdit(@$data['recordsEdit'][0]->maxApprovedId);
        $data['recordsDetailQualifiedStaffApproved'] = $this->myModel->applylicenseapprovedRecord('tbl_companyqualifiedstaff', @$data['recordsEdit'][0]->parentId);
        $data['recordsDetailLayoutPlanApproved'] = $this->myModel->applylicenserenewalDetailLayoutPlanEdit(@$data['recordsEdit'][0]->maxApprovedId);
        $data['recordsDetailApiApproved'] = $this->myModel->applylicenserenewalDetailApiEdit(@$data['recordsEdit'][0]->maxApprovedId);
        $data['recordsDetailQuery'] = $this->myModel->licensevarianceDetailQueryEdit($id);
        $data['licenseType'] = $this->myModel->licenseTypeGet();
        $data['pharmaGroup'] = $this->myModel->pharmaGroupGet();
        $data['usedFor'] = $this->myModel->usedForGet();
        $data['section'] = $this->myModel->sectionGet();
        $data['designation'] = $this->myModel->companyDesignationGet();
        $data['qualification'] = $this->myModel->companyQualificationGet();
        $data['specialization'] = $this->myModel->companySpecializationGet();
        $data['licenses'] = $this->myModel->licensesGet1(@$data['recordsEdit'][0]->companyId);
        $data['postChangeType'] = $this->myModel->licensePostChangeTypeGet();
        $data['sectionApproved'] = $this->myModel->sectionApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['pharmaGroupApproved'] = $this->myModel->pharmaGroupApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['usedForApproved'] = $this->myModel->usedForApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['historyDesignation'] = $this->myModel->licenseDesignationGet();
        $data['recordsDetailMeeting'] = $this->myModel->licenseDetailMeetingEdit($id);
        $data['recordsDetailHistory'] = $this->myModel->licenseDetailHistoryEdit($id);
        $data['varianceLicenses'] = $this->myModel->getLicensesForVariance();
        $data['approvedLicenses'] = $this->myModel->companyLicensesApproved()[0]->approvedlicenses;
        $data['approvedtilllayout'] = $this->myModel->companyLicensesTillLayoutApproved()[0]->layoutapproved;
        $data['approvedtillsite'] = $this->myModel->companyLicensesTillSiteApproved()[0]->siteapproved;


        if ($action == 'lookup' && $recordLookup == 1) {

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'add' && $recordAdd == 1) {
            /*
			$uri = $this->uri->segment_array();
			$lic_id = end($uri);
			if($lic_id > 0){
				$data['varianceLicense'] = $this->myModel->getLicense($lic_id);
			}else{
				redirect(__FUNCTION__.'/lookup');
			}*/

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);


        }
        else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }


            $seenBy = explode(",", $data['recordsEdit'][0]->seenBy);
            if (!(in_array($this->userId, $seenBy))) {
                $this->loginModel->seenByUpdate($id, $this->userId, $table);
            }

            if ($data['recordsEdit'][0]->postchangeStatus == 'Draft') {
                if ($this->roleId <> '26' && $data['recordsEdit'][0]->companyUniqueNo <> $this->companyUniqueNo) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            } else if ($data['recordsEdit'][0]->postchangeStatus == 'Submitted') {
                if ($this->roleId <> '38') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            } else if ($data['recordsEdit'][0]->postchangeStatus == 'Recommended By Board Stage 3') {

                if ($data['recordsEdit'][0]->discussInBoard == 1) {
                    if ($this->roleId <> '6') {
                        $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                        redirect(__FUNCTION__ . '/lookup');
                    }
                } else {
                    if ($data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                        $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                        redirect(__FUNCTION__ . '/lookup');
                    }
                }

            } else {

                if ($this->roleId == 38) {

                    if ($data['recordsEdit'][0]->lastAssignedroleId <> 38) {
                        $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                        redirect(__FUNCTION__ . '/lookup');
                    }
                } else if ($data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }

            /*
            if($data['recordsEdit'][0]->postchangeStatus == 'Referred Back To Company (Editable)'){
                //if($this->roleId <> '26' && $data['records'][0]->companyUniqueNo <> $this->companyUniqueNo){
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__.'/lookup');
                //}
            }*/
            if ($data['recordsEdit'][0]->postchangeStatus == 'Referred Back To Company (Locked)') {
                //if($this->roleId <> '26' && $data['records'][0]->companyUniqueNo <> $this->companyUniqueNo){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
                //}
            }
            /*
            if($data['recordsEdit'][0]->postchangeStatus == 'Submitted'){
                if($this->roleId <> '38'){
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__.'/lookup');
                }
            }
            if($data['recordsEdit'][0]->postchangeStatus == 'Screening'){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__.'/lookup');
            }
            if($data['recordsEdit'][0]->postchangeStatus == 'Under R and I'){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__.'/lookup');
            }
            if($data['recordsEdit'][0]->postchangeStatus == 'Received By DRAP'){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__.'/lookup');
            }
            if($data['recordsEdit'][0]->postchangeStatus == 'Under Review Stage 1'){
                if( $data['recordsEdit'][0]->lastAssignedUserId <> $this->userId){
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__.'/lookup');
                }
            }


            if($data['recordsEdit'][0]->postchangeStatus == 'Review Complete'){
                if($this->roleId <> '6' && $this->roleId <> '10'){// && $data['recordsEdit'][0]->lastAssignedUserId <> $this->userId){
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__.'/lookup');
                }
            }
			*/
            if ($data['recordsEdit'][0]->postchangeStatus == 'Under Inspection') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Under Board Stage 2') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Recommended By Board Stage 3') {
                if ($this->roleId <> '6' && $this->roleId <> '10' && $this->roleId <> '14' && $this->roleId <> '18' && $this->roleId <> '38' && $this->roleId <> '43' && $data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Rejected and Closed') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Approved') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }


            $seenBy = explode(",", $data['recordsEdit'][0]->seenBy);
            if (!(in_array($this->userId, $seenBy))) {
                $this->loginModel->seenByUpdate($id, $this->userId, $table);
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $this->db->select('BaseTbl.postchangeStatus');
            $this->db->from('tbl_license as BaseTbl');
            $this->db->where('BaseTbl.id', $id);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $postchangeStatus = $row->postchangeStatus;
                    if ($postchangeStatus == 'Draft') {
                        $result = $this->myModel->recordDelete('id', $id, $table);
                        $this->db->select('BaseTbl.id');
                        $this->db->from('tbl_challan as BaseTbl');
                        $this->db->where('BaseTbl.masterId', $id);
                        $query2 = $this->db->get();
                        $count2 = $query2->num_rows();
                        if ($count2 > 0) {
                            $this->loginModel->recordAjaxUpdate('masterId', $id, $data, 'tbl_challan');
                        }
                    } else {
                        $this->session->set_flashdata('error', 'Record cannot be deleted.');
                        $result = 0;
                    }
                }
            }

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }
            $validationFailed = 0;
            if ($this->form_validation->run() == FALSE) {
                $validationFailed = 1;
                $this->session->set_flashdata('error', validation_errors());
            }

            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            if ($this->roleId == '26') { // Company Submission
                // $this->db->select('BaseTbl.id');
                // $this->db->from('tbl_license as BaseTbl');
                // $this->db->where('BaseTbl.parentId', $data['id']);
                // $this->db->where('BaseTbl.postchangeStatus !=', 'Approved');
                // $query = $this->db->get();
                // $count = $query->num_rows();
                // if($count === 0){
                if ($data['postchangeStatus'] == 'Save') {
                    $data['postchangeStatus'] = 'Draft';
                    $this->db->select('BaseTbl.id, BaseTbl.licenseStatus');
                    $this->db->from('tbl_license as BaseTbl');
                    $this->db->where('BaseTbl.id', $data['id']);
                    $query = $this->db->get();
                    $count = $query->num_rows();
                    if ($count === 0) {
                        $this->session->set_flashdata('error', 'No record found.');
                    }
                    if ($count > 0) {
                        foreach ($query->result() as $row) {
                            $id = $row->id;
                            $licenseStatus = $row->licenseStatus;
                        }
                        //if($licenseStatus == 'Approved'){
                        $this->db->select('"' . $id . '" as parentId, BaseTbl.companyId, BaseTbl.licenseNo, BaseTbl.licenseNoManual, BaseTbl.issueDateManual, BaseTbl.licenseTypeId, BaseTbl.issueDate, BaseTbl.validTill, BaseTbl.lastRenewalDate, "' . $data['postchangeTypeId'] . '" as postchangeTypeId, BaseTbl.siteAddress, BaseTbl.siteCity, BaseTbl.googleMapURL, BaseTbl.latitude, BaseTbl.longitude, BaseTbl.layoutPlanPath, BaseTbl.siteAddress, BaseTbl.siteCity, BaseTbl.svCoveringLetter, BaseTbl.svLandDocument, BaseTbl.svFeeChallan, BaseTbl.svStatusofFirm, BaseTbl.svPartnershipDeed, BaseTbl.svCopyOfCNIC, BaseTbl.svRegistrationCertificate, BaseTbl.svSiteMap, BaseTbl.svSECPDocuments, BaseTbl.icFeeChallan, BaseTbl.icCoveringLetter, BaseTbl.icAppointmentLetter, BaseTbl.icAcceptanceLetter, BaseTbl.icCopyOfCNIC, BaseTbl.icAcademicDegrees, BaseTbl.icPharmacyCouncilLetter, BaseTbl.icExperienceCertificate, BaseTbl.icResignationLetter, BaseTbl.icResignationLetterPreviousEmployer, BaseTbl.icUndertakingProductionIC, BaseTbl.icUndertakingProductionQC, BaseTbl.dmlForm1, BaseTbl.dmlProForma, BaseTbl.dmlLegalStatus, BaseTbl.dmlFeeChallan, BaseTbl.dmlFormA1, BaseTbl.mgmApplicationForm, BaseTbl.mgmFeeChallan, BaseTbl.mgmShareAgreement, BaseTbl.mgmTransferDeed, BaseTbl.mgmForm29, BaseTbl.mgmCopyOfCNIC, BaseTbl.mgmNOCFromPreviousOwner, BaseTbl.mgmNothingDueCertificate, BaseTbl.apiApplicationForm, BaseTbl.apiFeeChallan, BaseTbl.apiChemicalNamesManufacturing, BaseTbl.apiChemicalNamesRecycled, BaseTbl.apiManufacturinfFlowChart, BaseTbl.apiTheoricalYied, BaseTbl.apiTrialBatches, BaseTbl.apiReferenceMonograph, BaseTbl.apiReferenceMonograph, BaseTbl.apiShelfLifeOfAPI, BaseTbl.apiMaterialSafetyData, BaseTbl.lpApplicationCoveringLetter, BaseTbl.lpChallanForm, BaseTbl.lpLayoutPlan, BaseTbl.lpLayoutPlan2, BaseTbl.lpLayoutPlan3, BaseTbl.lpLayoutPlan4, BaseTbl.lpLayoutPlan5, BaseTbl.lpLayoutPlan6, BaseTbl.lpLayoutPlan7, BaseTbl.lpLayoutPlan8, BaseTbl.lpLayoutPlan9, BaseTbl.lpLayoutPlan10, BaseTbl.ibApplicationCoveringLetter, BaseTbl.ibChallanForm, BaseTbl.ibLastThreePagesOfInspectionBook, BaseTbl.ibCopyOfFIR, BaseTbl.rpkApplicationCoveringLetter, BaseTbl.rpkFeeChallan, BaseTbl.rpkApprovalLetter, BaseTbl.qsDocuments, BaseTbl.qsDocuments2, BaseTbl.rCoveringLetter, BaseTbl.rFeeChallan, BaseTbl.rcrf, BaseTbl.rformA1, BaseTbl.rformA2, BaseTbl.rformA3, BaseTbl.rformA4, BaseTbl.rformA5, BaseTbl.pvFeeChallan, BaseTbl.pvts1, BaseTbl.pvts2, BaseTbl.pvts3, BaseTbl.pvts4, BaseTbl.pvts5, BaseTbl.pvts6, BaseTbl.pvts7, BaseTbl.pvts8, BaseTbl.pvts9, BaseTbl.pvts10, BaseTbl.pvcm1, BaseTbl.pvcm2, BaseTbl.pvcm3, BaseTbl.pvcn1, BaseTbl.pvcn2, BaseTbl.pvcn3, BaseTbl.pvcn4, BaseTbl.pvlp1, BaseTbl.pvlp2, BaseTbl.pvmg1, BaseTbl.pvmg2, BaseTbl.pvmg3, BaseTbl.pvmg4, BaseTbl.pvma1, BaseTbl.pvma2, BaseTbl.pvma3, BaseTbl.pvma4, BaseTbl.licFileNo, BaseTbl.siteApprovalRemarks, BaseTbl.panelOfInspector, BaseTbl.lastRenewalDateManual, BaseTbl.phase, BaseTbl.phase1Invoice, BaseTbl.phase2Invoice, BaseTbl.phase3Invoice, BaseTbl.phase1InvoicePaid, BaseTbl.phase2InvoicePaid, BaseTbl.phase3InvoicePaid, BaseTbl.renewalInvoice, "' . $data['postchangeStatus'] . '" as postchangeStatus, Company.companyName, BaseTbl.createdby as createdby, "' . $data['createddate'] . '" as createddate', false);
                        $this->db->from('tbl_license as BaseTbl');
                        $this->db->join('tbls_company as Company', 'Company.id = BaseTbl.companyId', 'left');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.id', $id);
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $result = $this->loginModel->recordAjaxSave($row, 'tbl_license');
                            }
                        }
                        $this->db->select('"' . $result . '" as masterId, BaseTbl.name, BaseTbl.fatherName, BaseTbl.address, BaseTbl.nic, BaseTbl.department, BaseTbl.designation, BaseTbl.phone, BaseTbl.email, BaseTbl.enterDate, BaseTbl.exitDate, BaseTbl.remarks, BaseTbl.status, BaseTbl.createdby as createdby, "' . $data['createddate'] . '" as createddate', false);
                        $this->db->from('tbl_companymanagement as BaseTbl');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', $id);
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_companymanagement');
                            }
                        }
                        $this->db->select('"' . $result . '" as masterId, BaseTbl.name, BaseTbl.fatherName, BaseTbl.address, BaseTbl.nic, BaseTbl.phone, BaseTbl.designationId, BaseTbl.qualificationId, BaseTbl.specializationId, BaseTbl.enterDate, BaseTbl.exitDate, BaseTbl.remarks, BaseTbl.status, BaseTbl.createdby as createdby, "' . $data['createddate'] . '" as createddate', false);
                        $this->db->from('tbl_companyqualifiedstaff as BaseTbl');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', $id);
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_companyqualifiedstaff');
                            }
                        }
                        // $this->db->select('"'.$result.'" as masterId, BaseTbl.checklistId, BaseTbl.checklistCheckedId, BaseTbl.attachment, BaseTbl.description, BaseTbl.remarks, BaseTbl.status, BaseTbl.createdby as createdby, "'.$data['createddate'].'" as createddate', false);
                        // $this->db->from('tbl_licensechecklist as BaseTbl');
                        // $this->db->where('BaseTbl.isDeleted', 0);
                        // $this->db->where('BaseTbl.masterId', $id);
                        // $query = $this->db->get();
                        // $count = $query->num_rows();
                        // if($count === 0){
                        //     $this->session->set_flashdata('error', 'No record found.');
                        // }
                        // if($count > 0){
                        //     foreach ($query->result() as $row){
                        //         $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licensechecklist');
                        //     }
                        // }
                        // $this->db->select('"'.$result.'" as masterId, BaseTbl.dosageId, BaseTbl.drugName, BaseTbl.remarks, BaseTbl.status, BaseTbl.createdby as createdby, "'.$data['createddate'].'" as createddate', false);
                        // $this->db->from('tbl_licensedrugclass as BaseTbl');
                        // $this->db->where('BaseTbl.isDeleted', 0);
                        // $this->db->where('BaseTbl.masterId', $id);
                        // $query = $this->db->get();
                        // $count = $query->num_rows();
                        // if($count === 0){
                        //     $this->session->set_flashdata('error', 'No record found.');
                        // }
                        // if($count > 0){
                        //     foreach ($query->result() as $row){
                        //         $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licensedrugclass');
                        //     }
                        // }
                        // $this->db->select('"'.$result.'" as masterId, BaseTbl.type, BaseTbl.userId, BaseTbl.forwardedTo, BaseTbl.dateTime, BaseTbl.remarks, BaseTbl.status, BaseTbl.createdby as createdby, "'.$data['createddate'].'" as createddate', false);
                        // $this->db->from('tbl_licensehistory as BaseTbl');
                        // $this->db->where('BaseTbl.isDeleted', 0);
                        // $this->db->where('BaseTbl.masterId', $id);
                        // $query = $this->db->get();
                        // $count = $query->num_rows();
                        // if($count === 0){
                        //     $this->session->set_flashdata('error', 'No record found.');
                        // }
                        // if($count > 0){
                        //     foreach ($query->result() as $row){
                        //         $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licensehistory');
                        //     }
                        // }
                        // $this->db->select('"'.$result.'" as masterId, BaseTbl.type, BaseTbl.meetingNo, BaseTbl.meetingDate, BaseTbl.remarks, BaseTbl.status, BaseTbl.createdby as createdby, "'.$data['createddate'].'" as createddate', false);
                        // $this->db->from('tbl_licensemeeting as BaseTbl');
                        // $this->db->where('BaseTbl.isDeleted', 0);
                        // $this->db->where('BaseTbl.masterId', $id);
                        // $query = $this->db->get();
                        // $count = $query->num_rows();
                        // if($count === 0){
                        //     $this->session->set_flashdata('error', 'No record found.');
                        // }
                        // if($count > 0){
                        //     foreach ($query->result() as $row){
                        //         $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licensemeeting');
                        //     }
                        // }
                        $this->db->select('"' . $result . '" as masterId, BaseTbl.sectionId, BaseTbl.pharmaGroupId, BaseTbl.usedForId, BaseTbl.approved, BaseTbl.recommended, BaseTbl.remarks, BaseTbl.status, BaseTbl.createdby as createdby, "' . $data['createddate'] . '" as createddate', false);
                        $this->db->from('tbl_licensesection as BaseTbl');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', $id);
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licensesection');
                            }
                        }
                        $this->db->select('"' . $result . '" as masterId, BaseTbl.sectionId, BaseTbl.pharmaGroupId, BaseTbl.usedForId, BaseTbl.drugName, BaseTbl.machineMake, BaseTbl.machineModel, BaseTbl.machinePartNo, BaseTbl.remarks, BaseTbl.status, BaseTbl.createdby as createdby, "' . $data['createddate'] . '" as createddate', false);
                        $this->db->from('tbl_licensesectionmachine as BaseTbl');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', $id);
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licensesectionmachine');
                            }
                        }

                        $this->db->select('"' . $result . '" as masterId, BaseTbl.apiName, BaseTbl.filePath, BaseTbl.filePath2, BaseTbl.filePath3, BaseTbl.filePath4, BaseTbl.filePath5, BaseTbl.filePath6, BaseTbl.filePath7, BaseTbl.filePath8, BaseTbl.filePath9, BaseTbl.filePath10, BaseTbl.filePath11, BaseTbl.filePath11, BaseTbl.remarks, BaseTbl.status, BaseTbl.status, BaseTbl.createdby as createdby, "' . $data['createddate'] . '" as createddate', false);
                        $this->db->from('tbl_licenseapi as BaseTbl');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', $id);
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licenseapi');
                            }
                        }


                        $this->db->select('"' . $result . '" as masterId, BaseTbl.filePath, BaseTbl.approvedFilePath, BaseTbl.description, BaseTbl.remarks, BaseTbl.status, BaseTbl.createdby as createdby, "' . $data['createddate'] . '" as createddate', false);
                        $this->db->from('tbl_licenselayoutplan as BaseTbl');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', $id);
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licenselayoutplan');
                            }
                        }

                        // Add Challan Data

                        if (isset($data['challan_no'])) {

                            $this->loginModel->recordAjaxSave(['masterId' => $result,
                                'challan_no' => $data['challan_no'],
                                'challan_fee' => $data['challan_fee'],
                                'challan_status' => $data['challan_status'],
                                'challan_msg' => $data['challan_msg'],
                                'challan_account_id' => $data['challan_account_id'],
                                'challan_account_title' => $data['challan_account_title'],
                                'challan_date' => $data['challan_date'],
                                'status' => $data['challan_status'],
                                'createdby' => $data['updatedby'],
                                'createddate' => $data['updateddate']
                            ], 'tbl_challan');

                            unset($data['challan_no']);
                            unset($data['challan_fee']);
                            unset($data['challan_status']);
                            unset($data['challan_msg']);
                            unset($data['challan_account_id']);
                            unset($data['challan_account_title']);
                            unset($data['challan_date']);
                        }


                        //}
                    }
                }
                //}
            }

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }


            $validationFailed = 0;

            if ($this->form_validation->run() == FALSE) {
                $validationFailed = 1;
                $this->session->set_flashdata('error', validation_errors());
            }
            if (isset($data['challan_status']) && $data['challan_status'] != 'Paid'){
                $this->session->set_flashdata('error', 'Please attach paid challan');
                redirect(__FUNCTION__ . '/lookup');
            }


            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }

            // Licensing Variance Workflow Update START
            $this->db->select('BaseTbl.id,BaseTbl.parentId, User.email, User.userName, BaseTbl.rniRefNo, BaseTbl.licenseNo, Company.id as companyId, Company.companyUniqueNo, BaseTbl.postchangeStatus, BaseTbl.postchangeTypeId');
            $this->db->from('tbl_license as BaseTbl');
            $this->db->join('tbls_company as Company', 'Company.id = BaseTbl.companyId', 'left');
            $this->db->join('tbls_user as User', 'User.companyId = Company.id', 'left');
            $this->db->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    $parentid = $row->parentId;
                    $email = $row->email;
                    $userName = $row->userName;
                    $rniRefNo = $row->rniRefNo;
                    $licenseNo = $row->licenseNo;
                    $companyId = $row->companyId;
                    $companyUniqueNo = $row->companyUniqueNo;
                    $postchangeStatus = $row->postchangeStatus;
                    $postchangeTypeId = $row->postchangeTypeId;
                }
            }


            // Save Challan Data
            // check if already challan is added
            $this->db->select('BaseTbl.*');
            $this->db->from('tbl_challan as BaseTbl');
            $this->db->where('BaseTbl.isDeleted', 0);
            $this->db->where('BaseTbl.masterId', $id);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0 && isset($data['challan_no'])) {
                $this->loginModel->recordAjaxSave(['masterId' => $id,
                    'challan_no' => $data['challan_no'],
                    'challan_fee' => $data['challan_fee'],
                    'challan_status' => $data['challan_status'],
                    'challan_msg' => $data['challan_msg'],
                    'challan_account_id' => $data['challan_account_id'],
                    'challan_account_title' => $data['challan_account_title'],
                    'challan_date' => $data['challan_date'],
                    'status' => $data['challan_status'],
                    'createdby' => $data['updatedby'],
                    'createddate' => $data['updateddate']
                ], 'tbl_challan');
                unset($data['challan_no']);
                unset($data['challan_fee']);
                unset($data['challan_status']);
                unset($data['challan_msg']);
                unset($data['challan_account_id']);
                unset($data['challan_account_title']);
                unset($data['challan_date']);
            }

            if ($this->roleId <> '26' && $data['postchangeStatus'] != 'Save') {
                if ($data['forwardedTo_detail101']) {
                    $byRole = $this->designation.' '.$this->department;

                    if ($data['sendQueryToCompany'] == '1') {
                        if ($data['forwardedTo_detail101'] == $this->userId) {
                            $userRecord = $this->loginModel->getDesignationDepartment(103);
                            $forwardedRole = $userRecord[0]->urole;
                            $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'Post License Change', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => 103, 'byRole'=>$byRole,'forwardedRole'=>$forwardedRole, 'remarks' => $data['remarks_detail101'], 'status' => $postchangeStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'isDeleted' => 1], 'tbl_licensehistory');
                        } else {
                            $userRecord = $this->loginModel->getDesignationDepartment($data['forwardedTo_detail101']);
                            $forwardedRole = $userRecord[0]->urole;
                            $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'Post License Change', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo_detail101'], 'byRole'=>$byRole,'forwardedRole'=>$forwardedRole, 'remarks' => $data['remarks_detail101'], 'status' => $postchangeStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                        }

                        $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'dateTime' => date($this->dateTimeFormat), 'title' => 'Post License Change', 'type' => 'Post License Change', 'message' => $data['remarks_detail101'], 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => 'Info Required From Company', 'shortcomming' => $data['reviewer1Remarks'], 'letterType' =>$data['letterType'], 'shortcommingTypeId' => $postchangeTypeId, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_query');

                        // ------------------- Send Mail Start -------------------
                        if (isset($email)) {
                            $mailData['from'] = 'DRAP';
                            $mailData['subject'] = 'PIRIMS | Query';
                            $mailData['title'] = 'Greetings, ' . $userName . '!';
                            $mailData['message'] = "Your have a query from DRAP of license variance application with ref. no " . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . ".";
                            $mailData['email'] = $email;
                            $sendStatus = emailSend($mailData);
                            if ($sendStatus == true) {
                                $result = 1;
                            }
                        }
                        if (!isset($email)) {
                            $result = 0;
                        }
                        // ------------------- Send Mail End -------------------

                    } else {
                        $userRecord = $this->loginModel->getDesignationDepartment($data['forwardedTo_detail101']);
                        $forwardedRole = $userRecord[0]->urole;
                        $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'Post License Change', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo_detail101'], 'byRole'=>$byRole,'forwardedRole'=>$forwardedRole, 'remarks' => $data['remarks_detail101'], 'status' => $postchangeStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                    }
                }
            }
            unset($data['forwardedTo_detail101']);
            unset($data['remarks_detail101']);
            unset($data['sendQueryToCompany']);
            unset($data['letterType']);


            if ($this->roleId == '26') { // Company Submission
                if ($data['postchangeStatus'] == 'Save') {
                    $data['postchangeStatus'] = $postchangeStatus;
                }
                if ($data['postchangeStatus'] == 'Submit') {
                    $data['rniRefNo'] = $rniRefNo;
                    if ($rniRefNo == NULL) {
                        $data['rniRefNo'] = 'L-N-' . $id;
                    }
                    if ($postchangeStatus == 'Draft') {
                        $data['postchangeStatus'] = 'Submitted';
                        $data['submissionDate'] = date($this->dateTimeFormat);
                        $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "License" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response From Applicant" as remarks, "Draft" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                        $this->db->from('tbl_licensehistory as BaseTbl');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'Post License Change', 'userId' => $this->userId, 'forwardedTo' => 103, 'dateTime' => date($this->dateTimeFullFormat), 'remarks' => "Response From Applicant", 'status' => "Draft", 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licensehistory');
                            }
                        }
                    }
                    if ($postchangeStatus == 'Referred Back To Company (Locked)') {
                        $data['postchangeStatus'] = 'Under Review Stage 1';
                    }
                    if ($validationFailed == 1) {
                        //$data['postchangeStatus'] = $postchangeStatus;
                    }
                }
            }
            else if ($this->roleId == '6') { // Licensing Director
                if ($data['postchangeStatus'] == 'Save') {
                    $data['postchangeStatus'] = $postchangeStatus;
                }
                if ($data['postchangeStatus'] == 'Proceed') {
                    $data['postchangeStatus'] = $postchangeStatus;
                }
                if ($data['postchangeStatus'] == 'Rejected and Closed') {
                    $data['postchangeStatus'] = 'Rejected and Closed';
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | License Rejected';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your license application with ref. no " . $rniRefNo . " has been rejected. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = emailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }
            }
            else if ($this->roleId == '10') { // Licensing Additional Director
                if ($data['postchangeStatus'] == 'Save') {
                    $data['postchangeStatus'] = $postchangeStatus;
                }
                if ($data['postchangeStatus'] == 'Proceed') {
                    $data['postchangeStatus'] = $postchangeStatus;
                }
            }
            else if ($this->roleId == '14') { // Licensing Deputy Director
                if ($data['postchangeStatus'] == 'Save') {
                    $data['postchangeStatus'] = $postchangeStatus;
                }
                if ($data['postchangeStatus'] == 'Proceed') {
                    $data['postchangeStatus'] = $postchangeStatus;
                }
            }
            else if ($this->roleId == '18') { // Licensing Assistant Director
                if ($data['postchangeStatus'] == 'Save' || $data['postchangeStatus'] == 'fwdapproval') {
                    $data['postchangeStatus'] = $postchangeStatus;
                }
                if ($data['postchangeStatus'] == 'Referred Back To Company') {
                    if ($postchangeStatus == 'Under Review Stage 1') {
                        $data['postchangeStatus'] = 'Referred Back To Company (Locked)';

                    }
                    $data['postchangeStatus'] = 'Referred Back To Company (Locked)';
                }
                if ($data['postchangeStatus'] == 'Proceed') {
                    if ($postchangeStatus == 'Under Review Stage 1') {
                        if ($postchangeTypeId == 15 || $postchangeTypeId == 17) {
                            //check if firm has any approved license
                            /*if($data['approvedLicenses'] > 0){
								$data['postchangeStatus'] = 'Under Board Stage 2';
							}else{
								$data['postchangeStatus'] = 'Review Complete';
							}*/
                            $data['postchangeStatus'] = 'Review Complete';
                        }


                        if ($postchangeTypeId == 16 || $postchangeTypeId == 18 || $postchangeTypeId == 19 || $postchangeTypeId == 20 || $postchangeTypeId == 23 || $postchangeTypeId == 24 || $postchangeTypeId == 25 || $postchangeTypeId == 28) {
                            $data['postchangeStatus'] = 'Review Complete';
                        }
                        if ($postchangeTypeId == 23 || $postchangeTypeId == 27 || $postchangeTypeId == 28) {
                            $data['postchangeStatus'] = 'Under Inspection';
                            $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => 9, 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            // ------------------- Send Mail Start -------------------
                            $inspDirector = $this->myModel->getRecords('tbls_user', 'id', 121);
                            if (isset($inspDirector[0]->email)) {
                                $mailData['from'] = 'DRAP';
                                $mailData['subject'] = 'PIRIMS | Inspection';
                                $mailData['title'] = 'Greetings, ' . $inspDirector[0]->userName . '!';
                                $mailData['message'] = "The Licensing Division requested an inspection, please log in to PIRIMS to complete the inspection. ";
                                $mailData['email'] = $inspDirector[0]->email;
                                $sendStatus = emailSend($mailData);
                                if ($sendStatus == true) {
                                    $result = 1;
                                }
                            }
                            if (!isset($inspDirector[0]->email)) {
                                $result = 0;
                            }
                            // ------------------- Send Mail End -------------------

                        }
                        if ($postchangeTypeId == 26) {
                            $data['postchangeStatus'] = 'Under Board Stage 2';
                        }

                    }
                    if ($postchangeStatus == 'Post Inspection Process') {
                        if ($postchangeTypeId == 28) {
                            $data['postchangeStatus'] = 'Review Complete';
                        } else {
                            $data['postchangeStatus'] = 'Under Board Stage 2';
                        }

                    }
                }

                if ($data['postchangeStatus'] == 'Rejected and Closed') {
                    $data['postchangeStatus'] = 'Rejected and Closed';
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | License Rejected';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your license application with ref. no " . $rniRefNo . " has been rejected. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = emailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }

                if ($data['postchangeStatus'] == 'Approved') {
                    if ($postchangeStatus == 'Recommended By Board Stage 3') {
                        $data['licenseStatus'] = 'Approved';
                        $data['postchangeStatus'] = 'Approved';
                        $data['varianceApprovedBy'] = $this->userId;
                        //$data['lastRenewalDateManual'] = date($this->dateTimeFormat);
                        //$data['renewalDateManual'] = date($this->dateTimeFormat);
                        //$validTill1 = date_create(date('Y-m-d H:i', strtotime($validTill1 . ' +5 YEAR')));
                        //$validTill1 = date_format($validTill1, $this->dateTimeFormat);
                        //$data['validTill'] = $validTill1;
                        $data['status'] = 'Active';
                        // ------------------- Send Mail Start -------------------
                        if (isset($email)) {
                            $mailData['from'] = 'DRAP';
                            $mailData['subject'] = 'PIRIMS | License Variance Approved';
                            $mailData['title'] = 'Greetings, ' . $userName . '!';
                            $mailData['message'] = "Your license variance application with ref. no " . $rniRefNo . " has been approved. In case of any query please write us at: support.pirims@dra.gov.pk";
                            $mailData['email'] = $email;
                            $sendStatus = emailSend($mailData);
                            if ($sendStatus == true) {
                                $result = 1;
                            }
                        }
                        if (!isset($email)) {
                            $result = 0;
                        }
                        // ------------------- Send Mail End -------------------
                    }
                    if ($postchangeStatus == 'Review Complete') {
                        $data['licenseStatus'] = 'Approved';
                        $data['postchangeStatus'] = 'Approved';
                        $data['varianceApprovedBy'] = $this->userId;

                        $data['status'] = 'Active';
                        // ------------------- Send Mail Start -------------------
                        if (isset($email)) {
                            $mailData['from'] = 'DRAP';
                            $mailData['subject'] = 'PIRIMS | License Variance Approved';
                            $mailData['title'] = 'Greetings, ' . $userName . '!';
                            $mailData['message'] = "Your license variance application with ref. no " . $rniRefNo . " has been approved. In case of any query please write us at: support.pirims@dra.gov.pk";
                            $mailData['email'] = $email;
                            $sendStatus = emailSend($mailData);
                            if ($sendStatus == true) {
                                $result = 1;
                            }
                        }
                        if (!isset($email)) {
                            $result = 0;
                        }
                        // ------------------- Send Mail End -------------------
                    }

                    $activeApplications = $this->myModel->getCompanyActiveLicenseApplications($companyId);

                    //Change of Company Name
                    if ($postchangeTypeId == 15) {
                        $resultdetail = $this->loginModel->recordAjaxUpdate('id', $companyId, ['companyName' => $data['pvcn1'], 'updatedby' => $this->userId, 'updateddate' => date($this->dateTimeFormat)], 'tbls_company');
                    }
                    // Change of Technical Staff
                    if ($postchangeTypeId == 16 || $postchangeTypeId == 19) {
                        $activeApplications = $this->myModel->getCompanyActiveLicenseApplications($data['recordsEdit'][0]->companyId);

                        foreach ($activeApplications as $activeApplication) {
                            if ($activeApplication->id <> $id) {
                                $this->loginModel->recordAjaxUpdate('masterId', $activeApplication->id, ['updatedby' => $this->userId, 'updateddate' => date($this->dateTimeFormat), 'isDeleted' => 0], 'tbl_companyqualifiedstaff');
                                $currentStaff = $data['recordsDetailQualifiedStaff'];
                                foreach ($currentStaff as $cstaff) {
                                    $staffnewrecord = array(
                                        'masterId' => $activeApplication->id,
                                        'name' => $cstaff->name,
                                        'fatherName' => $cstaff->fatherName,
                                        'address' => $cstaff->address,
                                        'nic' => $cstaff->nic,
                                        'phone' => $cstaff->phone,
                                        'designationId' => $cstaff->designationId,
                                        'qualificationId' => $cstaff->qualificationId,
                                        'specializationId' => $cstaff->specializationId,
                                        'createdby' => $cstaff->createdby,
                                        'createddate' => $cstaff->createddate,
                                        'updatedby' => $this->userId,
                                        'updateddate' => date($this->dateTimeFormat)
                                    );
                                    $this->loginModel->recordAjaxSave($staffnewrecord, 'tbl_companyqualifiedstaff');
                                }
                            }
                        }
                    }
                    // Change of Company Management
                    if ($postchangeTypeId == 17) {
                        $activeApplications = $this->myModel->getCompanyActiveLicenseApplications($data['recordsEdit'][0]->companyId);

                        foreach ($activeApplications as $activeApplication) {
                            if ($activeApplication->id <> $id) {
                                $this->loginModel->recordAjaxUpdate('masterId', $activeApplication->id, ['updatedby' => $this->userId, 'updateddate' => date($this->dateTimeFormat), 'isDeleted' => 0], 'tbl_companymanagement');
                                $currentManagement = $data['recordsDetailManagement'];
                                foreach ($currentManagement as $cmanagement) {
                                    $managementnewrecord = array(
                                        'masterId' => $activeApplication->id,
                                        'name' => $cmanagement->name,
                                        'fatherName' => $cmanagement->fatherName,
                                        'address' => $cmanagement->address,
                                        'nic' => $cmanagement->nic,
                                        'department' => $cstaff->department,
                                        'designation' => $cstaff->designation,
                                        'phone' => $cmanagement->phone,
                                        'email' => $cstaff->email,
                                        'createdby' => $cmanagement->createdby,
                                        'createddate' => $cmanagement->createddate,
                                        'updatedby' => $this->userId,
                                        'updateddate' => date($this->dateTimeFormat)
                                    );
                                    $this->loginModel->recordAjaxSave($managementnewrecord, 'tbl_companymanagement');
                                }
                            }
                        }
                    }
                    /* //Attestation of DML
					if($postchangeTypeId == 25){
						$mid = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
						$markdelete = $this->loginModel->recordAjaxUpdate('id', $mid, ['isDeleted' => '1', 'updatedby'=> $this->userId, 'updateddate'=>date($this->dateTimeFormat)], 'tbl_license');

					}else{
					}*/
                    $markdelete = $this->loginModel->recordAjaxUpdate('id', $parentid, ['isDeleted' => '1', 'updatedby' => $this->userId, 'updateddate' => date($this->dateTimeFormat)], 'tbl_license');


                }


            }
            else if ($this->roleId == '38') { // Licensing Assigning Officer
                if ($data['postchangeStatus'] == 'Save') {
                    $data['postchangeStatus'] = $postchangeStatus;
                }
                if ($data['postchangeStatus'] == 'Proceed') {
                    $data['postchangeStatus'] = $postchangeStatus;
                    if ($postchangeStatus == 'Submitted' || $postchangeStatus == 'Screening') {
                        $data['postchangeStatus'] = 'Under Review Stage 1';
                        // ------------------- Send Alert Start -------------------
                        $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                        $this->db->from('tbl_licensehistory as BaseTbl');
                        $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $queryAlert = $this->db->get();
                        $countAlert = $queryAlert->num_rows();
                        if ($countAlert === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($countAlert > 0) {
                            foreach ($queryAlert->result() as $rowAlert) {
                                $id = $rowAlert->id;
                                $masterId = $rowAlert->masterId;
                                $forwardedTo = $rowAlert->forwardedTo;
                                $userName = $rowAlert->userName;
                            }
                        }

                        $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'license/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                        // ------------------- Send Alert End -------------------
                    }
                    if ($postchangeStatus == 'Under Review Stage 1') {
                        $data['postchangeStatus'] = $postchangeStatus;
                        // ------------------- Send Alert Start -------------------
                        $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                        $this->db->from('tbl_licensehistory as BaseTbl');
                        $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $queryAlert = $this->db->get();
                        $countAlert = $queryAlert->num_rows();
                        if ($countAlert === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($countAlert > 0) {
                            foreach ($queryAlert->result() as $rowAlert) {
                                $id = $rowAlert->id;
                                $masterId = $rowAlert->masterId;
                                $forwardedTo = $rowAlert->forwardedTo;
                                $userName = $rowAlert->userName;
                            }
                        }

                        $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'license/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                        // ------------------- Send Alert End -------------------
                    }
                    if ($postchangeStatus == 'Review Complete') {
                        $data['postchangeStatus'] = $postchangeStatus;
                    }
                }
            }
            else if ($this->roleId == '43') { // Licensing Board Secretary
                if ($data['postchangeStatus'] == 'Save') {
                    $data['postchangeStatus'] = $postchangeStatus;
                }
                if ($data['postchangeStatus'] == 'Rejected and Closed') {
                    if ($postchangeStatus == 'Under Board Stage 2') {
                        $data['postchangeStatus'] = 'Rejected and Closed';
                    }
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | License Rejected';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your license application with ref. no " . $rniRefNo . " has been rejected. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = emailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }
                if ($data['postchangeStatus'] == 'Proceed') {
                    if ($postchangeStatus == 'Under Board Stage 2') {
                        $data['postchangeStatus'] = 'Recommended By Board Stage 3';
                    }else{
                        $data['licenseStatus'] = $postchangeStatus;
                    }
                }
            }
            else if ($this->roleId == '42') { // CEO

            } else {
                $data['postchangeStatus'] = $postchangeStatus;
            }
            // Licensing Variance Workflow Update END

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $companyUniqueNo, 'docs');
                }
            }

            $result = $this->loginModel->recordAjaxUpdate('id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), $data, $table);

            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }

            $sId = 0;
            $keys = array_keys($dataDetailTable);
            foreach (array_keys($dataDetailTable) as $key) {
                $current_key = current($keys);
                $current_value = $dataDetailTable[$current_key];
                $next_key = next($keys);
                $next_value = @$dataDetailTable[$next_key];
                $tableName = substr($current_key, 0, strpos($current_key, '-'));
                $nextTableName = substr($next_key, 0, strpos($next_key, '-'));
                if ($tableName == 'tabledetailmanagement') {
                    $tableDetail = 'tbl_companymanagement';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailapi') {
                    $tableDetail = 'tbl_licenseapi';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {

                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailsection' || $tableName == 'tabledetailsection2') {
                    $tableDetail = 'tbl_licensesection';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailfacility') {
                    $tableDetail = 'tbl_licensefacility';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }


                if ($tableName == 'tabledetaillayoutplan') {
                    $tableDetail = 'tbl_licenselayoutplan';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailqualifiedstaff') {
                    $tableDetail = 'tbl_companyqualifiedstaff';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailmeeting') {
                    $tableDetail = 'tbl_licensemeeting';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                $sId++;
            }

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else {
            $this->accessDenied();
            return;
        }
    }

    function newregistration($action = NULL, $id = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $myAction = '';
        if ($action == 'submit') {
            if (explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            }
            if (explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            }
            if ($myAction == 'add') {
                $myAction = 'save';
            }
            if ($myAction == 'edit') {
                $myAction = 'update';
            }
        }

        //---------- STAGES ---------
        // * Draft
        // * Submitted
        // * Screening
        // * Under R and I
        // * Received By DRAP
        // * Under Review Stage 1
        // * Review Complete
        // * Under Inspection
        // * Post Inspection Process
        // * Under Board Stage 2
        // * Post Board Process
        // * Referred Back To Company (Editable)
        // * Referred Back To Company (Locked)
        // * Recommended By Board Stage 3
        // * Under Pricing
        // * Pricing Complete
        // * Deferred and Closed
        // * Approved
        //---------- STAGES ---------

        $table = 'tbl_registration';
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        $data['records'] = $this->myModel->$functionName($table, $searchText);
        $data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);
        $data['recordsDetailProposedName'] = $this->myModel->applyregistrationDetailProposedNameEdit($id);
        $data['recordsDetailINN'] = $this->myModel->applyregistrationDetailINNEdit($id);
        $data['recordsDetailProposedPacking'] = $this->myModel->applyregistrationDetailProposedPackingEdit($id);
        $data['recordsDetailDomesticReference'] = $this->myModel->applyregistrationDetailDomesticReferenceEdit($id);
        $data['recordsDetailInternationalReference'] = $this->myModel->applyregistrationDetailInternationalReferenceEdit($id);
        $data['recordsDetailQuery'] = $this->myModel->registrationDetailQueryEdit($id);
        $data['registrationType'] = $this->myModel->registrationTypeGet();
        $data['pharmacopeia'] = $this->myModel->pharmacopeiaGet();
        $data['atcCode'] = $this->myModel->atcCodeGet();
        $data['innCode'] = $this->myModel->innCodeGet();
        $data['productOrigin'] = $this->myModel->productOriginGet();
        $data['productCategory'] = $this->myModel->productCategoryGet();
        $data['usedFor'] = $this->myModel->usedForGet();
        $data['dosageForm'] = $this->myModel->dosageFormGet();

        $data['basicDose'] = $this->myModel->basicDoseGet();
        $data['pharmaDose'] = $this->myModel->pharmaDoseGet();
        $data['combinedPharmaDose'] = $this->myModel->combinedPharmaDoseGet();
        $data['releaseCharacteristics'] = $this->myModel->releaseCharacteristicsGet();
        $data['transformation'] = $this->myModel->transformationGet();
        $data['adminMethod'] = $this->myModel->adminMethodGet();
        $data['intendedSite'] = $this->myModel->intendedSiteGet();
        $data['presentationUnit'] = $this->myModel->presentationUnitGet();
        $data['packagingCategory'] = $this->myModel->packagingCategoryGet();
        $data['routeOfAdmin'] = $this->myModel->routeOfAdminGet();
        $data['unit'] = $this->myModel->unitGet();
        $data['labelClaim'] = $this->myModel->labelClaimGet();

        $data['regulatoryBody'] = $this->myModel->regulatoryBodyGet();
        $data['priorityReason'] = $this->myModel->registrationPriorityReasonGet();
        $data['inspectionType'] = $this->myModel->inspectionTypeRegistrationGet();
        //$data['licenses'] = $this->myModel->licensesGet1(@$data['recordsEdit'][0]->companyId);
        $data['licenseApproved1'] = $this->myModel->licenseApprovedGet($this->companyId);
        $data['allApprovedLicenses'] = $this->myModel->allApprovedLicensesGet();
        $data['licenseApproved'] = $this->myModel->licenseApprovedGet(@$data['recordsEdit'][0]->companyId);
        $data['sectionApproved'] = $this->myModel->sectionApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['pharmaGroupApproved'] = $this->myModel->pharmaGroupApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['usedForApproved'] = $this->myModel->usedForApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['licenseSectionApproved'] = $this->myModel->licenseSectionApprovedGet($id);
        $data['historyDesignation'] = $this->myModel->registrationDesignationGet();
        $data['recordsDetailMeeting'] = $this->myModel->registrationDetailMeetingEdit($id);
        $data['recordsDetailHistory'] = $this->myModel->registrationDetailHistoryEdit($id);

        if ($action == 'lookup' && $recordLookup == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $seenBy = explode(",", $data['recordsEdit'][0]->seenBy);
            if (!(in_array($this->userId, $seenBy))) {
                $this->loginModel->seenByUpdate($id, $this->userId, $table);
            }
            if ($data['recordsEdit'][0]->registrationStatus == 'Draft') {
                if ($this->roleId <> '26' && $data['recordsEdit'][0]->companyUniqueNo <> $this->companyUniqueNo) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->registrationStatus == 'Referred Back To Company (Editable)') {
                if ($this->roleId <> '26' && $data['records'][0]->companyUniqueNo <> $this->companyUniqueNo) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->registrationStatus == 'Referred Back To Company (Locked)') {
                //if($this->roleId <> '26' && $data['records'][0]->companyUniqueNo <> $this->companyUniqueNo){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
                //}
            }
            if ($data['recordsEdit'][0]->registrationStatus == 'Submitted') {
                if ($this->roleId <> '51') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->registrationStatus == 'Screening') {
                if ($data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->registrationStatus == 'Under R and I') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->registrationStatus == 'Received By DRAP') {
                if ($this->roleId <> '39') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->registrationStatus == 'Under Review Stage 1') {
                if ($data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->registrationStatus == 'Review Complete') {
                if ($this->roleId <> '39') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->registrationStatus == 'Under Inspection') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->registrationStatus == 'Post Inspection Process') {
                if ($this->roleId <> '7' && $this->roleId <> '11' && $this->roleId <> '15' && $this->roleId <> '19' && $this->roleId <> '39' && $this->roleId <> '44' && $data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->registrationStatus == 'Under Board Stage 2') {
                if ($this->roleId <> '44') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->registrationStatus == 'Post Board Process') {
                if ($this->roleId <> '7' && $this->roleId <> '11' && $this->roleId <> '15' && $this->roleId <> '19' && $this->roleId <> '39' && $this->roleId <> '44' && $data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->registrationStatus == 'Recommended By Board Stage 3') {
                if ($this->roleId <> '7' && $this->roleId <> '11' && $this->roleId <> '15' && $this->roleId <> '19' && $this->roleId <> '39' && $this->roleId <> '44' && $data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->registrationStatus == 'Under Pricing') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->registrationStatus == 'Pricing Complete') {
                if ($this->roleId <> '7' && $this->roleId <> '11' && $this->roleId <> '15' && $this->roleId <> '19' && $this->roleId <> '39' && $this->roleId <> '44' && $data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->registrationStatus == 'Deferred and Closed') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->registrationStatus == 'Approved') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $seenBy = explode(",", $data['recordsEdit'][0]->seenBy);
            if (!(in_array($this->userId, $seenBy))) {
                $this->loginModel->seenByUpdate($id, $this->userId, $table);
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $this->db->select('BaseTbl.registrationStatus');
            $this->db->from('tbl_registration as BaseTbl');
            $this->db->where('BaseTbl.id', $id);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $registrationStatus = $row->registrationStatus;
                    if ($registrationStatus == 'Draft') {
                        $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);
                    } else {
                        $this->session->set_flashdata('error', 'Record cannot be deleted.');
                        $result = 0;
                    }
                }
            }

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $validationFailed = 0;
            // foreach ($data as $key => $value)
            // {
            //     if($key == 'remarks'){
            //         continue;
            //     }
            //     $this->form_validation->set_rules($key, ucwords(implode(' ', preg_split('/(?=[A-Z])/', $key))), ['required']);
            //     if($key == 'Something'){
            //         // Custom Rule
            //     }
            // }
            if ($this->form_validation->run() == FALSE) {
                $validationFailed = 1;
                $this->session->set_flashdata('error', validation_errors());
            }

            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }

            $this->db->select('BaseTbl.id, BaseTbl.companyId, Company.companyName');
            $this->db->from('tbls_user as BaseTbl');
            $this->db->join('tbls_company as Company', 'Company.id = BaseTbl.companyId', 'left');
            $this->db->where('BaseTbl.id', $this->userId);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    $companyId = $row->companyId;
                    $companyName = $row->companyName;
                }
            }

            // Registration Workflow Save START
            if ($this->roleId == '26') { // Company Submission
                if ($data['registrationStatus'] == 'Save') {
                    $data['registrationStatus'] = 'Draft';
                }
                unset($data['forwardedTo_detail101']);
                unset($data['remarks_detail101']);
                unset($data['sendQueryToCompany']);
            }
            // Registration Workflow Save END

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
            }

            //$resultq = $this->loginModel->recordAjaxSave(['licenseStatus' => 'Approved', 'companyId' => $this->companyId], 'tbl_license');
            //$data['masterId'] = $resultq;

            $result = $this->loginModel->recordAjaxSave($data, $table);

            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $validationFailed = 0;
            // foreach ($data as $key => $value)
            // {
            //     if($key == 'remarks'){
            //         continue;
            //     }
            //     $this->form_validation->set_rules($key, ucwords(implode(' ', preg_split('/(?=[A-Z])/', $key))), ['required']);
            //     if($key == 'Something'){
            //         // Custom Rule
            //     }
            // }
            if ($this->form_validation->run() == FALSE) {
                $validationFailed = 1;
                $this->session->set_flashdata('error', validation_errors());
            }

            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }

            // Registration Workflow Update START
            $this->db->select('BaseTbl.id, User.email, User.userName, BaseTbl.rniRefNo, BaseTbl.registrationNo, BaseTbl.inspectionRequired, BaseTbl.inspectionTypeId, Company.id as companyId, Company.companyUniqueNo, BaseTbl.registrationStatus');
            $this->db->from('tbl_registration as BaseTbl');
            $this->db->join('tbl_license as License', 'License.id = BaseTbl.masterId', 'left');
            $this->db->join('tbls_company as Company', 'Company.id = License.companyId', 'left');
            $this->db->join('tbls_user as User', 'User.companyId = Company.id', 'left');
            $this->db->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    $email = $row->email;
                    $userName = $row->userName;
                    $rniRefNo = $row->rniRefNo;
                    $registrationNo = $row->registrationNo;
                    $inspectionRequired = $row->inspectionRequired;
                    $inspectionTypeId = $row->inspectionTypeId;
                    $companyId = $row->companyId;
                    $companyUniqueNo = $row->companyUniqueNo;
                    $registrationStatus = $row->registrationStatus;
                }
            }

            if ($this->roleId <> '26') {
                if ($data['forwardedTo_detail101']) {
                    $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'Registration', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo_detail101'], 'remarks' => $data['remarks_detail101'], 'status' => $registrationStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_registrationhistory');
                    if ($data['sendQueryToCompany'] == '1') {
                        $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'dateTime' => date($this->dateTimeFormat), 'title' => 'Registration', 'type' => 'Registration', 'message' => $data['remarks_detail101'], 'userId' => $this->userId, 'authorization' => 'Granted', 'applicationStatus' => $registrationStatus, 'status' => 'Info Required From Company', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_query');
                    }
                }
            }
            unset($data['forwardedTo_detail101']);
            unset($data['remarks_detail101']);
            unset($data['sendQueryToCompany']);

            if ($this->roleId == '26') { // Company Submission
                if ($data['registrationStatus'] == 'Save') {
                    $data['registrationStatus'] = $registrationStatus;
                }
                if ($data['registrationStatus'] == 'Submit') {
                    $data['rniRefNo'] = $rniRefNo;
                    if ($rniRefNo == NULL) {
                        $data['rniRefNo'] = 'R-N-' . $id;
                    }
                    if ($registrationStatus == 'Draft') {
                        $data['registrationStatus'] = 'Submitted';
                        $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "Registration" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response From Applicant" as remarks, "Draft" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                        $this->db->from('tbl_registrationhistory as BaseTbl');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            //$this->session->set_flashdata('error', 'No record found.');
                            $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'Registration', 'userId' => $this->userId, 'forwardedTo' => 104, 'dateTime' => date($this->dateTimeFullFormat), 'remarks' => "Response From Applicant", 'status' => "Draft", 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_registrationhistory');

                            // ------------------- Send Alert Start -------------------
                            $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                            $this->db->from('tbl_registrationhistory as BaseTbl');
                            $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                            $this->db->where('BaseTbl.isDeleted', 0);
                            $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                            $this->db->limit(1);
                            $this->db->order_by('BaseTbl.id', 'desc');
                            $queryAlert = $this->db->get();
                            $countAlert = $queryAlert->num_rows();
                            if ($countAlert === 0) {
                                $this->session->set_flashdata('error', 'No record found.');
                            }
                            if ($countAlert > 0) {
                                foreach ($queryAlert->result() as $rowAlert) {
                                    $id = $rowAlert->id;
                                    $masterId = $rowAlert->masterId;
                                    $forwardedTo = $rowAlert->forwardedTo;
                                    $userName = $rowAlert->userName;
                                }
                            }

                            $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'registration/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                            // ------------------- Send Alert End -------------------
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationhistory');
                            }

                            // ------------------- Send Alert Start -------------------
                            $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                            $this->db->from('tbl_registrationhistory as BaseTbl');
                            $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                            $this->db->where('BaseTbl.isDeleted', 0);
                            $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                            $this->db->limit(1);
                            $this->db->order_by('BaseTbl.id', 'desc');
                            $queryAlert = $this->db->get();
                            $countAlert = $queryAlert->num_rows();
                            if ($countAlert === 0) {
                                $this->session->set_flashdata('error', 'No record found.');
                            }
                            if ($countAlert > 0) {
                                foreach ($queryAlert->result() as $rowAlert) {
                                    $id = $rowAlert->id;
                                    $masterId = $rowAlert->masterId;
                                    $forwardedTo = $rowAlert->forwardedTo;
                                    $userName = $rowAlert->userName;
                                }
                            }

                            $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'registration/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                            // ------------------- Send Alert End -------------------
                        }
                    }
                    if ($registrationStatus == 'Referred Back To Company (Editable)') {
                        $data['registrationStatus'] = 'Screening';
                    }
                    if ($registrationStatus == 'Referred Back To Company (Locked)') {
                        $data['registrationStatus'] = 'Under Review Stage 1';
                        $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "Registration" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response From Applicant" as remarks, "Referred Back To Company (Locked)" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                        $this->db->from('tbl_registrationhistory as BaseTbl');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationhistory');
                            }
                        }
                    }
                    if ($validationFailed == 1) {
                        //$data['registrationStatus'] = $registrationStatus;
                    }
                }
            } else if ($this->roleId == '7') { // Registration Director
                if ($data['registrationStatus'] == 'Save') {
                    $data['registrationStatus'] = $registrationStatus;
                }
                if ($data['registrationStatus'] == 'Deferred and Closed') {
                    $data['registrationStatus'] = 'Deferred and Closed';
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | Registration Rejected';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your registration application with ref. no " . $rniRefNo . " has been rejected. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = mailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }
                if ($data['registrationStatus'] == 'Proceed') {
                    $data['registrationStatus'] = $registrationStatus;
                }
                if ($data['registrationStatus'] == 'Approved') {
                    if ($registrationStatus == 'Pricing Complete') {
                        $data['registrationStatus'] = 'Approved';
                        $data['issueDateManual'] = date($this->dateTimeFormat);
                        $validTill1 = date_create(date('Y-m-d H:i', strtotime(date('Y-m-d') . ' +5 YEAR')));
                        $validTill1 = date_format($validTill1, $this->dateTimeFormat);
                        $data['validTill'] = $validTill1;
                        $data['registrationNo'] = 'R-N-' . $id;
                        $data['status'] = 'Active';
                        // ------------------- Send Mail Start -------------------
                        if (isset($email)) {
                            $mailData['from'] = 'DRAP';
                            $mailData['subject'] = 'PIRIMS | Registration Approved';
                            $mailData['title'] = 'Greetings, ' . $userName . '!';
                            $mailData['message'] = "Your registration application with ref. no " . $rniRefNo . " has been approved. In case of any query please write us at: support.pirims@dra.gov.pk";
                            $mailData['email'] = $email;
                            $sendStatus = mailSend($mailData);
                            if ($sendStatus == true) {
                                $result = 1;
                            }
                        }
                        if (!isset($email)) {
                            $result = 0;
                        }
                        // ------------------- Send Mail End -------------------
                    }
                }
            } else if ($this->roleId == '11') { // Registration Additional Director
                if ($data['registrationStatus'] == 'Save') {
                    $data['registrationStatus'] = $registrationStatus;
                }
            } else if ($this->roleId == '15') { // Registration Deputy Director
                if ($data['registrationStatus'] == 'Save') {
                    $data['registrationStatus'] = $registrationStatus;
                }
            } else if ($this->roleId == '19') { // Registration Assistant Director
                if ($data['registrationStatus'] == 'Save') {
                    $data['registrationStatus'] = $registrationStatus;
                }
                if ($data['registrationStatus'] == 'Referred Back To Company') {
                    if ($registrationStatus == 'Under Review Stage 1') {
                        $data['registrationStatus'] = 'Referred Back To Company (Locked)';
                        $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "Registration" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response Awaited From Applicant" as remarks, "Under Review Stage 1" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                        $this->db->from('tbl_registrationhistory as BaseTbl');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationhistory');
                            }
                        }
                    }
                }
                if ($data['registrationStatus'] == 'Proceed') {
                    if ($registrationStatus == 'Under Review Stage 1') {
                        $data['registrationStatus'] = 'Review Complete';
                    }
                    if ($registrationStatus == 'Review Complete') {
                        $data['registrationStatus'] = $registrationStatus;
                    }
                    if ($registrationStatus == 'Post Inspection Process') {
                        $data['registrationStatus'] = 'Under Board Stage 2';
                    }
                    if ($registrationStatus == 'Under Board Stage 2') {
                        $data['registrationStatus'] = 'Post Board Process';
                    }
                    if ($registrationStatus == 'Post Board Process') {
                        if ($data['inspectionRequired1'] == 'No') {
                            $data['registrationStatus'] = 'Recommended By Board Stage 3';
                        }
                        if ($data['inspectionRequired1'] == 'Yes') {
                            $data['registrationStatus'] = 'Under Inspection';
                            $data['discussInBoard'] = 0;
                            if ($data['inspectionTypeId1'] == 10) {
                                $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => $data['inspectionTypeId1'], 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            }
                            if ($data['inspectionTypeId1'] == 20) {
                                $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => $data['inspectionTypeId1'], 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            }
                            if ($data['inspectionTypeId1'] == 21) {
                                $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => $data['inspectionTypeId1'], 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            }
                        }
                    }
                    if ($registrationStatus == 'Recommended By Board Stage 3') {
                        $data['registrationStatus'] = 'Under Pricing';
                    }
                    if ($registrationStatus == 'Pricing Complete') {
                        $data['registrationStatus'] = $registrationStatus;
                    }
                }
            } else if ($this->roleId == '39') { // Registration Assigning Officer
                if ($data['registrationStatus'] == 'Save') {
                    $data['registrationStatus'] = $registrationStatus;
                }
                if ($data['registrationStatus'] == 'Proceed') {
                    $data['registrationStatus'] = $registrationStatus;
                    if ($registrationStatus == 'Received By DRAP') {
                        $data['registrationStatus'] = 'Under Review Stage 1';
                        // ------------------- Send Alert Start -------------------
                        $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                        $this->db->from('tbl_registrationhistory as BaseTbl');
                        $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $queryAlert = $this->db->get();
                        $countAlert = $queryAlert->num_rows();
                        if ($countAlert === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($countAlert > 0) {
                            foreach ($queryAlert->result() as $rowAlert) {
                                $id = $rowAlert->id;
                                $masterId = $rowAlert->masterId;
                                $forwardedTo = $rowAlert->forwardedTo;
                                $userName = $rowAlert->userName;
                            }
                        }

                        $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'registration/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                        // ------------------- Send Alert End -------------------
                    }
                    if ($registrationStatus == 'Screening') {
                        $data['registrationStatus'] = 'Under Review Stage 1';
                    }
                    if ($registrationStatus == 'Under Review Stage 1') {
                        $data['registrationStatus'] = $registrationStatus;
                        // ------------------- Send Alert Start -------------------
                        $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                        $this->db->from('tbl_registrationhistory as BaseTbl');
                        $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $queryAlert = $this->db->get();
                        $countAlert = $queryAlert->num_rows();
                        if ($countAlert === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($countAlert > 0) {
                            foreach ($queryAlert->result() as $rowAlert) {
                                $id = $rowAlert->id;
                                $masterId = $rowAlert->masterId;
                                $forwardedTo = $rowAlert->forwardedTo;
                                $userName = $rowAlert->userName;
                            }
                        }

                        $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'registration/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                        // ------------------- Send Alert End -------------------
                    }
                    if ($registrationStatus == 'Review Complete') {
                        $data['registrationStatus'] = $registrationStatus;
                        if ($data['inspectionRequired'] == 'No') {
                            $data['registrationStatus'] = 'Under Board Stage 2';
                            //$data['discussInBoard'] = 1;
                        }
                        if ($data['inspectionRequired'] == 'Yes') {
                            $data['registrationStatus'] = 'Under Inspection';
                            if ($data['inspectionTypeId'] == 10) {
                                $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => $data['inspectionTypeId'], 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            }
                            if ($data['inspectionTypeId'] == 20) {
                                $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => $data['inspectionTypeId'], 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            }
                            if ($data['inspectionTypeId'] == 21) {
                                $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => $data['inspectionTypeId'], 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            }
                        }
                    }

                    if ($registrationStatus == 'Post Inspection Process') {
                        $data['registrationStatus'] = $registrationStatus;
                    }
                    if ($registrationStatus == 'Under Board Stage 2') {
                        $data['registrationStatus'] = $registrationStatus;
                    }
                    if ($registrationStatus == 'Post Board Process') {
                        $data['registrationStatus'] = $registrationStatus;
                    }
                    if ($registrationStatus == 'Recommended By Board Stage 3') {
                        $data['registrationStatus'] = $registrationStatus;
                    }
                    if ($registrationStatus == 'Under Pricing') {
                        $data['registrationStatus'] = $registrationStatus;
                    }
                    if ($registrationStatus == 'Pricing Complete') {
                        $data['registrationStatus'] = $registrationStatus;
                    }
                }
            } else if ($this->roleId == '44') { // Registration Board Secretary
                if ($data['registrationStatus'] == 'Save') {
                    $data['registrationStatus'] = $registrationStatus;
                }
                if ($data['registrationStatus'] == 'Deferred and Closed') {
                    if ($registrationStatus == 'Under Board Stage 2') {
                        $data['registrationStatus'] = 'Deferred and Closed';
                    }
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | Registration Rejected';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your registration application with ref. no " . $rniRefNo . " has been rejected. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = mailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }
                if ($data['registrationStatus'] == 'Proceed') {
                    if ($registrationStatus == 'Under Board Stage 2') {
                        $data['registrationStatus'] = $registrationStatus;
                    }
                    if ($registrationStatus == 'Post Board Process') {
                        $data['registrationStatus'] = 'Recommended By Board Stage 3';
                    }
                    if ($registrationStatus == 'Pricing Complete') {
                        $data['registrationStatus'] = $registrationStatus;
                    }
                }
            } else if ($this->roleId == '45') { // Registration Pricing User

            } else if ($this->roleId == '51') { // Registration Screening Officer
                if ($data['registrationStatus'] == 'Save') {
                    $data['registrationStatus'] = $registrationStatus;
                }
                if ($data['registrationStatus'] == 'Referred Back To Company') {
                    if ($registrationStatus == 'Submitted') {
                        $data['registrationStatus'] = $registrationStatus;
                    }
                    if ($registrationStatus == 'Screening' || $registrationStatus == 'Under Review Stage 1') {
                        $data['registrationStatus'] = 'Referred Back To Company (Editable)';
                        $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "Registration" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response Awaited From Applicant" as remarks, "Under Review Stage 1" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                        $this->db->from('tbl_registrationhistory as BaseTbl');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationhistory');
                            }
                        }
                    }
                }
                if ($data['registrationStatus'] == 'Proceed') {
                    $data['registrationStatus'] = $registrationStatus;
                    if ($registrationStatus == 'Submitted') {
                        $data['registrationStatus'] = 'Screening';
                    }
                    if ($registrationStatus == 'Screening') {
                        $data['registrationStatus'] = 'Under R and I';
                    }
                }
            } else if ($this->roleId == '42') { // CEO

            } else {
                $data['registrationStatus'] = $registrationStatus;
            }
            // Registration Workflow Update END

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $companyUniqueNo, 'docs');
                }
            }

            $result = $this->loginModel->recordAjaxUpdate('id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), $data, $table);

            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }

            $sId = 0;
            $keys = array_keys($dataDetailTable);
            foreach (array_keys($dataDetailTable) as $key) {
                $current_key = current($keys);
                $current_value = $dataDetailTable[$current_key];
                $next_key = next($keys);
                $next_value = @$dataDetailTable[$next_key];
                $tableName = substr($current_key, 0, strpos($current_key, '-'));
                $nextTableName = substr($next_key, 0, strpos($next_key, '-'));
                if ($tableName == 'tabledetailproposedbrandname') {
                    $tableDetail = 'tbl_registrationproposedname';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailinn') {
                    $tableDetail = 'tbl_registrationinn';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailproposedpacking') {
                    $tableDetail = 'tbl_registrationproposedprice';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetaildomesticreference') {
                    $tableDetail = 'tbl_registrationdomesticreference';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailinternationalreference') {
                    $tableDetail = 'tbl_registrationinternationalreference';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                /*if ($tableName == 'tabledetailmeeting') {
                    $tableDetail = 'tbl_registrationmeeting';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }*/
                $sId++;
            }

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else {
            $this->accessDenied();
            return;
        }
    }

    function registrationrenewal($action = NULL, $id = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $myAction = '';
        if ($action == 'submit') {
            if (explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            }
            if (explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            }
            if ($myAction == 'add') {
                $myAction = 'save';
            }
            if ($myAction == 'edit') {
                $myAction = 'update';
            }
        }

        //---------- STAGES ---------
        // * Draft
        // * Submitted
        // * Under Review Stage 1
        // * Review Complete
        // * Under Inspection
        // * Post Inspection Process
        // * Under Board Stage 1 // Send to Secretary to add in meeting
        // * Under Board Stage 2
        // * Post Board Process
        // * Referred Back To Company (Editable)
        // * Referred Back To Company (Locked)
        // * Recommended By Board Stage 3
        // * Deferred and Closed
        // * Approved
        //---------- STAGES ---------

        $table = 'tbl_registration';
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        $data['records'] = $this->myModel->$functionName($table, $searchText);
        $data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);
        $data['recordsDetailProposedName'] = $this->myModel->applyregistrationDetailProposedNameEdit($id);
        $data['recordsDetailINN'] = $this->myModel->applyregistrationDetailINNEdit($id);
        $data['recordsDetailProposedPacking'] = $this->myModel->applyregistrationDetailProposedPackingEdit($id);
        $data['recordsDetailOtherManufacturer'] = $this->myModel->applyregistrationOtherManufacturerEdit($id);

        $data['recordsDetailDomesticReference'] = $this->myModel->applyregistrationDetailDomesticReferenceEdit($id);
        $data['recordsDetailInternationalReference'] = $this->myModel->applyregistrationDetailInternationalReferenceEdit($id);
        $data['recordsDetailQuery'] = $this->myModel->registrationrenewalDetailQueryEdit($id);
        $data['registrationType'] = $this->myModel->registrationTypeGet();
        $data['pharmacopeia'] = $this->myModel->pharmacopeiaGet();
        $data['atcCode'] = $this->myModel->atcCodeGet();
        $data['innCode'] = $this->myModel->innCodeGet();
        $data['productOrigin'] = $this->myModel->productOriginGet();
        $data['productCategory'] = $this->myModel->productCategoryGet();
        $data['usedFor'] = $this->myModel->usedForGet();
        $data['dosageForm'] = $this->myModel->dosageFormGet();

        $data['basicDose'] = $this->myModel->basicDoseGet();
        $data['pharmaDose'] = $this->myModel->pharmaDoseGet();
        $data['combinedPharmaDose'] = $this->myModel->combinedPharmaDoseGet();
        $data['releaseCharacteristics'] = $this->myModel->releaseCharacteristicsGet();
        $data['transformation'] = $this->myModel->transformationGet();
        $data['adminMethod'] = $this->myModel->adminMethodGet();
        $data['intendedSite'] = $this->myModel->intendedSiteGet();
        $data['presentationUnit'] = $this->myModel->presentationUnitGet();
        $data['packagingCategory'] = $this->myModel->packagingCategoryGet();
        $data['routeOfAdmin'] = $this->myModel->routeOfAdminGet();
        $data['unit'] = $this->myModel->unitGet();
        $data['labelClaim'] = $this->myModel->labelClaimGet();

        $data['regulatoryBody'] = $this->myModel->regulatoryBodyGet();
        $data['priorityReason'] = $this->myModel->registrationPriorityReasonGet();
        $data['inspectionType'] = $this->myModel->inspectionTypeRegistrationGet();
        //$data['licenses'] = $this->myModel->licensesGet1(@$data['recordsEdit'][0]->companyId);
        $data['licenseApproved1'] = $this->myModel->licenseApprovedGet($this->companyId);
        $data['licenseRecord'] = $this->myModel->companyApprovedLicenseGet(@$data['recordsEdit'][0]->companyUniqueNo);

        $data['registrationApproved1'] = $this->myModel->registrationApprovedGet($this->companyUniqueNo);
        $data['registrationApproved2'] = $this->myModel->registrationApprovedGet2(@$data['recordsEdit'][0]->companyUniqueNo);
        $data['allApprovedLicenses'] = $this->myModel->allApprovedLicensesGet();
        $data['licenseApproved'] = $this->myModel->licenseApprovedGet(@$data['recordsEdit'][0]->companyId);
        $data['sectionApproved'] = $this->myModel->sectionApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['pharmaGroupApproved'] = $this->myModel->pharmaGroupApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['usedForApproved'] = $this->myModel->usedForApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['licenseSectionApproved'] = $this->myModel->licenseSectionApprovedGet($id);
        $data['historyDesignation'] = $this->myModel->registrationDesignationGet();
        $data['recordsDetailMeeting'] = $this->myModel->registrationDetailMeetingEdit($id);
        $data['recordsDetailHistory'] = $this->myModel->registrationDetailHistoryEdit($id);

        if ($action == 'lookup' && $recordLookup == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $seenBy = explode(",", $data['recordsEdit'][0]->seenBy);
            if (!(in_array($this->userId, $seenBy))) {
                $this->loginModel->seenByUpdate($id, $this->userId, $table);
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Draft') {
                if ($this->roleId <> '26' && $data['recordsEdit'][0]->companyUniqueNo <> $this->companyUniqueNo) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Referred Back To Company (Editable)') {
                if ($this->roleId <> '26' && $data['records'][0]->companyUniqueNo <> $this->companyUniqueNo) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Referred Back To Company (Locked)') {
                //if($this->roleId <> '26' && $data['records'][0]->companyUniqueNo <> $this->companyUniqueNo){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
                //}
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Submitted') {
                if ($this->roleId <> '54') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }

            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Screening') {
                if ($this->roleId <> '39') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Under R and I') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Received By DRAP') {
                if ($this->roleId <> '39') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Under Review Stage 1') {
                if ($this->roleId <> '7' && $this->roleId <> '11' && $this->roleId <> '15' && $this->roleId <> '19' && $this->roleId <> '39' && $this->roleId <> '44' && $data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Review Complete') {
                if ($this->roleId <> '39') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Under Inspection') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Post Inspection Process') {
                if ($this->roleId <> '7' && $this->roleId <> '11' && $this->roleId <> '15' && $this->roleId <> '19' && $this->roleId <> '39' && $this->roleId <> '44' && $data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Under Board Stage 1') {
                if ( $this->roleId <> '44') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Under Board Stage 2') {
                if ($this->roleId <> '7' && $this->roleId <> '11' && $this->roleId <> '15' && $this->roleId <> '19' && $this->roleId <> '39' && $this->roleId <> '44' && $data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Post Board Process') {
                if ($this->roleId <> '7' && $this->roleId <> '11' && $this->roleId <> '15' && $this->roleId <> '19' && $this->roleId <> '39' && $this->roleId <> '44' && $data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Recommended By Board Stage 3') {
                if ($this->roleId <> '7') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Under Pricing') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Pricing Complete') {
                if ($this->roleId <> '7' && $this->roleId <> '11' && $this->roleId <> '15' && $this->roleId <> '19' && $this->roleId <> '39' && $this->roleId <> '44' && $data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Deferred and Closed') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->renewalStatus == 'Approved') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $seenBy = explode(",", $data['recordsEdit'][0]->seenBy);
            if (!(in_array($this->userId, $seenBy))) {
                $this->loginModel->seenByUpdate($id, $this->userId, $table);
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $this->db->select('BaseTbl.renewalStatus');
            $this->db->from('tbl_registration as BaseTbl');
            $this->db->where('BaseTbl.id', $id);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $renewalStatus = $row->renewalStatus;
                    if ($renewalStatus == 'Draft') {
                        $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);
                        $this->db->select('BaseTbl.id');
                        $this->db->from('tbl_challan as BaseTbl');
                        $this->db->where('BaseTbl.masterId', $id);
                        $query2 = $this->db->get();
                        $count2 = $query2->num_rows();
                        if ($count2 > 0) {
                            $this->loginModel->recordAjaxUpdate('masterId', $id, $data, 'tbl_challan');
                        }
                    } else {
                        $this->session->set_flashdata('error', 'Record cannot be deleted.');
                        $result = 0;
                    }
                }
            }


            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $validationFailed = 0;

            if ($this->form_validation->run() == FALSE) {
                $validationFailed = 1;
                $this->session->set_flashdata('error', validation_errors());
            }

            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $data['isunderprocess'] = 1;
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }

            $this->db->select('BaseTbl.id, BaseTbl.companyId, Company.companyName');
            $this->db->from('tbls_user as BaseTbl');
            $this->db->join('tbls_company as Company', 'Company.id = BaseTbl.companyId', 'left');
            $this->db->where('BaseTbl.id', $this->userId);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    $companyId = $row->companyId;
                    $companyName = $row->companyName;

                }
            }

            $this->db->select('BaseTbl.*');
            $this->db->from('tbl_registration as BaseTbl');
            $this->db->where('BaseTbl.id', $data['parentId']);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {

                    $id = $row->id;
                    $masterId = $row->masterId;
                    $companyAccountId = $this->companyUniqueNo;
                    $registrationTypeId = $row->registrationTypeId;
                    $productOriginId = $row->productOriginId;
                    $productCategoryId = $row->productCategoryId;
                    $usedForId = $row->usedForId;
                    $pharmacopeiaId = $row->pharmacopeiaId;

                    $routeOfAdminId = $row->routeOfAdminId;
                    $refUnit = $row->refUnit;
                    $shelfLife = $row->shelfLife;
                    $regFileNo = $row->regFileNo;
                    $isPublic = $row->isPublic;
                    $isCompany = $row->isCompany;
                    $regTypeId = $row->regTypeId;
                    $dealingsection = $row->dealingsection;
                    $meetingNo = $row->meetingNo;
                    $shelfLifeUnit = $row->shelfLifeUnit;
                    $productStatus = $row->productStatus;

                    $registrationNo = $row->registrationNo;
                    $dosageFormId = $row->dosageFormId;
                    $strength = $row->strength;
                    $unit = $row->unit;
                    $labelClaim = $row->labelClaim;
                    $approvedName = $row->approvedName;
                    $issueDateManual = $row->issueDateManual;
                    $validTill = $row->validTill;
                    $lastRenewalDateManual = $row->lastRenewalDateManual;
                }
            }

            // Registration Renewal Workflow Save START
            if ($this->roleId == '26') { // Company Submission
                if ($data['renewalStatus'] == 'Save') {
                    $data['renewalStatus'] = 'Draft';

                    if ($registrationTypeId == 1) {
                        $data['registrationTypeId'] = 6;
                    }
                    if ($registrationTypeId == 2) {
                        $data['registrationTypeId'] = 7;
                    }
                    $data['masterId'] = $masterId;
                    $data['companyAccountId'] = $companyAccountId;
                    $data['productOriginId'] = $productOriginId;
                    $data['productCategoryId'] = $productCategoryId;
                    $data['usedForId'] = $usedForId;
                    $data['pharmacopeiaId'] = $pharmacopeiaId;
                    $data['routeOfAdminId'] = $routeOfAdminId;
                    $data['refUnit'] = $refUnit;
                    $data['shelfLife'] = $shelfLife;
                    //$data['regFileNo'] = $regFileNo;
                    $data['isPublic'] = $isPublic;
                    $data['isCompany'] = $isCompany;
                    $data['regTypeId'] = $regTypeId;
                    //$data['dealingsection'] = $dealingsection;
                    //$data['meetingNo'] = $meetingNo;
                    $data['shelfLifeUnit'] = $shelfLifeUnit;
                    $data['productStatus'] = $productStatus;


                    $data['registrationNo'] = $registrationNo;
                    $data['dosageFormId'] = $dosageFormId;
                    $data['strength'] = $strength;
                    $data['unit'] = $unit;
                    $data['labelClaim'] = $labelClaim;
                    $data['approvedName'] = $approvedName;
                    $data['issueDateManual'] = $issueDateManual;
                    $data['validTill'] = $validTill;
                    $data['lastRenewalDateManual'] = $lastRenewalDateManual;
                }
                unset($data['forwardedTo_detail101']);
                unset($data['remarks_detail101']);
                unset($data['sendQueryToCompany']);
            }
            // Registration Renewal Workflow Save END

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
            }

            $result = $this->loginModel->recordAjaxSave($data, $table);

            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }

            //Insert Record Of other tables related to product registration
            //  Composition (INN)
            $this->db->select('"' . $result . '" as masterId, BaseTbl.innManual, BaseTbl.strength, BaseTbl.operator, BaseTbl.unitId, BaseTbl.status, BaseTbl.createdby as createdby, "' . $data['createddate'] . '" as createddate', false);
            $this->db->from('tbl_registrationinn as BaseTbl');
            $this->db->where('BaseTbl.isDeleted', 0);
            $this->db->where('BaseTbl.masterId', $id);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationinn');
                }
            }

            // Proposed Price
            $this->db->select('"' . $result . '" as masterId, BaseTbl.packSize, BaseTbl.approvedPrice, BaseTbl.pricingType, BaseTbl.createdby as createdby, "' . $data['createddate'] . '" as createddate', false);
            $this->db->from('tbl_registrationproposedprice as BaseTbl');
            $this->db->where('BaseTbl.isDeleted', 0);
            $this->db->where('BaseTbl.masterId', $id);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationproposedprice');
                }
            }

            //Other Manufacturer
            $this->db->select('"' . $result . '" as masterId, BaseTbl.companyName, BaseTbl.role, BaseTbl.companyAddress, BaseTbl.companyCountry, BaseTbl.createdby as createdby, "' . $data['createddate'] . '" as createddate', false);
            $this->db->from('tbl_registrationothermanufacturer as BaseTbl');
            $this->db->where('BaseTbl.isDeleted', 0);
            $this->db->where('BaseTbl.masterId', $id);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationothermanufacturer');
                }
            }

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();

            if (!$data) {
                $this->accessDenied();
                return;
            }


            $validationFailed = 0;

            if ($this->form_validation->run() == FALSE) {
                $validationFailed = 1;
                $this->session->set_flashdata('error', validation_errors());
            }

            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }

            // Registration Renewal Workflow Update START
            $this->db->select('BaseTbl.id,BaseTbl.parentId, User.email, User.userName, BaseTbl.rniRefNo, BaseTbl.registrationNo, BaseTbl.inspectionRequired, BaseTbl.inspectionTypeId, Company.id as companyId, Company.companyUniqueNo, BaseTbl.renewalStatus');
            $this->db->from('tbl_registration as BaseTbl');
            $this->db->join('tbl_license as License', 'License.id = BaseTbl.masterId', 'left');
            $this->db->join('tbls_company as Company', 'Company.id = License.companyId', 'left');
            $this->db->join('tbls_user as User', 'User.companyId = Company.id', 'left');
            $this->db->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    $parentId = $row->parentId;
                    $email = $row->email;
                    $userName = $row->userName;
                    $rniRefNo = $row->rniRefNo;
                    $registrationNo = $row->registrationNo;
                    $inspectionRequired = $row->inspectionRequired;
                    $inspectionTypeId = $row->inspectionTypeId;
                    $companyId = $row->companyId;
                    $companyUniqueNo = $row->companyUniqueNo;
                    $renewalStatus = $row->renewalStatus;
                }
            }

            if ($this->roleId <> '26' && $data['renewalStatus'] <> 'Save') {
                if ($data['forwardedTo_detail101']) {
                    $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'Registration Renewal', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo_detail101'], 'remarks' => $data['remarks_detail101'], 'status' => $renewalStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_registrationhistory');
                    if ($data['sendQueryToCompany'] == '1') {
                        $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'dateTime' => date($this->dateTimeFormat), 'title' => 'Registration Renewal', 'type' => 'Registration Renewal', 'message' => $data['remarks_detail101'], 'shortcomming' => $data['reviewer1Remarks'], 'userId' => $this->userId, 'authorization' => 'Granted', 'applicationStatus' => $renewalStatus, 'status' => 'Info Required From Company', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_query');
                    }
                }
            }
            unset($data['forwardedTo_detail101']);
            unset($data['remarks_detail101']);
            unset($data['sendQueryToCompany']);
            unset($data['parentId']);

            if ($this->roleId == '26') { // Company Submission

                // Save Challan Data
                // check if already challan is added
                $this->db->select('BaseTbl.*');
                $this->db->from('tbl_challan as BaseTbl');
                $this->db->where('BaseTbl.isDeleted', 0);
                $this->db->where('BaseTbl.masterId', $id);
                $query = $this->db->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->loginModel->recordAjaxSave(['masterId' => $id,
                        'challan_no' => $data['challan_no'],
                        'usedfor' => 'Registration',
                        'challan_fee' => $data['challan_fee'],
                        'challan_status' => $data['challan_status'],
                        'challan_msg' => $data['challan_msg'],
                        'challan_account_id' => $data['challan_account_id'],
                        'challan_account_title' => $data['challan_account_title'],
                        'challan_date' => $data['challan_date'],
                        'status' => $data['challan_status'],
                        'createdby' => $data['updatedby'],
                        'createddate' => $data['updateddate']
                    ], 'tbl_challan');

                }
                unset($data['challan_no']);
                unset($data['challan_fee']);
                unset($data['challan_status']);
                unset($data['challan_msg']);
                unset($data['challan_account_id']);
                unset($data['challan_account_title']);
                unset($data['challan_date']);


                if ($data['renewalStatus'] == 'Save') {
                    $data['renewalStatus'] = $renewalStatus;
                }
                if ($data['renewalStatus'] == 'Submit') {
                    $data['rniRefNo'] = $rniRefNo;
                    if ($rniRefNo == NULL) {
                        $data['rniRefNo'] = 'R-R-' . $id;
                    }
                    if ($renewalStatus == 'Draft') {
                        $data['submissionDate'] = date($this->dateTimeFormat);
                        $data['renewalStatus'] = 'Submitted';
                        $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "Registration Renewal" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response From Applicant" as remarks, "Draft" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                        $this->db->from('tbl_registrationhistory as BaseTbl');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            //$this->session->set_flashdata('error', 'No record found.');
                            //$resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'Registration Renewal', 'userId' => $this->userId, 'forwardedTo' => 104, 'dateTime' => date($this->dateTimeFullFormat), 'remarks' => "Response From Applicant", 'status' => "Draft", 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_registrationhistory');
                            $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'Registration Renewal', 'userId' => $this->userId, 'forwardedTo' => 1396, 'dateTime' => date($this->dateTimeFullFormat), 'remarks' => "Response From Applicant", 'status' => "Draft", 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_registrationhistory');

                            // ------------------- Send Alert Start -------------------
                            $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                            $this->db->from('tbl_registrationhistory as BaseTbl');
                            $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                            $this->db->where('BaseTbl.isDeleted', 0);
                            $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                            $this->db->limit(1);
                            $this->db->order_by('BaseTbl.id', 'desc');
                            $queryAlert = $this->db->get();
                            $countAlert = $queryAlert->num_rows();
                            if ($countAlert === 0) {
                                $this->session->set_flashdata('error', 'No record found.');
                            }
                            if ($countAlert > 0) {
                                foreach ($queryAlert->result() as $rowAlert) {
                                    $id = $rowAlert->id;
                                    $masterId = $rowAlert->masterId;
                                    $forwardedTo = $rowAlert->forwardedTo;
                                    $userName = $rowAlert->userName;
                                }
                            }

                            $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'registration/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                            // ------------------- Send Alert End -------------------
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationhistory');
                            }

                            // ------------------- Send Alert Start -------------------
                            $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                            $this->db->from('tbl_registrationhistory as BaseTbl');
                            $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                            $this->db->where('BaseTbl.isDeleted', 0);
                            $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                            $this->db->limit(1);
                            $this->db->order_by('BaseTbl.id', 'desc');
                            $queryAlert = $this->db->get();
                            $countAlert = $queryAlert->num_rows();
                            if ($countAlert === 0) {
                                $this->session->set_flashdata('error', 'No record found.');
                            }
                            if ($countAlert > 0) {
                                foreach ($queryAlert->result() as $rowAlert) {
                                    $id = $rowAlert->id;
                                    $masterId = $rowAlert->masterId;
                                    $forwardedTo = $rowAlert->forwardedTo;
                                    $userName = $rowAlert->userName;
                                }
                            }

                            $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'registration/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                            // ------------------- Send Alert End -------------------
                        }
                    }
                    if ($renewalStatus == 'Referred Back To Company (Editable)') {
                        $data['renewalStatus'] = 'Screening';
                    }
                    if ($renewalStatus == 'Referred Back To Company (Locked)') {
                        $data['renewalStatus'] = 'Under Review Stage 1';
                        $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "Registration Renewal" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response From Applicant" as remarks, "Referred Back To Company (Locked)" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                        $this->db->from('tbl_registrationhistory as BaseTbl');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationhistory');
                            }
                        }
                    }
                    if ($validationFailed == 1) {
                        //$data['renewalStatus'] = $renewalStatus;
                    }
                }
            }
            else if ($this->roleId == '7') { // Registration Director
                if ($data['renewalStatus'] == 'Save'  || $data['renewalStatus'] == 'forward') {
                    $data['renewalStatus'] = $renewalStatus;
                }
                if ($data['renewalStatus'] == 'Deferred and Closed') {
                    $data['renewalStatus'] = 'Deferred and Closed';
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | Registration Renewal Rejected';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your registration renewal application with ref. no " . $rniRefNo . " has been rejected. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = mailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }
                if ($data['renewalStatus'] == 'Proceed') {
                    $data['renewalStatus'] = $renewalStatus;
                }
                if ($data['renewalStatus'] == 'Approved') {
                    $data['renewalStatus'] = 'Approved';
                    $data['issueDateManual'] = date($this->dateTimeFormat);
                    $validTill1 = date_create(date('Y-m-d H:i', strtotime(date('Y-m-d') . ' +5 YEAR')));
                    $validTill1 = date_format($validTill1, $this->dateTimeFormat);
                    $data['validTill'] = $validTill1;
                    $data['registrationNo'] = 'R-R-' . $id;
                    $data['status'] = 'Active';
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | Registration Renewal Approved';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your registration renewal application with ref. no " . $rniRefNo . " has been approved. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = emailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------

                }
            }
            else if ($this->roleId == '11') { // Registration Additional Director
                if ($data['renewalStatus'] == 'Save'  || $data['renewalStatus'] == 'forward') {
                    $data['renewalStatus'] = $renewalStatus;
                }
                if ($data['renewalStatus'] == 'Proceed') {
                    $data['renewalStatus'] = $renewalStatus;
                }

            }
            else if ($this->roleId == '15') { // Registration Deputy Director
                if ($data['renewalStatus'] == 'Save') {
                    $data['renewalStatus'] = $renewalStatus;
                }
            }
            else if ($this->roleId == '54') { // Registration Deputy Director Renewal
                if ($data['renewalStatus'] == 'Save' || $data['renewalStatus'] == 'forward') {
                    $data['renewalStatus'] = $renewalStatus;
                }
                if ($data['renewalStatus'] == 'forwardBoard') {
                    $data['renewalStatus'] = 'Under Board Stage 1';
                }
                if ($data['renewalStatus'] == 'Proceed') {
                    if ($renewalStatus == 'Submitted') {
                        $data['renewalStatus'] = 'Under Review Stage 1';
                    }
                    if ($renewalStatus == 'Under Review Stage 1') {
                        $data['renewalStatus'] = 'Review Complete';
                    }
                    if ($renewalStatus == 'Review Complete') {
                        $data['renewalStatus'] = $renewalStatus;
                    }
                    if ($renewalStatus == 'Post Inspection Process') {
                        $data['renewalStatus'] = 'Under Board Stage 2';
                    }
                    if ($renewalStatus == 'Under Board Stage 2') {
                        $data['renewalStatus'] = 'Recommended By Board Stage 3';
                    }
                    if ($renewalStatus == 'Post Board Process') {
                        if ($data['inspectionRequired1'] == 'No') {
                            $data['renewalStatus'] = 'Recommended By Board Stage 3';
                        }
                        if ($data['inspectionRequired1'] == 'Yes') {
                            $data['renewalStatus'] = 'Under Inspection';
                            $data['discussInBoard'] = 0;
                            if ($data['inspectionTypeId1'] == 10) {
                                $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => $data['inspectionTypeId1'], 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            }
                            if ($data['inspectionTypeId1'] == 20) {
                                $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => $data['inspectionTypeId1'], 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            }
                            if ($data['inspectionTypeId1'] == 21) {
                                $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => $data['inspectionTypeId1'], 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            }
                        }
                    }
                    if ($renewalStatus == 'Recommended By Board Stage 3') {
                        $data['renewalStatus'] = $renewalStatus;
                    }
                    if ($renewalStatus == 'Pricing Complete') {
                        $data['renewalStatus'] = $renewalStatus;
                    }
                }

                if ($data['renewalStatus'] == 'Referred Back To Company') {
                    if ($renewalStatus == 'Under Review Stage 1') {
                        $data['renewalStatus'] = 'Referred Back To Company (Locked)';
                        $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "Registration Renewal" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response Awaited From Applicant" as remarks, "Under Review Stage 1" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                        $this->db->from('tbl_registrationhistory as BaseTbl');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationhistory');
                            }
                        }
                    }
                }

                if ($data['renewalStatus'] == 'Deferred and Closed') {
                    $data['renewalStatus'] = 'Deferred and Closed';
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | Registration Renewal Rejected';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your registration renewal application with ref. no " . $rniRefNo . " has been rejected. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = mailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }
                if ($data['renewalStatus'] == 'Approved') {
                    $data['renewalStatus'] = 'Approved';
                    $data['lastRenewalDateManual'] = date($this->dateTimeFormat);
                    $validTill1 = date_create(date('Y-m-d H:i', strtotime(date('Y-m-d') . ' +5 YEAR')));
                    $validTill1 = date('Y-m-d H:i', strtotime('-1 day', strtotime($validTill1)));
                    $validTill1 = date_format($validTill1, $this->dateTimeFormat);
                    $data['validTill'] = $validTill1;
                    $data['registrationNo'] = 'R-R-' . $registrationNo;
                    $data['status'] = 'Active';
                    $data['isunderprocess'] = 0;
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | Registration Renewal Approved';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your registration renewal application with ref. no " . $rniRefNo . " has been approved. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        //$sendStatus = emailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    $markdelete = $this->loginModel->recordAjaxUpdate('id', $parentId, ['isDeleted' => '1', 'updatedby' => $this->userId, 'updateddate' => date($this->dateTimeFormat)], 'tbl_registration');
                    // ------------------- Send Mail End -------------------
                }
            }
            else if ($this->roleId == '19') { // Registration Assistant Director
                if ($data['renewalStatus'] == 'Save' || $data['renewalStatus'] == 'forward') {
                    $data['renewalStatus'] = $renewalStatus;
                }
                if ($data['renewalStatus'] == 'Referred Back To Company') {
                    if ($renewalStatus == 'Under Review Stage 1') {
                        $data['renewalStatus'] = 'Referred Back To Company (Locked)';
                        $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "Registration Renewal" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response Awaited From Applicant" as remarks, "Under Review Stage 1" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                        $this->db->from('tbl_registrationhistory as BaseTbl');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationhistory');
                            }
                        }
                    }
                }
                if ($data['renewalStatus'] == 'forwardBoard') {
                    $data['renewalStatus'] = 'Under Board Stage 1';
                }
                if ($data['renewalStatus'] == 'Proceed') {
                    if ($renewalStatus == 'Under Review Stage 1') {
                        $data['renewalStatus'] = 'Review Complete';
                    }
                    if ($renewalStatus == 'Review Complete') {
                        $data['renewalStatus'] = $renewalStatus;
                    }
                    if ($renewalStatus == 'Post Inspection Process') {
                        $data['renewalStatus'] = 'Under Board Stage 2';
                    }
                    if ($renewalStatus == 'Under Board Stage 2') {
                        $data['renewalStatus'] = 'Recommended By Board Stage 3';
                    }
                    if ($renewalStatus == 'Post Board Process') {
                        if ($data['inspectionRequired1'] == 'No') {
                            $data['renewalStatus'] = 'Recommended By Board Stage 3';
                        }
                        if ($data['inspectionRequired1'] == 'Yes') {
                            $data['renewalStatus'] = 'Under Inspection';
                            $data['discussInBoard'] = 0;
                            if ($data['inspectionTypeId1'] == 10) {
                                $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => $data['inspectionTypeId1'], 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            }
                            if ($data['inspectionTypeId1'] == 20) {
                                $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => $data['inspectionTypeId1'], 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            }
                            if ($data['inspectionTypeId1'] == 21) {
                                $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => $data['inspectionTypeId1'], 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            }
                        }
                    }
                    if ($renewalStatus == 'Recommended By Board Stage 3') {
                        $data['renewalStatus'] = $renewalStatus;
                    }
                    if ($renewalStatus == 'Pricing Complete') {
                        $data['renewalStatus'] = $renewalStatus;
                    }
                }
            }
            else if ($this->roleId == '39') { // Registration Assigning Officer
                if ($data['renewalStatus'] == 'Save') {
                    $data['renewalStatus'] = $renewalStatus;
                }
                if ($data['renewalStatus'] == 'Proceed') {
                    $data['renewalStatus'] = $renewalStatus;
                    if ($renewalStatus == 'Submitted') {
                        $data['renewalStatus'] = 'Under Review Stage 1';
                        // ------------------- Send Alert Start -------------------
                        $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                        $this->db->from('tbl_registrationhistory as BaseTbl');
                        $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $queryAlert = $this->db->get();
                        $countAlert = $queryAlert->num_rows();
                        if ($countAlert === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($countAlert > 0) {
                            foreach ($queryAlert->result() as $rowAlert) {
                                $id = $rowAlert->id;
                                $masterId = $rowAlert->masterId;
                                $forwardedTo = $rowAlert->forwardedTo;
                                $userName = $rowAlert->userName;
                            }
                        }

                        $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'registration/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                        // ------------------- Send Alert End -------------------
                    }
                    if ($renewalStatus == 'Under Review Stage 1') {
                        $data['renewalStatus'] = $renewalStatus;
                        // ------------------- Send Alert Start -------------------
                        $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                        $this->db->from('tbl_registrationhistory as BaseTbl');
                        $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $queryAlert = $this->db->get();
                        $countAlert = $queryAlert->num_rows();
                        if ($countAlert === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($countAlert > 0) {
                            foreach ($queryAlert->result() as $rowAlert) {
                                $id = $rowAlert->id;
                                $masterId = $rowAlert->masterId;
                                $forwardedTo = $rowAlert->forwardedTo;
                                $userName = $rowAlert->userName;
                            }
                        }

                        $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'registration/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                        // ------------------- Send Alert End -------------------
                    }
                    if ($renewalStatus == 'Review Complete') {
                        $data['renewalStatus'] = $renewalStatus;
                        if ($data['inspectionRequired'] == 'No') {
                            $data['renewalStatus'] = 'Under Board Stage 2';
                            //$data['discussInBoard'] = 1;
                        }
                        if ($data['inspectionRequired'] == 'Yes') {
                            $data['renewalStatus'] = 'Under Inspection';
                            if ($data['inspectionTypeId'] == 10) {
                                $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => $data['inspectionTypeId'], 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            }
                            if ($data['inspectionTypeId'] == 20) {
                                $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => $data['inspectionTypeId'], 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            }
                            if ($data['inspectionTypeId'] == 21) {
                                $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => $data['inspectionTypeId'], 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            }
                        }
                    }
                    if ($renewalStatus == 'Post Inspection Process') {
                        $data['renewalStatus'] = $renewalStatus;
                    }
                    if ($renewalStatus == 'Under Board Stage 2') {
                        $data['renewalStatus'] = $renewalStatus;
                    }
                    if ($renewalStatus == 'Post Board Process') {
                        $data['renewalStatus'] = $renewalStatus;
                    }
                    if ($renewalStatus == 'Recommended By Board Stage 3') {
                        $data['renewalStatus'] = $renewalStatus;
                    }
                    if ($renewalStatus == 'Under Pricing') {
                        $data['renewalStatus'] = $renewalStatus;
                    }
                    if ($renewalStatus == 'Pricing Complete') {
                        $data['renewalStatus'] = $renewalStatus;
                    }
                }
            }
            else if ($this->roleId == '44') { // Registration Board Secretary
                if ($data['renewalStatus'] == 'Save') {
                    $data['renewalStatus'] = $renewalStatus;
                }
                if ($data['renewalStatus'] == 'Deferred and Closed') {
                    if ($renewalStatus == 'Under Board Stage 2') {
                        $data['renewalStatus'] = 'Deferred and Closed';
                    }
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | Registration Renewal Rejected';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your registration renewal application with ref. no " . $rniRefNo . " has been rejected. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = mailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }
                if ($data['renewalStatus'] == 'Proceed') {
                    if ($renewalStatus == 'Under Board Stage 2') {
                        $data['renewalStatus'] = $renewalStatus;
                    }
                    if ($renewalStatus == 'Post Board Process') {
                        $data['renewalStatus'] = 'Recommended By Board Stage 3';
                    }
                    if ($renewalStatus == 'Pricing Complete') {
                        $data['renewalStatus'] = $renewalStatus;
                    }
                }
            }
            else if ($this->roleId == '45') { // Registration Pricing User

            }
            else if ($this->roleId == '51') { // Registration Screening Officer
                if ($data['renewalStatus'] == 'Save') {
                    $data['renewalStatus'] = $renewalStatus;
                }
                if ($data['renewalStatus'] == 'Referred Back To Company') {
                    if ($renewalStatus == 'Submitted') {
                        $data['renewalStatus'] = $renewalStatus;
                    }
                    if ($renewalStatus == 'Screening' || $renewalStatus == 'Under Review Stage 1') {
                        $data['renewalStatus'] = 'Referred Back To Company (Editable)';
                        $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "Registration" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response Awaited From Applicant" as remarks, "Under Review Stage 1" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                        $this->db->from('tbl_registrationhistory as BaseTbl');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationhistory');
                            }
                        }
                    }
                }
                if ($data['renewalStatus'] == 'Proceed') {
                    $data['renewalStatus'] = $renewalStatus;
                    if ($renewalStatus == 'Submitted') {
                        $data['renewalStatus'] = 'Screening';
                    }
                    if ($renewalStatus == 'Screening') {
                        $data['renewalStatus'] = 'Under R and I';
                    }
                }
            }
            else if ($this->roleId == '42') { // CEO

            }
            else {
                $data['renewalStatus'] = $renewalStatus;
            }
            // Registration Renewal Workflow Update END

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $companyUniqueNo, 'docs');
                }
            }


            $result = $this->loginModel->recordAjaxUpdate('id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), $data, $table);

            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }

            $sId = 0;

            if (isset($dataDetailTable)) {
                $keys = array_keys($dataDetailTable);
                foreach (array_keys($dataDetailTable) as $key) {
                    $current_key = current($keys);
                    $current_value = $dataDetailTable[$current_key];
                    $next_key = next($keys);
                    $next_value = @$dataDetailTable[$next_key];
                    $tableName = substr($current_key, 0, strpos($current_key, '-'));
                    $nextTableName = substr($next_key, 0, strpos($next_key, '-'));
                    /*if ($tableName == 'tabledetailmeeting') {
                        $tableDetail = 'tbl_registrationmeeting';
                        $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                        $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                        for ($i = 0; $i < $totalFiles; $i++) {
                            if (@$_FILES[$current_key]['tmp_name'][$i]) {
                                $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                                $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                            }
                        }
                        if ($myAction == 'save') {
                            $masterId = $result;
                        }
                        if ($myAction == 'update') {
                            $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                        }
                        if ($nextTableName <> $tableName) {
                            $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                            unset($datadetail);
                        }
                    }*/
                    $sId++;
                }
            }
            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else {
            $this->accessDenied();
            return;
        }
    }

    function registrationvariance($action = NULL, $id = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $myAction = '';
        if ($action == 'submit') {
            if (explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            }
            if (explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            }
            if ($myAction == 'add') {
                $myAction = 'save';
            }
            if ($myAction == 'edit') {
                $myAction = 'update';
            }
        }

        //---------- STAGES ---------
        // * Draft
        // * Submitted
        // * Under Review Stage 1
        // * Review Complete
        // * Under Inspection
        // * Post Inspection Process
        // * Under Board Stage 2
        // * Post Board Process
        // * Referred Back To Company (Editable)
        // * Referred Back To Company (Locked)
        // * Recommended By Board Stage 3
        // * Deferred and Closed
        // * Approved
        //---------- STAGES ---------

        $table = 'tbl_registration';
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        $data['records'] = $this->myModel->$functionName($table, $searchText);
        $data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);
        $data['recordsDetailProposedName'] = $this->myModel->applyregistrationDetailProposedNameEdit($id);
        $data['recordsDetailINN'] = $this->myModel->applyregistrationDetailINNEdit($id);
        $data['recordsDetailProposedPacking'] = $this->myModel->applyregistrationDetailProposedPackingEdit($id);
        $data['recordsDetailDomesticReference'] = $this->myModel->applyregistrationDetailDomesticReferenceEdit($id);
        $data['recordsDetailInternationalReference'] = $this->myModel->applyregistrationDetailInternationalReferenceEdit($id);
        $data['recordsDetailQuery'] = $this->myModel->registrationvarianceDetailQueryEdit($id);
        $data['registrationType'] = $this->myModel->registrationTypeGet();
        $data['postChangeType'] = $this->myModel->registrationVarianceTypeGet();
        $data['pharmacopeia'] = $this->myModel->pharmacopeiaGet();
        $data['atcCode'] = $this->myModel->atcCodeGet();
        $data['innCode'] = $this->myModel->innCodeGet();
        $data['productOrigin'] = $this->myModel->productOriginGet();
        $data['productCategory'] = $this->myModel->productCategoryGet();
        $data['usedFor'] = $this->myModel->usedForGet();
        $data['dosageForm'] = $this->myModel->dosageFormGet();

        $data['basicDose'] = $this->myModel->basicDoseGet();
        $data['pharmaDose'] = $this->myModel->pharmaDoseGet();
        $data['combinedPharmaDose'] = $this->myModel->combinedPharmaDoseGet();
        $data['releaseCharacteristics'] = $this->myModel->releaseCharacteristicsGet();
        $data['transformation'] = $this->myModel->transformationGet();
        $data['adminMethod'] = $this->myModel->adminMethodGet();
        $data['intendedSite'] = $this->myModel->intendedSiteGet();
        $data['presentationUnit'] = $this->myModel->presentationUnitGet();
        $data['packagingCategory'] = $this->myModel->packagingCategoryGet();
        $data['routeOfAdmin'] = $this->myModel->routeOfAdminGet();
        $data['unit'] = $this->myModel->unitGet();
        $data['labelClaim'] = $this->myModel->labelClaimGet();

        $data['regulatoryBody'] = $this->myModel->regulatoryBodyGet();
        $data['priorityReason'] = $this->myModel->registrationPriorityReasonGet();
        $data['inspectionType'] = $this->myModel->inspectionTypeRegistrationGet();
        //$data['licenses'] = $this->myModel->licensesGet1(@$data['recordsEdit'][0]->companyId);
        $data['licenseApproved1'] = $this->myModel->licenseApprovedGet($this->companyId);
        $data['registrationApproved1'] = $this->myModel->registrationApprovedGet($this->companyId);
        $data['registrationApproved2'] = $this->myModel->getRecords($table,'id',@$data['recordsEdit'][0]->parentId);
        $data['allApprovedLicenses'] = $this->myModel->allApprovedLicensesGet();
        $data['licenseApproved'] = $this->myModel->licenseApprovedGet(@$data['recordsEdit'][0]->companyId);
        $data['sectionApproved'] = $this->myModel->sectionApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['pharmaGroupApproved'] = $this->myModel->pharmaGroupApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['usedForApproved'] = $this->myModel->usedForApprovedGet1(@$data['recordsEdit'][0]->maxApprovedId);
        $data['licenseSectionApproved'] = $this->myModel->licenseSectionApprovedGet($id);
        $data['historyDesignation'] = $this->myModel->registrationDesignationGet();
        $data['recordsDetailMeeting'] = $this->myModel->registrationDetailMeetingEdit($id);
        $data['recordsDetailHistory'] = $this->myModel->registrationDetailHistoryEdit($id);

        $data['recordsDetailINNApproved'] = $this->myModel->registrationrenewalDetailINNEdit(@$data['recordsEdit'][0]->maxApprovedId);
        $data['recordsDetailProposedPackingApproved'] = $this->myModel->registrationrenewalDetailProposedPackingEdit(@$data['recordsEdit'][0]->maxApprovedId);
        $data['recordsEditApproved'] = $this->myModel->registrationrenewalEdit(@$data['recordsEdit'][0]->maxApprovedId, 'tbl_registration');

        if ($action == 'lookup' && $recordLookup == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $seenBy = explode(",", $data['recordsEdit'][0]->seenBy);
            if (!(in_array($this->userId, $seenBy))) {
                $this->loginModel->seenByUpdate($id, $this->userId, $table);
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Draft') {
                if ($this->roleId <> '26' && $data['recordsEdit'][0]->companyUniqueNo <> $this->companyUniqueNo) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Referred Back To Company (Editable)') {
                if ($this->roleId <> '26' && $data['records'][0]->companyUniqueNo <> $this->companyUniqueNo) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Referred Back To Company (Locked)') {
                //if($this->roleId <> '26' && $data['records'][0]->companyUniqueNo <> $this->companyUniqueNo){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
                //}
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Submitted') {
                if ($this->roleId <> '39') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Screening') {
                if ($this->roleId <> '39') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Under R and I') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Received By DRAP') {
                if ($this->roleId <> '39') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Under Review Stage 1') {
                if ($this->roleId <> '7' && $this->roleId <> '11' && $this->roleId <> '15' && $this->roleId <> '19' && $this->roleId <> '39' && $this->roleId <> '44' && $data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Review Complete') {
                if ($this->roleId <> '39') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Under Inspection') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Post Inspection Process') {
                if ($this->roleId <> '7' && $this->roleId <> '11' && $this->roleId <> '15' && $this->roleId <> '19' && $this->roleId <> '39' && $this->roleId <> '44' && $data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Under Board Stage 2') {
                if ($this->roleId <> '7' && $this->roleId <> '11' && $this->roleId <> '15' && $this->roleId <> '19' && $this->roleId <> '39' && $this->roleId <> '44' && $data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Post Board Process') {
                if ($this->roleId <> '7' && $this->roleId <> '11' && $this->roleId <> '15' && $this->roleId <> '19' && $this->roleId <> '39' && $this->roleId <> '44' && $data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Recommended By Board Stage 3') {
                if ($this->roleId <> '7') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Under Pricing') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Pricing Complete') {
                if ($this->roleId <> '7' && $this->roleId <> '11' && $this->roleId <> '15' && $this->roleId <> '19' && $this->roleId <> '39' && $this->roleId <> '44' && $data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Deferred and Closed') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->postchangeStatus == 'Approved') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $seenBy = explode(",", $data['recordsEdit'][0]->seenBy);
            if (!(in_array($this->userId, $seenBy))) {
                $this->loginModel->seenByUpdate($id, $this->userId, $table);
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $this->db->select('BaseTbl.postchangeStatus');
            $this->db->from('tbl_registration as BaseTbl');
            $this->db->where('BaseTbl.id', $id);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $postchangeStatus = $row->postchangeStatus;
                    if ($postchangeStatus == 'Draft') {
                        $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);
                    } else {
                        $this->session->set_flashdata('error', 'Record cannot be deleted.');
                        $result = 0;
                    }
                }
            }

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }


            if ($this->form_validation->run() == FALSE) {
                $validationFailed = 1;
                $this->session->set_flashdata('error', validation_errors());
            }

            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }

            $this->db->select('BaseTbl.id, BaseTbl.companyId, Company.companyName');
            $this->db->from('tbls_user as BaseTbl');
            $this->db->join('tbls_company as Company', 'Company.id = BaseTbl.companyId', 'left');
            $this->db->where('BaseTbl.id', $this->userId);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    $companyId = $row->companyId;
                    $companyName = $row->companyName;

                }
            }

            $this->db->select('BaseTbl.*');
            $this->db->from('tbl_registration as BaseTbl');
            $this->db->where('BaseTbl.id', $data['parentId']);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    $masterId = $row->masterId;
                    if($masterId == NULL){
                        $companyApprovedLicense =  $this->myModel->companyApprovedLicenseGet($this->companyUniqueNo);
                        $masterId = isset($companyApprovedLicense[0]->id)?$companyApprovedLicense[0]->id:NULL;
                    }
                    $companyAccountId = $this->companyUniqueNo;
                    $registrationTypeId = $row->registrationTypeId;
                    $productOriginId = $row->productOriginId;
                    $productCategoryId = $row->productCategoryId;
                    $usedForId = $row->usedForId;
                    $pharmacopeiaId = $row->pharmacopeiaId;

                    $routeOfAdminId = $row->routeOfAdminId;
                    $refUnit = $row->refUnit;
                    $shelfLife = $row->shelfLife;
                    $regFileNo = $row->regFileNo;
                    $isPublic = $row->isPublic;
                    $isCompany = $row->isCompany;
                    $regTypeId = $row->regTypeId;
                    $dealingsection = $row->dealingsection;
                    $meetingNo = $row->meetingNo;
                    $shelfLifeUnit = $row->shelfLifeUnit;
                    $productStatus = $row->productStatus;

                    $registrationNo = $row->registrationNo;
                    $dosageFormId = $row->dosageFormId;
                    $strength = $row->strength;
                    $unit = $row->unit;
                    $labelClaim = $row->labelClaim;
                    $approvedName = $row->approvedName;
                    $issueDateManual = $row->issueDateManual;
                    $validTill = $row->validTill;
                    $lastRenewalDateManual = $row->lastRenewalDateManual;
                }
            }

            // Registration Variance Workflow Save START
            if ($this->roleId == '26') { // Company Submission
                $data['companyAccountId'] = $this->companyUniqueNo;
                if ($data['postchangeStatus'] == 'Save') {
                    $data['postchangeStatus'] = 'Draft';


                    $data['masterId'] = $masterId;
                    $data['companyAccountId'] = $companyAccountId;
                    $data['productOriginId'] = $productOriginId;
                    $data['productCategoryId'] = $productCategoryId;
                    $data['usedForId'] = $usedForId;
                    $data['pharmacopeiaId'] = $pharmacopeiaId;
                    $data['routeOfAdminId'] = $routeOfAdminId;
                    $data['refUnit'] = $refUnit;
                    $data['shelfLife'] = $shelfLife;
                    //$data['regFileNo'] = $regFileNo;
                    $data['isPublic'] = $isPublic;
                    $data['isCompany'] = $isCompany;
                    $data['regTypeId'] = $regTypeId;
                    //$data['dealingsection'] = $dealingsection;
                    //$data['meetingNo'] = $meetingNo;
                    $data['shelfLifeUnit'] = $shelfLifeUnit;
                    $data['productStatus'] = $productStatus;


                    $data['registrationNo'] = $registrationNo;
                    $data['dosageFormId'] = $dosageFormId;
                    $data['strength'] = $strength;
                    $data['unit'] = $unit;
                    $data['labelClaim'] = $labelClaim;
                    $data['approvedName'] = $approvedName;
                    $data['issueDateManual'] = $issueDateManual;
                    $data['validTill'] = $validTill;
                    $data['lastRenewalDateManual'] = $lastRenewalDateManual;

                }
                unset($data['forwardedTo_detail101']);
                unset($data['remarks_detail101']);
                unset($data['sendQueryToCompany']);
            }
            // Registration Variance Workflow Save END

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
            }

            $result = $this->loginModel->recordAjaxSave($data, $table);


            //Insert Record Of other tables related to product registration
            //  Composition (INN)
            $this->db->select('"' . $result . '" as masterId, BaseTbl.innManual, BaseTbl.strength, BaseTbl.operator, BaseTbl.unitId, BaseTbl.status, BaseTbl.createdby as createdby, "' . $data['createddate'] . '" as createddate', false);
            $this->db->from('tbl_registrationinn as BaseTbl');
            $this->db->where('BaseTbl.isDeleted', 0);
            $this->db->where('BaseTbl.masterId', $id);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationinn');
                }
            }

            // Proposed Price
            $this->db->select('"' . $result . '" as masterId, BaseTbl.packSize, BaseTbl.approvedPrice, BaseTbl.pricingType, BaseTbl.createdby as createdby, "' . $data['createddate'] . '" as createddate', false);
            $this->db->from('tbl_registrationproposedprice as BaseTbl');
            $this->db->where('BaseTbl.isDeleted', 0);
            $this->db->where('BaseTbl.masterId', $id);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationproposedprice');
                }
            }

            //Other Manufacturer
            $this->db->select('"' . $result . '" as masterId, BaseTbl.companyName, BaseTbl.role, BaseTbl.companyAddress, BaseTbl.companyCountry, BaseTbl.createdby as createdby, "' . $data['createddate'] . '" as createddate', false);
            $this->db->from('tbl_registrationothermanufacturer as BaseTbl');
            $this->db->where('BaseTbl.isDeleted', 0);
            $this->db->where('BaseTbl.masterId', $id);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationothermanufacturer');
                }
            }

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $validationFailed = 0;
            // foreach ($data as $key => $value)
            // {
            //     if($key == 'remarks'){
            //         continue;
            //     }
            //     $this->form_validation->set_rules($key, ucwords(implode(' ', preg_split('/(?=[A-Z])/', $key))), ['required']);
            //     if($key == 'Something'){
            //         // Custom Rule
            //     }
            // }
            if ($this->form_validation->run() == FALSE) {
                $validationFailed = 1;
                $this->session->set_flashdata('error', validation_errors());
            }

            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }

            // Registration Variance Workflow Update START
            $this->db->select('BaseTbl.id, User.email, User.userName, BaseTbl.rniRefNo, BaseTbl.registrationNo, BaseTbl.inspectionRequired, BaseTbl.inspectionTypeId, Company.id as companyId, Company.companyUniqueNo, BaseTbl.postchangeStatus');
            $this->db->from('tbl_registration as BaseTbl');
            $this->db->join('tbl_license as License', 'License.id = BaseTbl.masterId', 'left');
            $this->db->join('tbls_company as Company', 'Company.id = License.companyId', 'left');
            $this->db->join('tbls_user as User', 'User.companyId = Company.id', 'left');
            $this->db->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    $email = $row->email;
                    $userName = $row->userName;
                    $rniRefNo = $row->rniRefNo;
                    $registrationNo = $row->registrationNo;
                    $inspectionRequired = $row->inspectionRequired;
                    $inspectionTypeId = $row->inspectionTypeId;
                    $companyId = $row->companyId;
                    $companyUniqueNo = $row->companyUniqueNo;
                    $postchangeStatus = $row->postchangeStatus;
                }
            }

            if ($this->roleId <> '26') {
                if ($data['forwardedTo_detail101']) {
                    $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'Registration Variance', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo_detail101'], 'remarks' => $data['remarks_detail101'], 'status' => $postchangeStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_registrationhistory');
                    if ($data['sendQueryToCompany'] == '1') {
                        $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'dateTime' => date($this->dateTimeFormat), 'title' => 'Registration Variance', 'type' => 'Registration Variance', 'message' => $data['remarks_detail101'], 'userId' => $this->userId, 'authorization' => 'Granted', 'applicationStatus' => $postchangeStatus, 'status' => 'Info Required From Company', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_query');
                    }
                }
            }
            unset($data['forwardedTo_detail101']);
            unset($data['remarks_detail101']);
            unset($data['sendQueryToCompany']);

            if ($this->roleId == '26') { // Company Submission
                if ($data['postchangeStatus'] == 'Save') {
                    $data['postchangeStatus'] = $postchangeStatus;
                }
                if ($data['postchangeStatus'] == 'Submit') {
                    $data['rniRefNo'] = $rniRefNo;
                    if ($rniRefNo == NULL) {
                        $data['rniRefNo'] = 'R-R-' . $id;
                    }
                    if ($postchangeStatus == 'Draft') {
                        $data['postchangeStatus'] = 'Submitted';
                        $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "Registration Variance" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response From Applicant" as remarks, "Draft" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                        $this->db->from('tbl_registrationhistory as BaseTbl');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            //$this->session->set_flashdata('error', 'No record found.');
                            $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'Registration Variance', 'userId' => $this->userId, 'forwardedTo' => 104, 'dateTime' => date($this->dateTimeFullFormat), 'remarks' => "Response From Applicant", 'status' => "Draft", 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_registrationhistory');

                            // ------------------- Send Alert Start -------------------
                            $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                            $this->db->from('tbl_registrationhistory as BaseTbl');
                            $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                            $this->db->where('BaseTbl.isDeleted', 0);
                            $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                            $this->db->limit(1);
                            $this->db->order_by('BaseTbl.id', 'desc');
                            $queryAlert = $this->db->get();
                            $countAlert = $queryAlert->num_rows();
                            if ($countAlert === 0) {
                                $this->session->set_flashdata('error', 'No record found.');
                            }
                            if ($countAlert > 0) {
                                foreach ($queryAlert->result() as $rowAlert) {
                                    $id = $rowAlert->id;
                                    $masterId = $rowAlert->masterId;
                                    $forwardedTo = $rowAlert->forwardedTo;
                                    $userName = $rowAlert->userName;
                                }
                            }

                            $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'registration/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                            // ------------------- Send Alert End -------------------
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationhistory');
                            }

                            // ------------------- Send Alert Start -------------------
                            $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                            $this->db->from('tbl_registrationhistory as BaseTbl');
                            $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                            $this->db->where('BaseTbl.isDeleted', 0);
                            $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                            $this->db->limit(1);
                            $this->db->order_by('BaseTbl.id', 'desc');
                            $queryAlert = $this->db->get();
                            $countAlert = $queryAlert->num_rows();
                            if ($countAlert === 0) {
                                $this->session->set_flashdata('error', 'No record found.');
                            }
                            if ($countAlert > 0) {
                                foreach ($queryAlert->result() as $rowAlert) {
                                    $id = $rowAlert->id;
                                    $masterId = $rowAlert->masterId;
                                    $forwardedTo = $rowAlert->forwardedTo;
                                    $userName = $rowAlert->userName;
                                }
                            }

                            $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'registration/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                            // ------------------- Send Alert End -------------------
                        }
                    }
                    if ($postchangeStatus == 'Referred Back To Company (Editable)') {
                        $data['postchangeStatus'] = 'Screening';
                    }
                    if ($postchangeStatus == 'Referred Back To Company (Locked)') {
                        $data['postchangeStatus'] = 'Under Review Stage 1';
                        $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "Registration Variance" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response From Applicant" as remarks, "Referred Back To Company (Locked)" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                        $this->db->from('tbl_registrationhistory as BaseTbl');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationhistory');
                            }
                        }
                    }
                    if ($validationFailed == 1) {
                        //$data['postchangeStatus'] = $postchangeStatus;
                    }
                }
            } else if ($this->roleId == '7') { // Registration Director
                if ($data['postchangeStatus'] == 'Save') {
                    $data['postchangeStatus'] = $postchangeStatus;
                }
                if ($data['postchangeStatus'] == 'Deferred and Closed') {
                    $data['postchangeStatus'] = 'Deferred and Closed';
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | Registration Variance Rejected';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your registration variance application with ref. no " . $rniRefNo . " has been rejected. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = mailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }
                if ($data['postchangeStatus'] == 'Proceed') {
                    $data['postchangeStatus'] = $postchangeStatus;
                }
                if ($data['postchangeStatus'] == 'Approved') {
                    $data['postchangeStatus'] = 'Approved';
                    $data['issueDateManual'] = date($this->dateTimeFormat);
                    $validTill1 = date_create(date('Y-m-d H:i', strtotime(date('Y-m-d') . ' +5 YEAR')));
                    $validTill1 = date_format($validTill1, $this->dateTimeFormat);
                    $data['validTill'] = $validTill1;
                    $data['registrationNo'] = 'R-R-' . $id;
                    $data['status'] = 'Active';
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | Registration Variance Approved';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your registration variance application with ref. no " . $rniRefNo . " has been approved. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = mailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }
            } else if ($this->roleId == '11') { // Registration Additional Director
                if ($data['postchangeStatus'] == 'Save') {
                    $data['postchangeStatus'] = $postchangeStatus;
                }
            } else if ($this->roleId == '15') { // Registration Deputy Director
                if ($data['postchangeStatus'] == 'Save') {
                    $data['postchangeStatus'] = $postchangeStatus;
                }
            } else if ($this->roleId == '19') { // Registration Assistant Director
                if ($data['postchangeStatus'] == 'Save') {
                    $data['postchangeStatus'] = $postchangeStatus;
                }
                if ($data['postchangeStatus'] == 'Referred Back To Company') {
                    if ($postchangeStatus == 'Under Review Stage 1') {
                        $data['postchangeStatus'] = 'Referred Back To Company (Locked)';
                        $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "Registration Variance" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response Awaited From Applicant" as remarks, "Under Review Stage 1" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                        $this->db->from('tbl_registrationhistory as BaseTbl');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationhistory');
                            }
                        }
                    }
                }
                if ($data['postchangeStatus'] == 'Proceed') {
                    if ($postchangeStatus == 'Under Review Stage 1') {
                        $data['postchangeStatus'] = 'Review Complete';
                    }
                    if ($postchangeStatus == 'Review Complete') {
                        $data['postchangeStatus'] = $postchangeStatus;
                    }
                    if ($postchangeStatus == 'Post Inspection Process') {
                        $data['postchangeStatus'] = 'Under Board Stage 2';
                    }
                    if ($postchangeStatus == 'Under Board Stage 2') {
                        $data['postchangeStatus'] = 'Recommended By Board Stage 3';
                    }
                    if ($postchangeStatus == 'Post Board Process') {
                        if ($data['inspectionRequired1'] == 'No') {
                            $data['postchangeStatus'] = 'Recommended By Board Stage 3';
                        }
                        if ($data['inspectionRequired1'] == 'Yes') {
                            $data['postchangeStatus'] = 'Under Inspection';
                            $data['discussInBoard'] = 0;
                            if ($data['inspectionTypeId1'] == 10) {
                                $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => $data['inspectionTypeId1'], 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            }
                            if ($data['inspectionTypeId1'] == 20) {
                                $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => $data['inspectionTypeId1'], 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            }
                            if ($data['inspectionTypeId1'] == 21) {
                                $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => $data['inspectionTypeId1'], 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            }
                        }
                    }
                    if ($postchangeStatus == 'Recommended By Board Stage 3') {
                        $data['postchangeStatus'] = $postchangeStatus;
                    }
                    if ($postchangeStatus == 'Pricing Complete') {
                        $data['postchangeStatus'] = $postchangeStatus;
                    }
                }
            } else if ($this->roleId == '39') { // Registration Assigning Officer
                if ($data['postchangeStatus'] == 'Save') {
                    $data['postchangeStatus'] = $postchangeStatus;
                }
                if ($data['postchangeStatus'] == 'Proceed') {
                    $data['postchangeStatus'] = $postchangeStatus;
                    if ($postchangeStatus == 'Submitted') {
                        $data['postchangeStatus'] = 'Under Review Stage 1';
                        // ------------------- Send Alert Start -------------------
                        $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                        $this->db->from('tbl_registrationhistory as BaseTbl');
                        $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $queryAlert = $this->db->get();
                        $countAlert = $queryAlert->num_rows();
                        if ($countAlert === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($countAlert > 0) {
                            foreach ($queryAlert->result() as $rowAlert) {
                                $id = $rowAlert->id;
                                $masterId = $rowAlert->masterId;
                                $forwardedTo = $rowAlert->forwardedTo;
                                $userName = $rowAlert->userName;
                            }
                        }

                        $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'registration/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                        // ------------------- Send Alert End -------------------
                    }
                    if ($postchangeStatus == 'Under Review Stage 1') {
                        $data['postchangeStatus'] = $postchangeStatus;
                        // ------------------- Send Alert Start -------------------
                        $this->db->select('BaseTbl.id, BaseTbl.masterId, BaseTbl.forwardedTo, User.userName');
                        $this->db->from('tbl_registrationhistory as BaseTbl');
                        $this->db->join('tbls_user as User', 'User.id = BaseTbl.forwardedTo', 'left');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $queryAlert = $this->db->get();
                        $countAlert = $queryAlert->num_rows();
                        if ($countAlert === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($countAlert > 0) {
                            foreach ($queryAlert->result() as $rowAlert) {
                                $id = $rowAlert->id;
                                $masterId = $rowAlert->masterId;
                                $forwardedTo = $rowAlert->forwardedTo;
                                $userName = $rowAlert->userName;
                            }
                        }

                        $resultdetail = $this->loginModel->recordAjaxSave(['type' => 'User', 'alertName' => 'Greetings ' . $userName . ', New Task For You!', 'description' => 'Please Assign. Link: <a href="' . base_url() . 'registration/edit/' . $masterId . '">PIRIMS</a>', 'dateTime' => $data['updateddate'], 'duration' => 'now', 'recepients' => '0,' . $forwardedTo, 'status' => 'Active', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbls_alert');
                        // ------------------- Send Alert End -------------------
                    }
                    if ($postchangeStatus == 'Review Complete') {
                        $data['postchangeStatus'] = $postchangeStatus;
                        if ($data['inspectionRequired'] == 'No') {
                            $data['postchangeStatus'] = 'Under Board Stage 2';
                            //$data['discussInBoard'] = 1;
                        }
                        if ($data['inspectionRequired'] == 'Yes') {
                            $data['postchangeStatus'] = 'Under Inspection';
                            if ($data['inspectionTypeId'] == 10) {
                                $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => $data['inspectionTypeId'], 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            }
                            if ($data['inspectionTypeId'] == 20) {
                                $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => $data['inspectionTypeId'], 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            }
                            if ($data['inspectionTypeId'] == 21) {
                                $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => $data['inspectionTypeId'], 'refId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'updateddate' => $data['updateddate']], 'tbl_inspection');
                            }
                        }
                    }
                    if ($postchangeStatus == 'Post Inspection Process') {
                        $data['postchangeStatus'] = $postchangeStatus;
                    }
                    if ($postchangeStatus == 'Under Board Stage 2') {
                        $data['postchangeStatus'] = $postchangeStatus;
                    }
                    if ($postchangeStatus == 'Post Board Process') {
                        $data['postchangeStatus'] = $postchangeStatus;
                    }
                    if ($postchangeStatus == 'Recommended By Board Stage 3') {
                        $data['postchangeStatus'] = $postchangeStatus;
                    }
                    if ($postchangeStatus == 'Under Pricing') {
                        $data['postchangeStatus'] = $postchangeStatus;
                    }
                    if ($postchangeStatus == 'Pricing Complete') {
                        $data['postchangeStatus'] = $postchangeStatus;
                    }
                }
            } else if ($this->roleId == '44') { // Registration Board Secretary
                if ($data['postchangeStatus'] == 'Save') {
                    $data['postchangeStatus'] = $postchangeStatus;
                }
                if ($data['postchangeStatus'] == 'Deferred and Closed') {
                    if ($postchangeStatus == 'Under Board Stage 2') {
                        $data['postchangeStatus'] = 'Deferred and Closed';
                    }
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | Registration Variance Rejected';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your registration variance application with ref. no " . $rniRefNo . " has been rejected. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = mailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }
                if ($data['postchangeStatus'] == 'Proceed') {
                    if ($postchangeStatus == 'Under Board Stage 2') {
                        $data['postchangeStatus'] = $postchangeStatus;
                    }
                    if ($postchangeStatus == 'Post Board Process') {
                        $data['postchangeStatus'] = 'Recommended By Board Stage 3';
                    }
                    if ($postchangeStatus == 'Pricing Complete') {
                        $data['postchangeStatus'] = $postchangeStatus;
                    }
                }
            } else if ($this->roleId == '45') { // Registration Pricing User

            } else if ($this->roleId == '51') { // Registration Screening Officer
                if ($data['postchangeStatus'] == 'Save') {
                    $data['postchangeStatus'] = $postchangeStatus;
                }
                if ($data['postchangeStatus'] == 'Referred Back To Company') {
                    if ($postchangeStatus == 'Submitted') {
                        $data['postchangeStatus'] = $postchangeStatus;
                    }
                    if ($postchangeStatus == 'Screening' || $postchangeStatus == 'Under Review Stage 1') {
                        $data['postchangeStatus'] = 'Referred Back To Company (Editable)';
                        $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "Registration" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response Awaited From Applicant" as remarks, "Under Review Stage 1" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                        $this->db->from('tbl_registrationhistory as BaseTbl');
                        $this->db->where('BaseTbl.isDeleted', 0);
                        $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $this->db->limit(1);
                        $this->db->order_by('BaseTbl.id', 'desc');
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationhistory');
                            }
                        }
                    }
                }
                if ($data['postchangeStatus'] == 'Proceed') {
                    $data['postchangeStatus'] = $postchangeStatus;
                    if ($postchangeStatus == 'Submitted') {
                        $data['postchangeStatus'] = 'Screening';
                    }
                    if ($postchangeStatus == 'Screening') {
                        $data['postchangeStatus'] = 'Under R and I';
                    }
                }
            } else if ($this->roleId == '42') { // CEO

            } else {
                $data['postchangeStatus'] = $postchangeStatus;
            }
            // Registration Variance Workflow Update END

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $companyUniqueNo, 'docs');
                }
            }

            $result = $this->loginModel->recordAjaxUpdate('id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), $data, $table);

            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }

            $sId = 0;
            $keys = array_keys($dataDetailTable);
            foreach (array_keys($dataDetailTable) as $key) {
                $current_key = current($keys);
                $current_value = $dataDetailTable[$current_key];
                $next_key = next($keys);
                $next_value = @$dataDetailTable[$next_key];
                $tableName = substr($current_key, 0, strpos($current_key, '-'));
                $nextTableName = substr($next_key, 0, strpos($next_key, '-'));
                /* if ($tableName == 'tabledetailmeeting') {
                     $tableDetail = 'tbl_registrationmeeting';
                     $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                     $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                     for ($i = 0; $i < $totalFiles; $i++) {
                         if (@$_FILES[$current_key]['tmp_name'][$i]) {
                             $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                             $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                         }
                     }
                     if ($myAction == 'save') {
                         $masterId = $result;
                     }
                     if ($myAction == 'update') {
                         $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                     }
                     if ($nextTableName <> $tableName) {
                         $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                         unset($datadetail);
                     }
                 }
                 */
                $sId++;
            }

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else {
            $this->accessDenied();
            return;
        }
    }

    function query($action = NULL, $id = NULL, $type = NULL, $masterId = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $myAction = '';
        if ($action == 'submit') {
            if (explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            }
            if (explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            }

            if ($myAction == 'add') {
                $myAction = 'save';
            }
            if ($myAction == 'edit') {
                $myAction = 'update';
            }
        }

        $type = urldecode($type);

        $table = 'tbl_' . __FUNCTION__;
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        $data['records'] = $this->myModel->$functionName($table, $searchText);
        $data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);
        $data['applicationStatus'] = $this->myModel->companyApplicationStatusGet($masterId, $type);
        $data['challanInfo'] = $this->myModel->getQueryChallanInfo($id);


        $data['title'] = '';

        $this->db->select('BaseTbl.title, BaseTbl.message');
        $this->db->from('tbl_query as BaseTbl');
        $this->db->where('BaseTbl.id', $id);
        $query = $this->db->get();
        $count = $query->num_rows();
        if ($count === 0) {
            //$this->session->set_flashdata('error', 'No record found.');
            $result = 0;
        }
        if ($count > 0) {
            foreach ($query->result() as $row) {
                $title = $row->title;
                $message = $row->message;
                $data['title'] = $title;
                $data['question'] = $message;
            }
        }




        if ($action == 'lookup' && $recordLookup == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }


            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $qid = 0;
            $resultdetail = 0;

            $url = explode('/', $_SERVER['HTTP_REFERER']);
            if ($url[2] == 'pirims.dra.gov.pk') {
                $applicationId = $url[7];
                $myType = urldecode($url[6]);
            } else {
                $applicationId = $url[8];
                $myType = urldecode($url[7]);
            }
            $data['masterId'] = $applicationId;
            $data['dateTime'] = date($this->dateTimeFormat);
            $data['type'] = $myType;

            if($this->roleId == 26){
                $challan_no = $data['challan_no'];
                $challan_fee = $data['challan_fee'];
                $challan_status = $data['challan_status'];
                $challan_msg = $data['challan_msg'];
                $challan_account_id = $data['challan_account_id'];
                $challan_account_title = $data['challan_account_title'];
                $challan_date = $data['challan_date'];

                unset($data['challan_no']);
                unset($data['challan_fee']);
                unset($data['challan_status']);
                unset($data['challan_msg']);
                unset($data['challan_account_id']);
                unset($data['challan_account_title']);
                unset($data['challan_date']);
            }

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
            }

            if ($data['type'] == 'Registration' || $data['type'] == 'Registration Renewal' || $data['type'] == 'Post Registration Change' || $data['type'] == 'Registration Export') {
                $this->db->select('BaseTbl.id, BaseTbl.registrationStatus, BaseTbl.renewalStatus, BaseTbl.postchangeStatus');
                $this->db->from('tbl_registration as BaseTbl');
                $this->db->where('BaseTbl.id', $data['masterId']);
                $query = $this->db->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    //$this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $registrationStatus = $row->registrationStatus;
                        $renewalStatus = $row->renewalStatus;
                        $postchangeStatus = $row->postchangeStatus;
                    }
                }
            }

            if ($data['type'] == 'License' || $data['type'] == 'License Renewal' || $data['type'] == 'Post License Change') {
                $result = $this->loginModel->recordAjaxSave(['masterId' => $data['masterId'], 'dateTime' => $data['dateTime'], 'title' => $data['title'], 'type' => $data['type'], 'filePath' => $data['filePath'], 'message' => $data['message'], 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => $data['status'], 'createdby' => $data['createdby'], 'createddate' => $data['createddate']], $table);
            }

            if ($data['type'] == 'Registration') {
                $result = $this->loginModel->recordAjaxSave(['masterId' => $data['masterId'], 'dateTime' => $data['dateTime'], 'title' => $data['title'], 'type' => $data['type'], 'filePath' => $data['filePath'], 'message' => $data['message'], 'applicationStatus' => $registrationStatus, 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => $data['status'], 'createdby' => $data['createdby'], 'createddate' => $data['createddate']], $table);
            }
            if ($data['type'] == 'Registration Renewal') {
                $result = $this->loginModel->recordAjaxSave(['masterId' => $data['masterId'], 'dateTime' => $data['dateTime'], 'title' => $data['title'], 'type' => $data['type'], 'filePath' => $data['filePath'], 'message' => $data['message'], 'applicationStatus' => $renewalStatus, 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => $data['status'], 'createdby' => $data['createdby'], 'createddate' => $data['createddate']], $table);
            }
            if ($data['type'] == 'Post Registration Change') {
                $result = $this->loginModel->recordAjaxSave(['masterId' => $data['masterId'], 'dateTime' => $data['dateTime'], 'title' => $data['title'], 'type' => $data['type'], 'filePath' => $data['filePath'], 'message' => $data['message'], 'applicationStatus' => $postchangeStatus, 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => $data['status'], 'createdby' => $data['createdby'], 'createddate' => $data['createddate']], $table);
            }

            if ($data['type'] == 'License') {
                $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['licenseStatus' => 'Under Review Stage 1'], 'tbl_license');
            }

            if ($data['type'] == 'License Renewal') {
                $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['renewalStatus' => 'Under Review Stage 1'], 'tbl_license');
            }

            if ($data['type'] == 'Post License Change') {
                $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['postchangeStatus' => 'Under Review Stage 1'], 'tbl_license');
            }

            if ($data['type'] == 'Registration') {
                if ($registrationStatus == 'Referred Back To Company (Locked)') {
                    $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['registrationStatus' => 'Under Review Stage 1'], 'tbl_registration');
                }
            }

            if ($data['type'] == 'Registration Renewal') {
                if ($renewalStatus == 'Referred Back To Company (Locked)') {
                    $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['renewalStatus' => 'Under Review Stage 1'], 'tbl_registration');
                }
            }

            if ($data['type'] == 'Post Registration Change') {
                if ($postchangeStatus == 'Referred Back To Company (Locked)') {
                    $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['postchangeStatus' => 'Under Review Stage 1'], 'tbl_registration');
                }
            }
            if ($data['type'] == 'Registration Export') {
                $result = $this->loginModel->recordAjaxSave(['masterId' => $data['masterId'], 'dateTime' => $data['dateTime'], 'title' => $data['title'], 'type' => $data['type'], 'filePath' => $data['filePath'], 'message' => $data['message'], 'applicationStatus' => $registrationStatus, 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => $data['status'], 'createdby' => $data['createdby'], 'createddate' => $data['createddate']], $table);
                $qid = $result;
                if ($registrationStatus == 'Referred Back To Company (Locked)') {
                    $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['registrationStatus' => 'Re-Submitted'], 'tbl_registration');
                }
            }

            if ($this->roleId == 26 && $qid <> 0 && $data['challan_status']=='Paid') {
                $this->loginModel->recordAjaxSave(['masterId' => $id,
                    'usedfor' => 'Export Registration',
                    'challan_no' => $challan_no,
                    'challan_fee' => $challan_fee,
                    'challan_status' => $challan_status,
                    'challan_msg' => $challan_msg,
                    'challan_account_id' => $challan_account_id,
                    'challan_account_title' => $challan_account_title,
                    'challan_date' => $challan_date,
                    'queryid' => $qid,
                    'status' => $challan_status,
                    'createdby' => $data['updatedby'],
                    'createddate' => $data['updateddate']
                ], 'tbl_challan');

            }


            if ($result > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }
            $url = explode('/', $_SERVER['HTTP_REFERER']);
            if ($url[2] == 'pirims.dra.gov.pk') {
                $applicationId = $url[7];
                $myType = urldecode($url[6]);
                $queryid = $url[5];
            } else {
                $applicationId = $url[8];
                $myType = urldecode($url[7]);
                $queryid = $url[6];
            }

            $data['userId'] = $this->userId;
            $data['authorization'] = 'Granted';
            $data['masterId'] = $applicationId;
            $data['dateTime'] = date($this->dateTimeFormat);
            $data['type'] = $myType;



            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
            }

            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;


            if ($this->roleId == 26 && $queryid <> 0 && $data['challan_status']=='Paid') {
                $this->loginModel->recordAjaxSave(['masterId' => $applicationId,
                    'usedfor' => 'Export Registration',
                    'challan_no' => $data['challan_no'],
                    'challan_fee' => $data['challan_fee'],
                    'challan_status' => $data['challan_status'],
                    'challan_msg' => $data['challan_msg'],
                    'challan_account_id' => $data['challan_account_id'],
                    'challan_account_title' => $data['challan_account_title'],
                    'challan_date' => $data['challan_date'],
                    'status' => $data['challan_status'],
                    'queryid' => $queryid,
                    'createdby' => $data['updatedby'],
                    'createddate' => $data['updateddate']
                ], 'tbl_challan');
            }
            unset($data['challan_no']);
            unset($data['challan_fee']);
            unset($data['challan_status']);
            unset($data['challan_msg']);
            unset($data['challan_account_id']);
            unset($data['challan_account_title']);
            unset($data['challan_date']);


            $resultdetail = 0;
            $result = $this->loginModel->recordAjaxUpdate('id', $queryid, $data, $table);

            if ($data['type'] == 'License') {
                $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['licenseStatus' => 'Under Review Stage 1'], 'tbl_license');
            }

            if ($data['type'] == 'License Renewal') {
                $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['renewalStatus' => 'Under Review Stage 1'], 'tbl_license');
            }

            if ($data['type'] == 'Post License Change') {
                $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['postchangeStatus' => 'Under Review Stage 1'], 'tbl_license');
            }
            if ($data['type'] == 'License' || $data['type'] == 'License Renewal' || $data['type'] == 'Post License Change'){
                $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => $data['masterId'], 'type' => $data['type'], 'userId' => $this->userId, 'forwardedTo' => 103, 'dateTime' => date($this->dateTimeFullFormat), 'remarks' => "Response From Applicant", 'status' => "Referred Back To Company (Locked)", 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
            }

            if ($data['type'] == 'Registration' ) {
                $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['registrationStatus' => 'Under Review Stage 1'], 'tbl_registration');
            }
            if ($data['type'] == 'Registration Export') {
                $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['registrationStatus' => 'Re Submitted'], 'tbl_registration');
            }

            if ($data['type'] == 'Registration Renewal') {
                $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['renewalStatus' => 'Under Review Stage 1'], 'tbl_registration');
            }


            if ($data['type'] == 'Post Registration Change') {
                $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['postchangeStatus' => 'Under Review Stage 1'], 'tbl_registration');
            }




            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }


            redirect(__FUNCTION__ . '/lookup');
        } else {
            $this->accessDenied();
            return;
        }
    }

    function letterConditions($action = NULL, $id = NULL, $type = NULL, $masterId = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $myAction = '';
        if ($action == 'submit') {
            if (explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            }
            if (explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            }

            if ($myAction == 'add') {
                $myAction = 'save';
            }
            if ($myAction == 'edit') {
                $myAction = 'update';
            }
        }

        $type = urldecode($type);

        $table = 'tbl_' . __FUNCTION__;
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        $data['records'] = $this->myModel->$functionName($table, $searchText);
        $data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);

        $data['title'] = '';

        $this->db->select('BaseTbl.title, BaseTbl.message');
        $this->db->from('tbl_query as BaseTbl');
        $this->db->where('BaseTbl.id', $id);
        $query = $this->db->get();
        $count = $query->num_rows();
        if ($count === 0) {
            //$this->session->set_flashdata('error', 'No record found.');
            $result = 0;
        }
        if ($count > 0) {
            foreach ($query->result() as $row) {
                $title = $row->title;
                $message = $row->message;
                $data['title'] = $title;
                $data['question'] = $message;
            }
        }

        if ($action == 'lookup' && $recordLookup == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;

            if($this->roleId == 26){
                $challan_no = $data['challan_no'];
                $challan_fee = $data['challan_fee'];
                $challan_status = $data['challan_status'];
                $challan_msg = $data['challan_msg'];
                $challan_account_id = $data['challan_account_id'];
                $challan_account_title = $data['challan_account_title'];
                $challan_date = $data['challan_date'];

                unset($data['challan_no']);
                unset($data['challan_fee']);
                unset($data['challan_status']);
                unset($data['challan_msg']);
                unset($data['challan_account_id']);
                unset($data['challan_account_title']);
                unset($data['challan_date']);
            }

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
            }
            $result = $this->loginModel->recordAjaxSave($data, $table);

            // (['masterId' => $data['masterId'], 'dateTime' => $data['dateTime'], 'title' => $data['title'], 'type' => $data['type'], 'filePath' => $data['filePath'], 'message' => $data['message'], 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => $data['status'], 'createdby' => $data['createdby'], 'createddate' => $data['createddate']], $table);


            if ($result > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }
            $id = $data['id'];
            unset($data['id']);
            // $data['userId'] = $this->userId;




            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
            }

            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;

            $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }


            redirect(__FUNCTION__ . '/lookup');
        } else {
            $this->accessDenied();
            return;
        }
    }



    function panelpool($action = NULL, $id = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $myAction = '';
        if ($action == 'submit') {
            if (explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            }
            if (explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            }
            if ($myAction == 'add') {
                $myAction = 'save';
            }
            if ($myAction == 'edit') {
                $myAction = 'update';
            }
        }

        $table = 'tbl_' . __FUNCTION__;
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        $data['records'] = $this->myModel->$functionName($table, $searchText);
        $data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);
        $data['users'] = $this->myModel->panelPoolUsersGet();

        if ($action == 'lookup' && $recordLookup == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            if ($data['type'] == 'External') {
                //$data['isLead'] = 0;
                //$data['userId'] = 0;
            }

            if ($data['status'] == 'Active') {
                if ($data['type'] == 'Internal') {
                    $this->db->select('BaseTbl.id, Role.id as roleId, Role.department');
                    $this->db->from('tbls_user as BaseTbl');
                    $this->db->join('tbls_role as Role', 'Role.id = BaseTbl.roleId', 'left');
                    $this->db->where('BaseTbl.id', $data['userId']);
                    $query = $this->db->get();
                    $count = $query->num_rows();
                    if ($count === 0) {
                        $this->session->set_flashdata('error', 'No record found.');
                    }
                    if ($count > 0) {
                        foreach ($query->result() as $row) {
                            $id = $row->id;
                            $roleId = $row->roleId;
                            $department = $row->department;
                        }
                        $pageId = array(691);

                        $this->db->select('BaseTbl.id');
                        $this->db->from('tbls_pagedetail as BaseTbl');
                        $this->db->where('BaseTbl.roleId', $roleId);
                        $this->db->where_in('BaseTbl.masterId', array(691, 696, 697));
                        $query1 = $this->db->get();
                        $count = $query1->num_rows();
                        if ($count > 0) {
                            foreach ($query1->result() as $row1) {
                                $id = $row1->id;
                            }
                            $table1 = 'tbls_pagedetail';
                            $result = $this->loginModel->recordAjaxUpdate('id', $id, ['recordLookup' => 1, 'recordEdit' => 1, 'recordView' => 1, 'recordSubmit' => 1], $table1);
                        }
                    }
                }

                $result = $this->loginModel->recordAjaxSave(['type' => $data['type'], 'userId' => $data['userId'], 'memberName' => $data['memberName'], 'department' => $data['department'], 'designation' => $data['designation'], 'phone' => $data['phone'], 'email' => $data['email'], 'enterDate' => $data['createddate'], 'remarks' => $data['remarks'], 'status' => $data['status'], 'createdby' => $data['createdby'], 'createddate' => $data['createddate']], $table);
            }
            if ($data['status'] == 'Inactive') {
                $result = $this->loginModel->recordAjaxSave(['type' => $data['type'], 'userId' => $data['userId'], 'memberName' => $data['memberName'], 'department' => $data['department'], 'designation' => $data['designation'], 'phone' => $data['phone'], 'email' => $data['email'], 'remarks' => $data['remarks'], 'status' => $data['status'], 'createdby' => $data['createdby'], 'createddate' => $data['createddate']], $table);
            }

            if ($result > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            if ($data['type'] == 'External') {
                //$data['isLead'] = 0;
                //$data['userId'] = 0;
            }

            if ($data['status'] == 'Active') {
                if ($data['type'] == 'Internal') {
                    $this->db->select('BaseTbl.id, Role.id as roleId, Role.department');
                    $this->db->from('tbls_user as BaseTbl');
                    $this->db->join('tbls_role as Role', 'Role.id = BaseTbl.roleId', 'left');
                    $this->db->where('BaseTbl.id', $data['userId']);
                    $query = $this->db->get();
                    $count = $query->num_rows();
                    if ($count === 0) {
                        $this->session->set_flashdata('error', 'No record found.');
                    }
                    if ($count > 0) {
                        foreach ($query->result() as $row) {
                            $id = $row->id;
                            $roleId = $row->roleId;
                            $department = $row->department;
                        }
                        $pageId = array(691);

                        $this->db->select('BaseTbl.id');
                        $this->db->from('tbls_pagedetail as BaseTbl');
                        $this->db->where('BaseTbl.roleId', $roleId);
                        $this->db->where_in('BaseTbl.masterId', array(691, 696, 697));
                        $query1 = $this->db->get();
                        $count = $query1->num_rows();
                        if ($count > 0) {
                            foreach ($query1->result() as $row1) {
                                $id = $row1->id;
                            }
                            $table1 = 'tbls_pagedetail';
                            $result = $this->loginModel->recordAjaxUpdate('id', $id, ['recordLookup' => 1, 'recordEdit' => 1, 'recordView' => 1, 'recordSubmit' => 1], $table1);
                        }
                    }
                }

                $data['inUseBy'] = 0;
                $data['inUseTime'] = '';
                $result = $this->loginModel->recordAjaxUpdate('id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), ['type' => $data['type'], 'userId' => $data['userId'], 'memberName' => $data['memberName'], 'department' => $data['department'], 'designation' => $data['designation'], 'phone' => $data['phone'], 'email' => $data['email'], 'enterDate' => $data['updateddate'], 'remarks' => $data['remarks'], 'status' => $data['status'], 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate'], 'inUseBy' => $data['inUseBy'], 'inUseTime' => $data['inUseTime']], $table);
            }
            if ($data['status'] == 'Inactive') {
                if ($data['type'] == 'Internal') {
                    $this->db->select('BaseTbl.id, Role.id as roleId, Role.department');
                    $this->db->from('tbls_user as BaseTbl');
                    $this->db->join('tbls_role as Role', 'Role.id = BaseTbl.roleId', 'left');
                    $this->db->where('BaseTbl.id', $data['userId']);
                    $query = $this->db->get();
                    $count = $query->num_rows();
                    if ($count === 0) {
                        $this->session->set_flashdata('error', 'No record found.');
                    }
                    if ($count > 0) {
                        foreach ($query->result() as $row) {
                            $id = $row->id;
                            $roleId = $row->roleId;
                            $department = $row->department;
                        }
                        $pageId = array(691);

                        $this->db->select('BaseTbl.id');
                        $this->db->from('tbls_pagedetail as BaseTbl');
                        $this->db->where('BaseTbl.roleId', $roleId);
                        $this->db->where_in('BaseTbl.masterId', array(691, 696, 697));
                        $query1 = $this->db->get();
                        $count = $query1->num_rows();
                        if ($count > 0) {
                            foreach ($query1->result() as $row1) {
                                $id = $row1->id;
                            }
                            $table1 = 'tbls_pagedetail';
                            if ($department <> 'Inspection') {
                                $result = $this->loginModel->recordAjaxUpdate('id', $id, ['recordLookup' => 0, 'recordEdit' => 0, 'recordView' => 0, 'recordSubmit' => 0], $table1);
                            }
                        }
                    }
                }

                $data['inUseBy'] = 0;
                $data['inUseTime'] = '';
                $result = $this->loginModel->recordAjaxUpdate('id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), ['type' => $data['type'], 'userId' => $data['userId'], 'memberName' => $data['memberName'], 'department' => $data['department'], 'designation' => $data['designation'], 'phone' => $data['phone'], 'email' => $data['email'], 'exitDate' => $data['updateddate'], 'remarks' => $data['remarks'], 'status' => $data['status'], 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate'], 'inUseBy' => $data['inUseBy'], 'inUseTime' => $data['inUseTime']], $table);
            }

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else {
            $this->accessDenied();
            return;
        }
    }

    function inspection($action = NULL, $id = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $myAction = '';
        if ($action == 'submit') {
            if (explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            }
            if (explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            }
            if ($myAction == 'add') {
                $myAction = 'save';
            }
            if ($myAction == 'edit') {
                $myAction = 'update';
            }
        }


        //---------- STAGES ---------
        // * Draft
        // * Inspection Scheduled
        // * Inspection Pending
        // * Initiated
        // * Inspection Completed
        // * Panel Meeting Scheduled
        // * Panel Meeting Pending
        // * Under Review Stage 1
        // * CAPA Awaited From Company
        // * CAPA Received From Company
        // * Under Review Stage 2
        // * Review Complete
        // * Further Information Required
        // * Follow-Up Inspection
        // * Re-Inspection
        // * Deferred and Closed
        // * Approved
        //---------- STAGES ---------

        $table = 'tbl_' . __FUNCTION__;
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        $data['records'] = $this->myModel->$functionName($table, $searchText);
        $data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);
        $data['recordsDetailSection1'] = $this->myModel->inspectionDetailSection1Edit($id);
        $data['recordsDetailSection'] = $this->myModel->inspectionDetailSectionEdit(@$data['recordsEdit'][0]->refId);
        $data['recordsDetailRegistration'] = $this->myModel->inspectionDetailRegistrationEdit($id);
        $data['recordsDetailMember'] = $this->myModel->inspectionDetailMemberEdit($id);
        $data['recordsDetailMemberExternal'] = $this->myModel->inspectionDetailMemberExternalEdit($id);
        $data['recordsDetailMemberPost'] = $this->myModel->inspectionDetailMemberPostEdit($id);
        $data['recordsDetailMemberExternalPost'] = $this->myModel->inspectionDetailMemberExternalPostEdit($id);
        $data['recordsDetailImage'] = $this->myModel->inspectionDetailImageEdit($id);
        $data['recordsDetailMeeting'] = $this->myModel->inspectionDetailMeetingEdit($id);
        $data['recordsDetailManagement'] = $this->myModel->inspectionDetailManagementEdit($id);
        $data['recordsDetailChecklist'] = $this->myModel->inspectionDetailChecklistEdit($id);
        $data['recordsDetailDocumentChecklist'] = $this->myModel->inspectionDetailDocumentChecklistEdit($id);
        $data['recordsDetailChecklistReport'] = $this->myModel->inspectionDetailChecklistReportEdit($id);
        $data['recordsDetailCAPA'] = $this->myModel->inspectionDetailCAPAEdit($id);
        $data['inspectionType'] = $this->myModel->inspectionTypeGet();
        $data['inspectionAllType'] = $this->myModel->inspectionAllTypeGet();
        $data['company'] = $this->myModel->companyGet();
        $data['section'] = $this->myModel->sectionGet();
        $data['registration'] = $this->myModel->registrationGet();
        $data['member'] = $this->myModel->memberGet();
        $data['memberLead'] = $this->myModel->memberLeadGet();
        $data['memberExternal'] = $this->myModel->memberExternalGet();
        $data['companySection'] = $this->myModel->companySectionGet(@$data['recordsEdit'][0]->companyId);
        $data['companyRegistration'] = $this->myModel->companyRegistrationGet(@$data['recordsEdit'][0]->companyId);
        $data['recordsDetailQualifiedStaff'] = $this->myModel->applylicenseDetailQualifiedStaffEdit(@$data['recordsEdit'][0]->refId);
        $data['recordsDetailLayoutPlan'] = $this->myModel->applylicenseDetailLayoutPlanEdit(@$data['recordsEdit'][0]->refId);
        $data['recordsDetailApi'] = $this->myModel->applylicenseDetailApiEdit(@$data['recordsEdit'][0]->refId);
        $data['recordsDetailSectionMachine'] = $this->myModel->applylicenseDetailSectionMachineEdit(@$data['recordsEdit'][0]->refId);
        $data['section'] = $this->myModel->sectionGet();
        $data['pharmaGroup'] = $this->myModel->pharmaGroupGet();
        $data['usedFor'] = $this->myModel->usedForGet();
        // $data['sectionApproved'] = $this->myModel->sectionApprovedGet12(@$data['recordsEdit'][0]->maxApprovedId);
        // $data['pharmaGroupApproved'] = $this->myModel->pharmaGroupApprovedGet12(@$data['recordsEdit'][0]->maxApprovedId);
        // $data['usedForApproved'] = $this->myModel->usedForApprovedGet12(@$data['recordsEdit'][0]->maxApprovedId);
        $data['sectionApproved'] = $this->myModel->sectionApprovedGet11(@$data['recordsEdit'][0]->refId);
        $data['pharmaGroupApproved'] = $this->myModel->pharmaGroupApprovedGet11(@$data['recordsEdit'][0]->refId);
        $data['usedForApproved'] = $this->myModel->usedForApprovedGet11(@$data['recordsEdit'][0]->refId);
        $data['designation'] = $this->myModel->companyDesignationGet();
        $data['qualification'] = $this->myModel->companyQualificationGet();
        $data['specialization'] = $this->myModel->companySpecializationGet();
        //$data['inspectionChecklistSection'] = $this->myModel->inspectionChecklistSectionGet();
        //$data['inspectionChecklistQuestion'] = $this->myModel->inspectionChecklistQuestionGet();
        $data['inspectionImageType'] = $this->myModel->inspectionImageTypesGet();
        $data['checklist'] = $this->myModel->inspectionChecklistGet();

        if ($action == 'lookup' && $recordLookup == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }
            $seenBy = explode(",", $data['recordsEdit'][0]->seenBy);
            if (!(in_array($this->userId, $seenBy))) {
                $this->loginModel->seenByUpdate($id, $this->userId, $table);
            }
            if ($data['recordsEdit'][0]->inspectionStatus == 'Draft') {
                if ($this->roleId <> '36' && $this->roleId <> '12' && $this->roleId <> '6' && $this->roleId <> '7') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->inspectionStatus == 'Inspection Scheduled') {
                if ($this->roleId <> '26') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->inspectionStatus == 'Inspection Pending') {
                if ($data['recordsEdit'][0]->leadUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->inspectionStatus == 'Initiated') {
                if ($data['recordsEdit'][0]->leadUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->inspectionStatus == 'Inspection Completed') {
                if ($this->roleId <> '36' && $this->roleId <> '6' && $this->roleId <> '7') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->inspectionStatus == 'Panel Meeting Scheduled') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->inspectionStatus == 'Panel Meeting Pending') {
                if ($this->roleId <> '36' && $this->roleId <> '6' && $this->roleId <> '7') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->inspectionStatus == 'Under Review Stage 1') {
                if ($this->roleId <> '36' && $this->roleId <> '6' && $this->roleId <> '7') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->inspectionStatus == 'CAPA Awaited From Company') {
                if ($this->roleId <> '26') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->inspectionStatus == 'CAPA Received From Company') {
                if ($data['recordsEdit'][0]->leadUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->inspectionStatus == 'Under Review Stage 2') {
                if ($data['recordsEdit'][0]->leadUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->inspectionStatus == 'Review Complete') {
                if ($this->roleId <> '36' && $this->roleId <> '6' && $this->roleId <> '7') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->inspectionStatus == 'Further Information Required') {
                if ($this->roleId <> '36' && $this->roleId <> '6' && $this->roleId <> '7' && $data['recordsEdit'][0]->leadUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->inspectionStatus == 'Follow-Up Inspection') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->inspectionStatus == 'Re-Inspection') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->inspectionStatus == 'Deferred and Closed') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            if ($data['recordsEdit'][0]->inspectionStatus == 'Approved') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $seenBy = explode(",", $data['recordsEdit'][0]->seenBy);
            if (!(in_array($this->userId, $seenBy))) {
                $this->loginModel->seenByUpdate($id, $this->userId, $table);
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $validationFailed = 0;
            // foreach ($data as $key => $value)
            // {
            //     if($key == 'remarks'){
            //         continue;
            //     }
            //     $this->form_validation->set_rules($key, ucwords(implode(' ', preg_split('/(?=[A-Z])/', $key))), ['required']);
            //     if($key == 'Something'){
            //         // Custom Rule
            //     }
            // }
            if ($this->form_validation->run() == FALSE) {
                $validationFailed = 1;
                $this->session->set_flashdata('error', validation_errors());
            }

            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }

            // Inspection Workflow Save START
            if ($this->roleId == '36') { // Company Submission
                if ($data['inspectionStatus'] == 'Save') {
                    $data['inspectionStatus'] = 'Draft';
                }
            }
            // Inspection Workflow Save END

            unset($data['imageData_1']); // testing purpose

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
            }

            unset($data['undefined']);

            $result = $this->loginModel->recordAjaxSave($data, $table);

            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }

            $sId = 0;
            $keys = array_keys($dataDetailTable);
            foreach (array_keys($dataDetailTable) as $key) {
                $current_key = current($keys);
                $current_value = $dataDetailTable[$current_key];
                $next_key = next($keys);
                $next_value = @$dataDetailTable[$next_key];
                $tableName = substr($current_key, 0, strpos($current_key, '-'));
                $nextTableName = substr($next_key, 0, strpos($next_key, '-'));
                if ($tableName == 'tabledetailmember') {
                    $tableDetail = 'tbl_inspectionmember';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailmemberexternal') {
                    $tableDetail = 'tbl_inspectionmemberexternal';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                $sId++;
            }

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $validationFailed = 0;
            // foreach ($data as $key => $value)
            // {
            //     if($key == 'remarks'){
            //         continue;
            //     }
            //     $this->form_validation->set_rules($key, ucwords(implode(' ', preg_split('/(?=[A-Z])/', $key))), ['required']);
            //     if($key == 'Something'){
            //         // Custom Rule
            //     }
            // }
            if ($this->form_validation->run() == FALSE) {
                $validationFailed = 1;
                $this->session->set_flashdata('error', validation_errors());
            }

            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }

            // Inspection Workflow Update START
            $this->db->select('BaseTbl.id, User.email, User.userName, BaseTbl.refId, Company.id as companyId, Company.companyUniqueNo, BaseTbl.inspectionStatus, InspectionType.inspectionSubType');
            $this->db->from('tbl_inspection as BaseTbl');
            $this->db->join('tbl_inspectiontype as InspectionType', 'InspectionType.id = BaseTbl.inspectionTypeId', 'left');
            $this->db->join('tbl_license as License', 'License.id = BaseTbl.refId', 'left');
            $this->db->join('tbls_company as Company', 'Company.id = BaseTbl.companyId', 'left');
            $this->db->join('tbls_user as User', 'User.companyId = Company.id', 'left');
            $this->db->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    $email = $row->email;
                    $userName = $row->userName;
                    $refId = $row->refId;
                    $companyId = $row->companyId;
                    $companyUniqueNo = $row->companyUniqueNo;
                    $inspectionStatus = $row->inspectionStatus;
                    $inspectionSubType = $row->inspectionSubType;
                }
            }

            if ($this->roleId == '26') { // Company Submission
                if ($data['inspectionStatus'] == 'Save') {
                    $data['inspectionStatus'] = $inspectionStatus;
                }
                if ($data['inspectionStatus'] == 'Submit') {
                    if ($inspectionStatus == 'Inspection Scheduled') {
                        $data['inspectionStatus'] = 'Inspection Pending';
                        //$data['inspectionStatus'] = $inspectionStatus;
                    }
                    if ($inspectionStatus == 'CAPA Awaited From Company') {
                        $data['inspectionStatus'] = 'CAPA Received From Company';
                    }
                }
            }
            if ($this->roleId == '36') { // Inspection Director
                if ($data['inspectionStatus'] == 'Save') {
                    $data['inspectionStatus'] = $inspectionStatus;
                }
                if ($data['inspectionStatus'] == 'Deferred and Closed') {
                    $data['inspectionStatus'] = 'Deferred and Closed';
                }
                if ($data['inspectionStatus'] == 'Proceed') {
                    if ($inspectionStatus == 'Draft' && ($data['inspectionTypeId'] == 12 || $data['inspectionTypeId'] == 5 || $data['inspectionTypeId'] == 6 || $data['inspectionTypeId'] == 7 || $data['inspectionTypeId'] == 8 || $data['inspectionTypeId'] == 9 || $data['inspectionTypeId'] == 13 || $data['inspectionTypeId'] == 14 || $data['inspectionTypeId'] == 15 || $data['inspectionTypeId'] == 19 || $data['inspectionTypeId'] == 22 || $data['inspectionTypeId'] == 23 || $data['inspectionTypeId'] == 24 || $data['inspectionTypeId'] == 25)) {
                        $data['inspectionStatus'] = 'Inspection Scheduled';

                        if ($data['inspectionStatus'] == 'Inspection Scheduled') {
                            if (($data['sendInspectionScheduleToCompany'] == 'No')) {
                                $data['inspectionStatus'] = 'Inspection Pending';
                            }
                            $this->db->select('BaseTbl.id, User.email, User.userName, InspectionType.inspectionSubType');
                            $this->db->from('tbl_inspectionmember as BaseTbl');
                            $this->db->join('tbl_inspection as Inspection', 'Inspection.id = BaseTbl.masterId', 'left');
                            $this->db->join('tbl_inspectiontype as InspectionType', 'InspectionType.id = Inspection.inspectionTypeId', 'left');
                            $this->db->join('tbl_panelpool as PanelPool', 'PanelPool.id = BaseTbl.memberId', 'left');
                            $this->db->join('tbls_user as User', 'User.id = PanelPool.userId', 'left');
                            $this->db->where('BaseTbl.masterId', $result);
                            $query = $this->db->get();
                            foreach ($query->result() as $row) {
                                $id = $row->id;
                                $email = $row->email;
                                $userName = $row->userName;
                                $inspectionSubType = $row->inspectionSubType;
                            }

                            if (isset($email)) {
                                $mailData['from'] = 'DRAP';
                                $mailData['subject'] = 'PIRIMS | Inspection Schedule';
                                $mailData['title'] = 'Greetings, ' . $userName . '!';
                                $mailData['message'] = "The " . $inspectionSubType . " inspection has been scheduled from " . $data['inspectionFromDate'] . " to " . $data['inspectionToDate'] . ". In case of any query please write us at: support.pirims@dra.gov.pk";
                                $mailData['email'] = $email;
                                $sendStatus = emailSend($mailData);
                                if ($sendStatus == true) {
                                    $result = 1;
                                }
                            }
                            if (!isset($email)) {
                                $result = 0;
                            }

                            $this->db->select('BaseTbl.id, PanelPool.email, PanelPool.memberName, InspectionType.inspectionSubType');
                            $this->db->from('tbl_inspectionmemberexternal as BaseTbl');
                            $this->db->join('tbl_inspection as Inspection', 'Inspection.id = BaseTbl.masterId', 'left');
                            $this->db->join('tbl_inspectiontype as InspectionType', 'InspectionType.id = Inspection.inspectionTypeId', 'left');
                            $this->db->join('tbl_panelpool as PanelPool', 'PanelPool.id = BaseTbl.memberId', 'left');
                            $this->db->where('BaseTbl.masterId', $result);
                            $query = $this->db->get();
                            foreach ($query->result() as $row) {
                                $id = $row->id;
                                $email = $row->email;
                                $userName = $row->memberName;
                                $inspectionSubType = $row->inspectionSubType;
                            }

                            if (isset($email)) {
                                $mailData['from'] = 'DRAP';
                                $mailData['subject'] = 'PIRIMS | Inspection Schedule';
                                $mailData['title'] = 'Greetings, ' . $userName . '!';
                                $mailData['message'] = "The " . $inspectionSubType . " inspection has been scheduled from " . $data['inspectionFromDate'] . " to " . $data['inspectionToDate'] . ". In case of any query please write us at: support.pirims@dra.gov.pk";
                                $mailData['email'] = $email;
                                $sendStatus = emailSend($mailData);
                                if ($sendStatus == true) {
                                    $result = 1;
                                }
                            }
                            if (!isset($email)) {
                                $result = 0;
                            }

                            if ($data['sendInspectionScheduleToCompany'] == 'Yes') {
                                $this->db->select('BaseTbl.id, User.email, User.userName, InspectionType.inspectionSubType');
                                $this->db->from('tbl_inspection as BaseTbl');
                                $this->db->join('tbl_inspectiontype as InspectionType', 'InspectionType.id = BaseTbl.inspectionTypeId', 'left');
                                $this->db->join('tbls_company as Company', 'Company.id = BaseTbl.companyId', 'left');
                                $this->db->join('tbls_user as User', 'User.companyId = Company.id', 'left');
                                $this->db->where('BaseTbl.id', $result);
                                $query = $this->db->get();
                                foreach ($query->result() as $row) {
                                    $id = $row->id;
                                    $email = $row->email;
                                    $userName = $row->userName;
                                    $inspectionSubType = $row->inspectionSubType;
                                }

                                if (isset($email)) {
                                    $mailData['from'] = 'DRAP';
                                    $mailData['subject'] = 'PIRIMS | Inspection Schedule';
                                    $mailData['title'] = 'Greetings, ' . $userName . '!';
                                    $mailData['message'] = "The " . $inspectionSubType . " inspection has been scheduled from " . $data['inspectionFromDate'] . " to " . $data['inspectionToDate'] . ". In case of any query please write us at: support.pirims@dra.gov.pk";
                                    $mailData['email'] = $email;
                                    $sendStatus = emailSend($mailData);
                                    if ($sendStatus == true) {
                                        $result = 1;
                                    }
                                }
                                if (!isset($email)) {
                                    $result = 0;
                                }
                            }
                        }
                    }
                    if ($inspectionStatus == 'Inspection Completed' && ($data['inspectionTypeId'] == 12 || $data['inspectionTypeId'] == 13 || $data['inspectionTypeId'] == 14 || $data['inspectionTypeId'] == 15 || $data['inspectionTypeId'] == 19)) {
                        $data['inspectionStatus'] = 'Panel Meeting Scheduled';
                    }
                    if ($inspectionStatus == 'Inspection Completed' && ($data['inspectionTypeId'] == 5 || $data['inspectionTypeId'] == 6 || $data['inspectionTypeId'] == 7 || $data['inspectionTypeId'] == 8 || $data['inspectionTypeId'] == 9)) {
                        $data['inspectionStatus'] = $inspectionStatus;
                    }
                    if ($inspectionStatus == 'Panel Meeting Scheduled') {
                        $data['inspectionStatus'] = $inspectionStatus;
                    }
                    if ($inspectionStatus == 'Panel Meeting Pending' && ($data['inspectionTypeId'] == 12 || $data['inspectionTypeId'] == 5 || $data['inspectionTypeId'] == 6 || $data['inspectionTypeId'] == 7 || $data['inspectionTypeId'] == 8 || $data['inspectionTypeId'] == 9 || $data['inspectionTypeId'] == 13 || $data['inspectionTypeId'] == 14 || $data['inspectionTypeId'] == 15 || $data['inspectionTypeId'] == 19)) {
                        $data['inspectionStatus'] = 'Under Review Stage 1';
                    }
                    if ($inspectionStatus == 'Under Review Stage 1' && ($data['inspectionTypeId'] == 12 || $data['inspectionTypeId'] == 5 || $data['inspectionTypeId'] == 6 || $data['inspectionTypeId'] == 7 || $data['inspectionTypeId'] == 8 || $data['inspectionTypeId'] == 9 || $data['inspectionTypeId'] == 13 || $data['inspectionTypeId'] == 14 || $data['inspectionTypeId'] == 15 || $data['inspectionTypeId'] == 19)) {
                        // $this->db->select('BaseTbl.id');
                        // $this->db->from('tbl_inspectionchecklist as BaseTbl');
                        // $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        // $this->db->where_in('BaseTbl.panelRating', array('Critical', 'Major', 'Minor'));
                        // $query = $this->db->get();
                        // $count = $query->num_rows();
                        // if($count === 0){
                        //     $data['inspectionStatus'] = $inspectionStatus;
                        // }
                        // if($count > 0){
                        //     $data['inspectionStatus'] = 'CAPA Awaited From Company';
                        // }
                        if ($data['panelStatus'] == 'Non-Compliant (NC)') {
                            $data['inspectionStatus'] = 'CAPA Awaited From Company';
                        }
                        if ($data['panelStatus'] == 'Compliant (CAPA Required)') {
                            $data['inspectionStatus'] = 'CAPA Awaited From Company';
                        }
                        if ($data['panelStatus'] == 'Compliant (CAPA Not Required)') {
                            $data['inspectionStatus'] = 'Review Complete';
                        }
                        if ($data['panelStatus'] == 'Follow-Up Inspection Required') {
                            $data['inspectionStatus'] = 'CAPA Awaited From Company';
                        }
                    }
                    if ($inspectionStatus == 'Review Complete') {
                        $data['inspectionStatus'] = $inspectionStatus;
                    }
                }
                if ($data['inspectionStatus'] == 'Further Information Required') {
                    $data['inspectionStatus'] = 'Further Information Required';
                }
                if ($data['inspectionStatus'] == 'Follow-Up Inspection') {
                    if ($inspectionStatus == 'Review Complete' && ($data['inspectionTypeId'] == 12 || $data['inspectionTypeId'] == 5 || $data['inspectionTypeId'] == 6 || $data['inspectionTypeId'] == 7 || $data['inspectionTypeId'] == 8 || $data['inspectionTypeId'] == 9 || $data['inspectionTypeId'] == 13 || $data['inspectionTypeId'] == 14 || $data['inspectionTypeId'] == 15 || $data['inspectionTypeId'] == 19)) {
                        // $this->db->select('BaseTbl.id');
                        // $this->db->from('tbl_inspectionchecklist as BaseTbl');
                        // $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        // $this->db->where_in('BaseTbl.panelRating', array('Critical', 'Major'));
                        // $query = $this->db->get();
                        // $count = $query->num_rows();
                        // if($count === 0){
                        //     $data['inspectionStatus'] = $inspectionStatus;
                        // }
                        // if($count > 0){
                        //     $data['inspectionStatus'] = 'Follow-Up Inspection';

                        //     $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => 16, 'parentId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_inspection');
                        // }
                        $data['inspectionStatus'] = 'Follow-Up Inspection';

                        $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => 16, 'parentId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_inspection');
                    }
                }
                if ($data['inspectionStatus'] == 'Re-Inspection') {
                    if ($inspectionStatus == 'Review Complete' && ($data['inspectionTypeId'] == 12 || $data['inspectionTypeId'] == 5 || $data['inspectionTypeId'] == 6 || $data['inspectionTypeId'] == 7 || $data['inspectionTypeId'] == 8 || $data['inspectionTypeId'] == 9 || $data['inspectionTypeId'] == 13 || $data['inspectionTypeId'] == 14 || $data['inspectionTypeId'] == 15 || $data['inspectionTypeId'] == 19)) {
                        // $this->db->select('BaseTbl.id');
                        // $this->db->from('tbl_inspectionchecklist as BaseTbl');
                        // $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        // $this->db->where_in('BaseTbl.panelRating', array('Critical', 'Major'));
                        // $query = $this->db->get();
                        // $count = $query->num_rows();
                        // if($count === 0){
                        //     $data['inspectionStatus'] = $inspectionStatus;
                        // }
                        // if($count > 0){
                        //     $data['inspectionStatus'] = 'Re-Inspection';

                        //     $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => 17, 'parentId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_inspection');
                        // }
                        $data['inspectionStatus'] = 'Re-Inspection';

                        $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => 17, 'parentId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_inspection');
                    }
                }
                if ($data['inspectionStatus'] == 'Approved') {
                    if ($inspectionStatus == 'Review Complete' && ($data['inspectionTypeId'] == 12 || $data['inspectionTypeId'] == 13 || $data['inspectionTypeId'] == 14 || $data['inspectionTypeId'] == 15 || $data['inspectionTypeId'] == 19)) {
                        $data['inspectionStatus'] = 'Approved';
                    }
                    if ($inspectionStatus == 'Inspection Completed' && ($data['inspectionTypeId'] == 5 || $data['inspectionTypeId'] == 6 || $data['inspectionTypeId'] == 7 || $data['inspectionTypeId'] == 8 || $data['inspectionTypeId'] == 9)) {
                        $data['inspectionStatus'] = 'Approved';
                        if ($data['inspectionTypeId'] == 5) {
                            $this->db->select('BaseTbl.id, BaseTbl.licenseStatus');
                            $this->db->from('tbl_license as BaseTbl');
                            $this->db->where('BaseTbl.id', $refId);
                            $query = $this->db->get();
                            $count = $query->num_rows();
                            if ($count === 0) {
                                $this->session->set_flashdata('error', 'No record found.');
                            }
                            if ($count > 0) {
                                foreach ($query->result() as $row) {
                                    $id = $row->id;
                                    $licenseStatus = $row->licenseStatus;
                                }
                                if ($licenseStatus == 'Under Inspection') {
                                    $resultdetail = $this->loginModel->recordAjaxUpdate('id', $refId, ['licenseStatus' => 'Post Inspection Process', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_license');
                                }
                            }
                        }
                        if ($data['inspectionTypeId'] == 7) {
                            $this->db->select('BaseTbl.id, BaseTbl.licenseStatus');
                            $this->db->from('tbl_license as BaseTbl');
                            $this->db->where('BaseTbl.id', $refId);
                            $query = $this->db->get();
                            $count = $query->num_rows();
                            if ($count === 0) {
                                $this->session->set_flashdata('error', 'No record found.');
                            }
                            if ($count > 0) {
                                foreach ($query->result() as $row) {
                                    $id = $row->id;
                                    $licenseStatus = $row->licenseStatus;
                                }
                                if ($licenseStatus == 'Under Inspection') {
                                    $resultdetail = $this->loginModel->recordAjaxUpdate('id', $refId, ['licenseStatus' => 'Post Inspection Process', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_license');
                                }
                            }
                        }
                        if ($data['inspectionTypeId'] == 8) {
                            $this->db->select('BaseTbl.id, BaseTbl.renewalStatus');
                            $this->db->from('tbl_license as BaseTbl');
                            $this->db->where('BaseTbl.id', $refId);
                            $query = $this->db->get();
                            $count = $query->num_rows();
                            if ($count === 0) {
                                $this->session->set_flashdata('error', 'No record found.');
                            }
                            if ($count > 0) {
                                foreach ($query->result() as $row) {
                                    $id = $row->id;
                                    $renewalStatus = $row->renewalStatus;
                                }
                                if ($renewalStatus == 'Under Inspection') {
                                    $resultdetail = $this->loginModel->recordAjaxUpdate('id', $refId, ['renewalStatus' => 'Post Inspection Process', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_license');
                                }
                            }
                        }
                        if ($data['inspectionTypeId'] == 9) {
                            $this->db->select('BaseTbl.id, BaseTbl.postchangeStatus');
                            $this->db->from('tbl_license as BaseTbl');
                            $this->db->where('BaseTbl.id', $refId);
                            $query = $this->db->get();
                            $count = $query->num_rows();
                            if ($count === 0) {
                                $this->session->set_flashdata('error', 'No record found.');
                            }
                            if ($count > 0) {
                                foreach ($query->result() as $row) {
                                    $id = $row->id;
                                    $postchangeStatus = $row->postchangeStatus;
                                }
                                if ($postchangeStatus == 'Under Inspection') {
                                    $resultdetail = $this->loginModel->recordAjaxUpdate('id', $refId, ['postchangeStatus' => 'Post Inspection Process', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_license');
                                }
                            }
                        }
                    }
                }
            }
            if ($this->roleId == '12') { // Inspection Additional Director
                if ($data['inspectionStatus'] == 'Save') {
                    $data['inspectionStatus'] = $inspectionStatus;
                }
                if ($data['inspectionStatus'] == 'Deferred and Closed') {
                    $data['inspectionStatus'] = 'Deferred and Closed';
                }
                if ($data['inspectionStatus'] == 'Proceed') {
                    if ($inspectionStatus == 'Draft' && ($data['inspectionTypeId'] == 12 || $data['inspectionTypeId'] == 5 || $data['inspectionTypeId'] == 6 || $data['inspectionTypeId'] == 7 || $data['inspectionTypeId'] == 8 || $data['inspectionTypeId'] == 9 || $data['inspectionTypeId'] == 13 || $data['inspectionTypeId'] == 14 || $data['inspectionTypeId'] == 15 || $data['inspectionTypeId'] == 19 || $data['inspectionTypeId'] == 22 || $data['inspectionTypeId'] == 23 || $data['inspectionTypeId'] == 24 || $data['inspectionTypeId'] == 25)) {
                        $data['inspectionStatus'] = 'Inspection Scheduled';

                        if ($data['inspectionStatus'] == 'Inspection Scheduled') {
                            if (($data['sendInspectionScheduleToCompany'] == 'No')) {
                                $data['inspectionStatus'] = 'Inspection Pending';
                            }
                            $this->db->select('BaseTbl.id, User.email, User.userName, InspectionType.inspectionSubType');
                            $this->db->from('tbl_inspectionmember as BaseTbl');
                            $this->db->join('tbl_inspection as Inspection', 'Inspection.id = BaseTbl.masterId', 'left');
                            $this->db->join('tbl_inspectiontype as InspectionType', 'InspectionType.id = Inspection.inspectionTypeId', 'left');
                            $this->db->join('tbl_panelpool as PanelPool', 'PanelPool.id = BaseTbl.memberId', 'left');
                            $this->db->join('tbls_user as User', 'User.id = PanelPool.userId', 'left');
                            $this->db->where('BaseTbl.masterId', $result);
                            $query = $this->db->get();
                            foreach ($query->result() as $row) {
                                $id = $row->id;
                                $email = $row->email;
                                $userName = $row->userName;
                                $inspectionSubType = $row->inspectionSubType;
                            }

                            if (isset($email)) {
                                $mailData['from'] = 'DRAP';
                                $mailData['subject'] = 'PIRIMS | Inspection Schedule';
                                $mailData['title'] = 'Greetings, ' . $userName . '!';
                                $mailData['message'] = "The " . $inspectionSubType . " inspection has been scheduled from " . $data['inspectionFromDate'] . " to " . $data['inspectionToDate'] . ". In case of any query please write us at: support.pirims@dra.gov.pk";
                                $mailData['email'] = $email;
                                $sendStatus = emailSend($mailData);
                                if ($sendStatus == true) {
                                    $result = 1;
                                }
                            }
                            if (!isset($email)) {
                                $result = 0;
                            }

                            $this->db->select('BaseTbl.id, PanelPool.email, PanelPool.memberName, InspectionType.inspectionSubType');
                            $this->db->from('tbl_inspectionmemberexternal as BaseTbl');
                            $this->db->join('tbl_inspection as Inspection', 'Inspection.id = BaseTbl.masterId', 'left');
                            $this->db->join('tbl_inspectiontype as InspectionType', 'InspectionType.id = Inspection.inspectionTypeId', 'left');
                            $this->db->join('tbl_panelpool as PanelPool', 'PanelPool.id = BaseTbl.memberId', 'left');
                            $this->db->where('BaseTbl.masterId', $result);
                            $query = $this->db->get();
                            foreach ($query->result() as $row) {
                                $id = $row->id;
                                $email = $row->email;
                                $userName = $row->memberName;
                                $inspectionSubType = $row->inspectionSubType;
                            }

                            if (isset($email)) {
                                $mailData['from'] = 'DRAP';
                                $mailData['subject'] = 'PIRIMS | Inspection Schedule';
                                $mailData['title'] = 'Greetings, ' . $userName . '!';
                                $mailData['message'] = "The " . $inspectionSubType . " inspection has been scheduled from " . $data['inspectionFromDate'] . " to " . $data['inspectionToDate'] . ". In case of any query please write us at: support.pirims@dra.gov.pk";
                                $mailData['email'] = $email;
                                $sendStatus = emailSend($mailData);
                                if ($sendStatus == true) {
                                    $result = 1;
                                }
                            }
                            if (!isset($email)) {
                                $result = 0;
                            }

                            if ($data['sendInspectionScheduleToCompany'] == 'Yes') {
                                $this->db->select('BaseTbl.id, User.email, User.userName, InspectionType.inspectionSubType');
                                $this->db->from('tbl_inspection as BaseTbl');
                                $this->db->join('tbl_inspectiontype as InspectionType', 'InspectionType.id = BaseTbl.inspectionTypeId', 'left');
                                $this->db->join('tbls_company as Company', 'Company.id = BaseTbl.companyId', 'left');
                                $this->db->join('tbls_user as User', 'User.companyId = Company.id', 'left');
                                $this->db->where('BaseTbl.id', $result);
                                $query = $this->db->get();
                                foreach ($query->result() as $row) {
                                    $id = $row->id;
                                    $email = $row->email;
                                    $userName = $row->userName;
                                    $inspectionSubType = $row->inspectionSubType;
                                }

                                if (isset($email)) {
                                    $mailData['from'] = 'DRAP';
                                    $mailData['subject'] = 'PIRIMS | Inspection Schedule';
                                    $mailData['title'] = 'Greetings, ' . $userName . '!';
                                    $mailData['message'] = "The " . $inspectionSubType . " inspection has been scheduled from " . $data['inspectionFromDate'] . " to " . $data['inspectionToDate'] . ". In case of any query please write us at: support.pirims@dra.gov.pk";
                                    $mailData['email'] = $email;
                                    $sendStatus = emailSend($mailData);
                                    if ($sendStatus == true) {
                                        $result = 1;
                                    }
                                }
                                if (!isset($email)) {
                                    $result = 0;
                                }
                            }
                        }
                    }
                    if ($inspectionStatus == 'Inspection Completed' && ($data['inspectionTypeId'] == 12 || $data['inspectionTypeId'] == 13 || $data['inspectionTypeId'] == 14 || $data['inspectionTypeId'] == 15 || $data['inspectionTypeId'] == 19)) {
                        $data['inspectionStatus'] = 'Panel Meeting Scheduled';
                    }
                    if ($inspectionStatus == 'Inspection Completed' && ($data['inspectionTypeId'] == 5 || $data['inspectionTypeId'] == 6 || $data['inspectionTypeId'] == 7 || $data['inspectionTypeId'] == 8 || $data['inspectionTypeId'] == 9)) {
                        $data['inspectionStatus'] = $inspectionStatus;
                    }
                    if ($inspectionStatus == 'Panel Meeting Scheduled') {
                        $data['inspectionStatus'] = $inspectionStatus;
                    }
                    if ($inspectionStatus == 'Panel Meeting Pending' && ($data['inspectionTypeId'] == 12 || $data['inspectionTypeId'] == 5 || $data['inspectionTypeId'] == 6 || $data['inspectionTypeId'] == 7 || $data['inspectionTypeId'] == 8 || $data['inspectionTypeId'] == 9 || $data['inspectionTypeId'] == 13 || $data['inspectionTypeId'] == 14 || $data['inspectionTypeId'] == 15 || $data['inspectionTypeId'] == 19)) {
                        $data['inspectionStatus'] = 'Under Review Stage 1';
                    }
                    if ($inspectionStatus == 'Under Review Stage 1' && ($data['inspectionTypeId'] == 12 || $data['inspectionTypeId'] == 5 || $data['inspectionTypeId'] == 6 || $data['inspectionTypeId'] == 7 || $data['inspectionTypeId'] == 8 || $data['inspectionTypeId'] == 9 || $data['inspectionTypeId'] == 13 || $data['inspectionTypeId'] == 14 || $data['inspectionTypeId'] == 15 || $data['inspectionTypeId'] == 19)) {
                        // $this->db->select('BaseTbl.id');
                        // $this->db->from('tbl_inspectionchecklist as BaseTbl');
                        // $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        // $this->db->where_in('BaseTbl.panelRating', array('Critical', 'Major', 'Minor'));
                        // $query = $this->db->get();
                        // $count = $query->num_rows();
                        // if($count === 0){
                        //     $data['inspectionStatus'] = $inspectionStatus;
                        // }
                        // if($count > 0){
                        //     $data['inspectionStatus'] = 'CAPA Awaited From Company';
                        // }
                        if ($data['panelStatus'] == 'Non-Compliant (NC)') {
                            $data['inspectionStatus'] = 'CAPA Awaited From Company';
                        }
                        if ($data['panelStatus'] == 'Compliant (CAPA Required)') {
                            $data['inspectionStatus'] = 'CAPA Awaited From Company';
                        }
                        if ($data['panelStatus'] == 'Compliant (CAPA Not Required)') {
                            $data['inspectionStatus'] = 'Review Complete';
                        }
                        if ($data['panelStatus'] == 'Follow-Up Inspection Required') {
                            $data['inspectionStatus'] = 'CAPA Awaited From Company';
                        }
                    }
                    if ($inspectionStatus == 'Review Complete') {
                        $data['inspectionStatus'] = $inspectionStatus;
                    }
                }
                if ($data['inspectionStatus'] == 'Further Information Required') {
                    $data['inspectionStatus'] = 'Further Information Required';
                }
                if ($data['inspectionStatus'] == 'Follow-Up Inspection') {
                    if ($inspectionStatus == 'Review Complete' && ($data['inspectionTypeId'] == 12 || $data['inspectionTypeId'] == 5 || $data['inspectionTypeId'] == 6 || $data['inspectionTypeId'] == 7 || $data['inspectionTypeId'] == 8 || $data['inspectionTypeId'] == 9 || $data['inspectionTypeId'] == 13 || $data['inspectionTypeId'] == 14 || $data['inspectionTypeId'] == 15 || $data['inspectionTypeId'] == 19)) {
                        // $this->db->select('BaseTbl.id');
                        // $this->db->from('tbl_inspectionchecklist as BaseTbl');
                        // $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        // $this->db->where_in('BaseTbl.panelRating', array('Critical', 'Major'));
                        // $query = $this->db->get();
                        // $count = $query->num_rows();
                        // if($count === 0){
                        //     $data['inspectionStatus'] = $inspectionStatus;
                        // }
                        // if($count > 0){
                        //     $data['inspectionStatus'] = 'Follow-Up Inspection';

                        //     $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => 16, 'parentId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_inspection');
                        // }
                        $data['inspectionStatus'] = 'Follow-Up Inspection';

                        $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => 16, 'parentId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_inspection');
                    }
                }
                if ($data['inspectionStatus'] == 'Re-Inspection') {
                    if ($inspectionStatus == 'Review Complete' && ($data['inspectionTypeId'] == 12 || $data['inspectionTypeId'] == 5 || $data['inspectionTypeId'] == 6 || $data['inspectionTypeId'] == 7 || $data['inspectionTypeId'] == 8 || $data['inspectionTypeId'] == 9 || $data['inspectionTypeId'] == 13 || $data['inspectionTypeId'] == 14 || $data['inspectionTypeId'] == 15 || $data['inspectionTypeId'] == 19)) {
                        // $this->db->select('BaseTbl.id');
                        // $this->db->from('tbl_inspectionchecklist as BaseTbl');
                        // $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        // $this->db->where_in('BaseTbl.panelRating', array('Critical', 'Major'));
                        // $query = $this->db->get();
                        // $count = $query->num_rows();
                        // if($count === 0){
                        //     $data['inspectionStatus'] = $inspectionStatus;
                        // }
                        // if($count > 0){
                        //     $data['inspectionStatus'] = 'Re-Inspection';

                        //     $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => 17, 'parentId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_inspection');
                        // }
                        $data['inspectionStatus'] = 'Re-Inspection';

                        $resultdetail = $this->loginModel->recordAjaxSave(['inspectionTypeId' => 17, 'parentId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'companyId' => $companyId, 'inspectionStatus' => 'Draft', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_inspection');
                    }
                }
                if ($data['inspectionStatus'] == 'Approved') {
                    if ($inspectionStatus == 'Review Complete' && ($data['inspectionTypeId'] == 12 || $data['inspectionTypeId'] == 13 || $data['inspectionTypeId'] == 14 || $data['inspectionTypeId'] == 15 || $data['inspectionTypeId'] == 19)) {
                        $data['inspectionStatus'] = 'Approved';
                    }
                    if ($inspectionStatus == 'Inspection Completed' && ($data['inspectionTypeId'] == 5 || $data['inspectionTypeId'] == 6 || $data['inspectionTypeId'] == 7 || $data['inspectionTypeId'] == 8 || $data['inspectionTypeId'] == 9)) {
                        $data['inspectionStatus'] = 'Approved';
                        if ($data['inspectionTypeId'] == 5) {
                            $this->db->select('BaseTbl.id, BaseTbl.licenseStatus');
                            $this->db->from('tbl_license as BaseTbl');
                            $this->db->where('BaseTbl.id', $refId);
                            $query = $this->db->get();
                            $count = $query->num_rows();
                            if ($count === 0) {
                                $this->session->set_flashdata('error', 'No record found.');
                            }
                            if ($count > 0) {
                                foreach ($query->result() as $row) {
                                    $id = $row->id;
                                    $licenseStatus = $row->licenseStatus;
                                }
                                if ($licenseStatus == 'Under Inspection') {
                                    $resultdetail = $this->loginModel->recordAjaxUpdate('id', $refId, ['licenseStatus' => 'Post Inspection Process', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_license');
                                }
                            }
                        }
                        if ($data['inspectionTypeId'] == 7) {
                            $this->db->select('BaseTbl.id, BaseTbl.licenseStatus');
                            $this->db->from('tbl_license as BaseTbl');
                            $this->db->where('BaseTbl.id', $refId);
                            $query = $this->db->get();
                            $count = $query->num_rows();
                            if ($count === 0) {
                                $this->session->set_flashdata('error', 'No record found.');
                            }
                            if ($count > 0) {
                                foreach ($query->result() as $row) {
                                    $id = $row->id;
                                    $licenseStatus = $row->licenseStatus;
                                }
                                if ($licenseStatus == 'Under Inspection') {
                                    $resultdetail = $this->loginModel->recordAjaxUpdate('id', $refId, ['licenseStatus' => 'Post Inspection Process', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_license');
                                }
                            }
                        }
                        if ($data['inspectionTypeId'] == 8) {
                            $this->db->select('BaseTbl.id, BaseTbl.renewalStatus');
                            $this->db->from('tbl_license as BaseTbl');
                            $this->db->where('BaseTbl.id', $refId);
                            $query = $this->db->get();
                            $count = $query->num_rows();
                            if ($count === 0) {
                                $this->session->set_flashdata('error', 'No record found.');
                            }
                            if ($count > 0) {
                                foreach ($query->result() as $row) {
                                    $id = $row->id;
                                    $renewalStatus = $row->renewalStatus;
                                }
                                if ($renewalStatus == 'Under Inspection') {
                                    $resultdetail = $this->loginModel->recordAjaxUpdate('id', $refId, ['renewalStatus' => 'Post Inspection Process', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_license');
                                }
                            }
                        }
                        if ($data['inspectionTypeId'] == 9) {
                            $this->db->select('BaseTbl.id, BaseTbl.postchangeStatus');
                            $this->db->from('tbl_license as BaseTbl');
                            $this->db->where('BaseTbl.id', $refId);
                            $query = $this->db->get();
                            $count = $query->num_rows();
                            if ($count === 0) {
                                $this->session->set_flashdata('error', 'No record found.');
                            }
                            if ($count > 0) {
                                foreach ($query->result() as $row) {
                                    $id = $row->id;
                                    $postchangeStatus = $row->postchangeStatus;
                                }
                                if ($postchangeStatus == 'Under Inspection') {
                                    $resultdetail = $this->loginModel->recordAjaxUpdate('id', $refId, ['postchangeStatus' => 'Post Inspection Process', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_license');
                                }
                            }
                        }
                    }
                }
            }
            $userId = '';
            $this->db->select('BaseTbl.id, PanelPool.userId');
            $this->db->from('tbl_inspectionmember as BaseTbl');
            $this->db->join('tbl_panelpool as PanelPool', 'PanelPool.id = BaseTbl.memberId', 'left');
            $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
            $this->db->where('BaseTbl.isLead', 'Yes');
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    $userId = $row->userId;
                }
            }
            if ($this->userId == $userId) {
                if ($data['inspectionStatus'] == 'Save') {
                    $data['inspectionStatus'] = $inspectionStatus;
                }
                if ($data['inspectionStatus'] == 'Proceed') {
                    if ($inspectionStatus == 'Inspection Pending') {
                        $data['inspectionStatus'] = 'Initiated';
                    }
                    if ($inspectionStatus == 'Initiated') {
                        $data['inspectionStatus'] = 'Inspection Completed';
                        // ------------------- Send Mail Start -------------------
                        $inspDirector = $this->myModel->getRecords('tbls_user', 'id', 121);
                        //$inspLead = $this->myModel->getRecords('tbls_user','id',$userId);

                        if (isset($inspDirector[0]->email)) {
                            $mailData['from'] = 'DRAP';
                            $mailData['subject'] = 'PIRIMS | Inspection';
                            $mailData['title'] = 'Greetings, ' . $inspDirector[0]->userName . '!';
                            $mailData['message'] = " Following the inspection, " . $this->userName . " has marked the inspection completed. Please log into PIRIMS to complete the inspection. ";
                            $mailData['email'] = $inspDirector[0]->email;
                            $sendStatus = emailSend($mailData);
                            if ($sendStatus == true) {
                                $result = 1;
                            }
                        }
                        if (!isset($inspDirector[0]->email)) {
                            $result = 0;
                        }
                        // ------------------- Send Mail End -------------------

                    }
                    if ($inspectionStatus == 'CAPA Received From Company') {
                        $data['inspectionStatus'] = 'Under Review Stage 2';
                    }
                    if ($inspectionStatus == 'Under Review Stage 2') {
                        $data['inspectionStatus'] = 'Review Complete';
                    }
                }
                if ($data['inspectionStatus'] == 'Further Information Required') {
                    $data['inspectionStatus'] = 'Further Information Required';
                }
            }
            if ($this->roleId == '12') { // Inspection Additional Director
            }
            if ($this->roleId == '37') { // Inspection Deputy Director
            }
            if ($this->roleId == '16') { // Inspection FID
            }
            if ($this->roleId == '20') { // Inspection Assistant Director
            }
            if ($this->roleId == '18') { // Licensing Assistant Director
            }
            if ($this->roleId == '19') { // Registration Assistant Director
            }
            if ($this->roleId == '42') { // CEO

            }
            // Inspection Workflow Update END

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $companyUniqueNo, 'docs');
                }
            }

            unset($data['imageData_1']); // testing purpose
            unset($data['undefined']); // testing purpose

            $result = $this->loginModel->recordAjaxUpdate('id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), $data, $table);

            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }

            $sId = 0;
            $keys = array_keys($dataDetailTable);
            foreach (array_keys($dataDetailTable) as $key) {
                $current_key = current($keys);
                $current_value = $dataDetailTable[$current_key];
                $next_key = next($keys);
                $next_value = @$dataDetailTable[$next_key];
                $tableName = substr($current_key, 0, strpos($current_key, '-'));
                $nextTableName = substr($next_key, 0, strpos($next_key, '-'));
                if ($tableName == 'tabledetailmember') {
                    $tableDetail = 'tbl_inspectionmember';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailmemberexternal') {
                    $tableDetail = 'tbl_inspectionmemberexternal';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailsections1') {
                    $tableDetail = 'tbl_licensesection';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = $refId;
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailimage1') {
                    $tableDetail = 'tbl_inspectionimage';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailmeeting') {
                    $tableDetail = 'tbl_inspectionmeeting';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetaildocumentchecklist') {
                    $tableDetail = 'tbl_inspectiondocumentchecklist';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailmemberpost') {
                    $tableDetail = 'tbl_inspectionmemberpost';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailmemberexternalpost') {
                    $tableDetail = 'tbl_inspectionmemberexternalpost';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                $sId++;
            }

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else {
            $this->accessDenied();
            return;
        }
    }

    function inspectionchecklist($action = NULL, $id = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $myAction = '';
        //if($action == 'submit'){
        // if(explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__){
        //     $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
        // }
        // if(explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__){
        //     $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
        // }
        // if($myAction == 'add'){
        //     $myAction = 'save';
        // }
        //if($myAction == 'edit'){
        $myAction = 'update';
        //}
        //}

        $table = 'tbl_inspection';
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        //$data['records'] = $this->myModel->$functionName($table, $searchText);
        $data['recordsEdit'] = $this->myModel->inspectionEdit($id, $table);
        $data['recordsDetailChecklist'] = $this->myModel->inspectionDetailChecklistEdit($id);
        $data['inspectionChecklistSection'] = $this->myModel->inspectionChecklistSectionGet();
        $data['inspectionChecklistQuestion'] = $this->myModel->inspectionChecklistQuestionGet();

        if ($action == 'lookup' && $recordLookup == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            // $seenBy = explode(",",$data['recordsEdit'][0]->seenBy);
            // if(!(in_array($this->userId, $seenBy))){
            //     $this->loginModel->seenByUpdate($id, $this->userId, $table);
            // }
            if ($data['recordsEdit'][0]->inspectionStatus <> 'Initiated') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $seenBy = explode(",", $data['recordsEdit'][0]->seenBy);
            if (!(in_array($this->userId, $seenBy))) {
                $this->loginModel->seenByUpdate($id, $this->userId, $table);
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            //$result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $validationFailed = 0;
            // foreach ($data as $key => $value)
            // {
            //     if($key == 'remarks'){
            //         continue;
            //     }
            //     $this->form_validation->set_rules($key, ucwords(implode(' ', preg_split('/(?=[A-Z])/', $key))), ['required']);
            //     if($key == 'Something'){
            //         // Custom Rule
            //     }
            // }
            if ($this->form_validation->run() == FALSE) {
                $validationFailed = 1;
                $this->session->set_flashdata('error', validation_errors());
            }

            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            //$result = $this->loginModel->recordAjaxSave($data, $table);

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $validationFailed = 0;
            // foreach ($data as $key => $value)
            // {
            //     if($key == 'remarks'){
            //         continue;
            //     }
            //     $this->form_validation->set_rules($key, ucwords(implode(' ', preg_split('/(?=[A-Z])/', $key))), ['required']);
            //     if($key == 'Something'){
            //         // Custom Rule
            //     }
            // }
            if ($this->form_validation->run() == FALSE) {
                $validationFailed = 1;
                $this->session->set_flashdata('error', validation_errors());
            }

            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            $result = $this->loginModel->recordAjaxUpdate('id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), ['updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], $table);

            $tableName = 'tabledetailchecklist-';
            $datadetail['id'] = $data[$tableName . 'id_detail'];
            $datadetail['checklistId'] = $data[$tableName . 'checklistId_detail'];
            $datadetail['marks'] = $data[$tableName . 'marks_detail'];
            $datadetail['inspectorRemarks'] = $data[$tableName . 'inspectorRemarks_detail'];
            $datadetail['inspectorRating'] = $data[$tableName . 'inspectorRating_detail'];
            $idColumn = 'id';
            $table = 'tbl_inspectionchecklist';
            $keys = array_keys($datadetail);
            $rows = [];
            for ($i = 0, $len = count($datadetail[$keys[0]]); $i < $len; $i++) {
                $rows[$i] = [];
                foreach ($keys as $key) {
                    $rows[$i][$key] = isset($datadetail[$key][$i]) ? $datadetail[$key][$i] : 'n/a';
                }
            }
            for ($row = 0, $cnt = count($rows); $row < $cnt; $row++) {
                $column_data = $rows[$row];
                $column_keys = array_keys($column_data);
                $id = $column_data[$idColumn];
                $id = trim($id);
                $queryCheck = $this->db->get_where($table, array($idColumn => $id, 'masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'isDeleted' => 0));
                $count = $queryCheck->num_rows();
                if ($count === 0) {
                    foreach ($column_keys as $key) {
                        $datainsert[$key] = $column_data[$key];
                    }
                    $datainsert['createdby'] = $this->userId;
                    $datainsert['createddate'] = date($this->dateTimeFormat);
                    unset($datainsert['id']);
                    $datainsert['masterId'] = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    $resultdetail = $this->loginModel->recordAjaxSave($datainsert, $table);
                }
                if ($count > 0) {
                    foreach ($column_keys as $key) {
                        $dataupdate[$key] = $column_data[$key];
                    }
                    $dataupdate['updatedby'] = $this->userId;
                    $dataupdate['updateddate'] = date($this->dateTimeFormat);
                    unset($dataupdate['id']);
                    $resultdetail = $this->loginModel->recordAjaxUpdate($idColumn, $id, $dataupdate, $table);
                }
            }
            unset($datadetail);
            unset($rows);
            unset($column_data);
            unset($column_keys);
            unset($datainsert);
            unset($dataupdate);

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            //redirect(__FUNCTION__.'/lookup');
            echo "<script>window.close();</script>";
        } else {
            $this->accessDenied();
            return;
        }
    }

    function agendaandminutes($action = NULL, $id = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $myAction = '';
        if ($action == 'submit') {
            // if(explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__){
            //     $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            // }
            // if(explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__){
            //     $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            // }
            // if($myAction == 'add'){
            //     $myAction = 'save';
            // }
            //if($myAction == 'edit'){
            $myAction = 'update';
            //}
        }

        $table = 'tbl_' . __FUNCTION__;
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        $data['records'] = $this->myModel->$functionName($table, $searchText);
        //$data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);

        if ($action == 'lookup' && $recordLookup == 1) {
            if ($this->roleId == 43 || $this->roleId == 44) {
                if ($id) {
                    $data['records'] = $this->myModel->$functionName($table, $id);

                    $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);

                } else {
                    $data['pageTitle'][0]->friendlyName = 'Meetings';
                    $this->loadViews('company/' . $this->companyName . '/meeting' . __FUNCTION__, $this->global, $data, NULL);

                }
            } else {
                $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);

            }
        } else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            $result = $this->loginModel->recordAjaxSave($data, $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            $tableName = 'table-';
            $datadetail['id'] = $data[$tableName . 'id_detail'];
            $datadetail['type'] = $data[$tableName . 'type_detail'];
            if ($this->roleId == '18' || $this->roleId == '19') {
                $datadetail['discussInBoard'] = $data[$tableName . 'discussInBoard_detail'];
            }
            if ($this->roleId == '43' || $this->roleId == '44') {
                $datadetail['agendaid'] = $data[$tableName . 'agendaid_detail'];
                $datadetail['meetingid'] = $data[$tableName . 'meetingid_detail'];
                $datadetail['remarks'] = $data[$tableName . 'remarks_detail'];
                $datadetail['status'] = $data[$tableName . 'status_detail'];
            }

            $idColumn = 'id';
            if ($this->roleId == '18') {
                $table = 'tbl_license';
            }
            if ($this->roleId == '19') {
                $table = 'tbl_registration';
            }
            if ($this->roleId == '43') {
                $table = 'tbl_licensemeeting';
            }
            if ($this->roleId == '44') {
                $table = 'tbl_registrationmeeting';
            }
            $keys = array_keys($datadetail);
            $rows = [];
            for ($i = 0, $len = count($datadetail[$keys[0]]); $i < $len; $i++) {
                $rows[$i] = [];
                foreach ($keys as $key) {
                    $rows[$i][$key] = $datadetail[$key][$i];
                }
            }
            $meetingid = 0;

            foreach ($rows as $rowdata) {
                $meetingid = $rowdata['meetingid'];
                $result = $this->loginModel->recordAjaxUpdate('id', $rowdata['agendaid'], ['remarks' => $rowdata['remarks'], 'status' => $rowdata['status'], 'updatedby' => $this->userId, 'updateddate' => date($this->dateTimeFormat)], 'tbl_meetingagenda');
                if ($rowdata['status'] == 'Approved') {
                    if ($rowdata['type'] == 'License') {
                        $result = $this->loginModel->recordAjaxUpdate('id', $rowdata['id'], ['licenseStatus' => 'Recommended By Board Stage 3', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_license');
                    }
                    if ($rowdata['type'] == 'License Renewal') {
                        $result = $this->loginModel->recordAjaxUpdate('id', $rowdata['id'], ['renewalStatus' => 'Recommended By Board Stage 3', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_license');
                    }
                    if ($rowdata['type'] == 'Post License Change') {
                        $result = $this->loginModel->recordAjaxUpdate('id', $rowdata['id'], ['postchangeStatus' => 'Recommended By Board Stage 3', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_license');
                    }
                    if ($dataupdate['type'] == 'Registration') {
                        $result = $this->loginModel->recordAjaxUpdate('id', $rowdata['id'], ['registrationStatus' => 'Recommended By Board Stage 3', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_registration');
                    }
                    if ($dataupdate['type'] == 'Registration Renewal') {
                        $result = $this->loginModel->recordAjaxUpdate('id', $rowdata['id'], ['renewalStatus' => 'Recommended By Board Stage 3', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_registration');
                    }
                    if ($dataupdate['type'] == 'Post Registration Change') {
                        $result = $this->loginModel->recordAjaxUpdate('id', $rowdata['id'], ['postchangeStatus' => 'Recommended By Board Stage 3', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_registration');
                    }
                }
            }
            if ($this->roleId == 43 && $meetingid > 0) {
                $resultdetail = $this->loginModel->recordAjaxUpdate('id', $meetingid, ['isheld' => 1, 'updatedby' => $this->userId, 'updateddate' => date($this->dateTimeFormat)], 'tbl_licensemeeting');
            }
            if ($this->roleId == 44 && $meetingid > 0) {
                $resultdetail = $this->loginModel->recordAjaxUpdate('id', $meetingid, ['isheld' => 1, 'updatedby' => $this->userId, 'updateddate' => date($this->dateTimeFormat)], 'tbl_registrationmeeting');
            }

            /*
            for($row = 0, $cnt = count($rows); $row < $cnt; $row++){
                $column_data = $rows[$row];
                $column_keys = array_keys($column_data);
                $id = $column_data[$idColumn];
                if($this->roleId == '18'){
                    $this->db->select('BaseTbl.id');
                    $this->db->from('tbl_licensemeeting as BaseTbl');
                    $this->db->where('BaseTbl.masterId', $id);
                    $this->db->limit(1);
                    $this->db->order_by('BaseTbl.id', 'desc');
                    $query = $this->db->get();
                    $count = $query->num_rows();
                    if($count === 0){
                        $this->session->set_flashdata('error', 'No record found.');
                        $result = 0;
                    }
                    if($count > 0){
                        foreach ($query->result() as $row){
                            $detailId = $row->id;
                        }
                        foreach($column_keys as $key){
                           $dataupdate[$key] = $column_data[$key];
                       }
                       $dataupdate['updatedby'] = $this->userId;
                       $dataupdate['updateddate'] = date($this->dateTimeFormat);
                       $dataupdate['meetingNo'] = $data['meetingNo'];
                       $dataupdate['meetingDate'] = date($this->dateFormat);
                       unset($dataupdate['id']);
                       unset($dataupdate['type']);
                       $resultdetail = $this->loginModel->recordAjaxUpdate($idColumn, $detailId, $dataupdate, 'tbl_licensemeeting');
                    }
                    $result = $this->loginModel->recordAjaxUpdate('id', $id, ['discussInBoard' => 1, 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_license');
                }
                if($this->roleId == '44' || $this->roleId == '19'){
                    $this->db->select('BaseTbl.id');
                    $this->db->from('tbl_registrationmeeting as BaseTbl');
                    $this->db->where('BaseTbl.masterId', $id);
                    $this->db->limit(1);
                    $this->db->order_by('BaseTbl.id', 'desc');
                    $query = $this->db->get();
                    $count = $query->num_rows();
                    if($count === 0){
                        $this->session->set_flashdata('error', 'No record found.');
                        $result = 0;
                    }
                    if($count > 0){
                        foreach ($query->result() as $row){
                            $detailId = $row->id;
                        }
                        foreach($column_keys as $key){
                           $dataupdate[$key] = $column_data[$key];
                       }
                       $dataupdate['updatedby'] = $this->userId;
                       $dataupdate['updateddate'] = date($this->dateTimeFormat);
                       $dataupdate['meetingNo'] = $data['meetingNo'];
                       //$dataupdate['meetingDate'] = date($this->dateFormat);
                       $dataupdate['meetingDate'] = $data['meetingDate'];
                       unset($dataupdate['id']);
                       unset($dataupdate['type']);
                       $resultdetail = $this->loginModel->recordAjaxUpdate($idColumn, $detailId, $dataupdate, 'tbl_registrationmeeting');
                    }
                    $result = $this->loginModel->recordAjaxUpdate('id', $id, ['discussInBoard' => 1, 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_registration');
                }
                if($this->roleId == '43'){
                    $this->db->select('BaseTbl.id');
                    $this->db->from('tbl_licensemeeting as BaseTbl');
                    $this->db->where('BaseTbl.masterId', $id);
                    $this->db->limit(1);
                    $this->db->order_by('BaseTbl.id', 'desc');
                    $query = $this->db->get();
                    $count = $query->num_rows();
                    if($count === 0){
                        $this->session->set_flashdata('error', 'No record found.');
                        $result = 0;
                    }
                    if($count > 0){
                        foreach ($query->result() as $row){
                            $detailId = $row->id;
                        }
                        foreach($column_keys as $key){
                           $dataupdate[$key] = $column_data[$key];
                       }
                       $dataupdate['updatedby'] = $this->userId;
                       $dataupdate['updateddate'] = date($this->dateTimeFormat);
                       $dataupdate['meetingDate'] = $data['meetingDate'];
                       //$dataupdate['meetingDate'] = date($this->dateFormat);
                       unset($dataupdate['id']);
                       if($dataupdate['status'] == 'Approved'){
                            if($dataupdate['type'] == 'License'){
                                $result = $this->loginModel->recordAjaxUpdate('id', $id, ['licenseStatus' => 'Recommended By Board Stage 3', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_license');
                            }
                            if($dataupdate['type'] == 'License Renewal'){
                                $result = $this->loginModel->recordAjaxUpdate('id', $id, ['renewalStatus' => 'Recommended By Board Stage 3', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_license');
                            }
                            if($dataupdate['type'] == 'Post License Change'){
                                $result = $this->loginModel->recordAjaxUpdate('id', $id, ['postchangeStatus' => 'Recommended By Board Stage 3', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_license');
                            }
                       }
                       unset($dataupdate['type']);
                       $resultdetail = $this->loginModel->recordAjaxUpdate($idColumn, $detailId, $dataupdate, $table);
                    }
                }
                // if($this->roleId == '44'){
                //     $this->db->select('BaseTbl.id');
                //     $this->db->from('tbl_registrationmeeting as BaseTbl');
                //     $this->db->where('BaseTbl.masterId', $id);
                //     $this->db->limit(1);
                //     $this->db->order_by('BaseTbl.id', 'desc');
                //     $query = $this->db->get();
                //     $count = $query->num_rows();
                //     if($count === 0){
                //         $this->session->set_flashdata('error', 'No record found.');
                //         $result = 0;
                //     }
                //     if($count > 0){
                //         foreach ($query->result() as $row){
                //             $detailId = $row->id;
                //         }
                //         foreach($column_keys as $key){
                //            $dataupdate[$key] = $column_data[$key];
                //        }
                //        $dataupdate['updatedby'] = $this->userId;
                //        $dataupdate['updateddate'] = date($this->dateTimeFormat);
                //        $dataupdate['meetingDate'] = $data['meetingDate'];
                //        //$dataupdate['meetingDate'] = date($this->dateFormat);
                //        unset($dataupdate['id']);
                //        if($dataupdate['status'] == 'Approved'){
                //             if($dataupdate['type'] == 'Registration'){
                //                 $result = $this->loginModel->recordAjaxUpdate('id', $id, ['registrationStatus' => 'Recommended By Board Stage 3', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_registration');
                //             }
                //             if($dataupdate['type'] == 'Registration Renewal'){
                //                 $result = $this->loginModel->recordAjaxUpdate('id', $id, ['renewalStatus' => 'Recommended By Board Stage 3', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_registration');
                //             }
                //             if($dataupdate['type'] == 'Post Registration Change'){
                //                 $result = $this->loginModel->recordAjaxUpdate('id', $id, ['postchangeStatus' => 'Recommended By Board Stage 3', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_registration');
                //             }
                //        }
                //        if($dataupdate['status'] <> 'Approved'){
                //             if($dataupdate['type'] == 'Registration'){
                //                 $result = $this->loginModel->recordAjaxUpdate('id', $id, ['registrationStatus' => 'Post Board Process', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_registration');
                //             }
                //             if($dataupdate['type'] == 'Registration Renewal'){
                //                 $result = $this->loginModel->recordAjaxUpdate('id', $id, ['renewalStatus' => 'Post Board Process', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_registration');
                //             }
                //             if($dataupdate['type'] == 'Post Registration Change'){
                //                 $result = $this->loginModel->recordAjaxUpdate('id', $id, ['postchangeStatus' => 'Post Board Process', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_registration');
                //             }
                //        }
                //        unset($dataupdate['type']);
                //        $resultdetail = $this->loginModel->recordAjaxUpdate($idColumn, $detailId, $dataupdate, $table);
                //     }
                // }
            }
            */
            unset($datadetail);
            unset($rows);
            unset($column_data);
            unset($column_keys);
            unset($datainsert);
            unset($dataupdate);

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else {
            $this->accessDenied();
            return;
        }
    }

    function meetingagenda($action = NULL, $id = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $myAction = '';
        if ($action == 'submit') {
            // if(explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__){
            //     $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            // }
            // if(explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__){
            //     $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            // }
            // if($myAction == 'add'){
            //     $myAction = 'save';
            // }
            //if($myAction == 'edit'){
            $myAction = 'update';
            //}
        }

        $table = 'tbl_' . __FUNCTION__;
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        $data['records'] = $this->myModel->$functionName($table, $searchText);
        //$data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);

        if ($action == 'lookup' && $recordLookup == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            $result = $this->loginModel->recordAjaxSave($data, $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            $tableName = 'table-';
            $datadetail['id'] = $data[$tableName . 'id_detail'];
            $datadetail['type'] = $data[$tableName . 'type_detail'];
            if ($this->roleId == '43' || $this->roleId == '19') {
                $datadetail['discussInBoard'] = $data[$tableName . 'discussInBoard_detail'];
            }
            if ($this->roleId == '44') {
                $datadetail['discussInBoard'] = $data[$tableName . 'discussInBoard_detail'];
                //$datadetail['remarks'] = $data[$tableName.'remarks_detail'];
                //$datadetail['status'] = $data[$tableName.'status_detail'];
            }

            $idColumn = 'id';
            if ($this->roleId == '18') {
                $table = 'tbl_license';
            }
            if ($this->roleId == '19') {
                $table = 'tbl_registration';
            }
            if ($this->roleId == '43') {
                $table_main = 'tbl_license';
                $table = 'tbl_licensemeeting';
            }
            if ($this->roleId == '44') {
                $table_main = 'tbl_registration';
                $table = 'tbl_registrationmeeting';
            }
            $keys = array_keys($datadetail);
            $rows = [];
            for ($i = 0, $len = count($datadetail[$keys[0]]); $i < $len; $i++) {
                $rows[$i] = [];
                foreach ($keys as $key) {
                    $rows[$i][$key] = $datadetail[$key][$i];
                }
            }
            foreach ($rows as $subKey => $subArray) {
                if ($subArray['discussInBoard'] == 0) {
                    unset($rows[$subKey]);
                }
            }

            $agenda_selected = array_sum(array_column($rows, 'discussInBoard'));

            if ($agenda_selected > 0) {
                $result = 1;
                //create meeting
                $meetingid = $this->loginModel->recordAjaxSave(['meetingNo' => $data['meetingNo'], 'meetingDate' => date($this->dateFormat), 'discussInBoard' => 1, 'createdby' => $this->userId, 'createddate' => date($this->dateTimeFormat)], $table);
                foreach ($rows as $rowdata) {
                    //add agenda in a meeting
                    $this->loginModel->recordAjaxSave(['masterId' => $rowdata['id'], 'meetingid' => $meetingid, 'type' => $rowdata['type'], 'createdby' => $this->userId, 'createddate' => date($this->dateTimeFormat)], 'tbl_meetingagenda');
                    //agenda nomore available for a meeting
                    $resultdetail = $this->loginModel->recordAjaxUpdate('id', $rowdata['id'], ['discussInBoard' => 1, 'meetingid' => $meetingid, 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], $table_main);

                }
            } else {
                $this->session->set_flashdata('error', 'No Record Selected.');
                redirect(__FUNCTION__ . '/lookup');
            }


            unset($datadetail);
            unset($rows);
            unset($column_data);
            unset($column_keys);
            unset($datainsert);
            unset($dataupdate);

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else {
            $this->accessDenied();
            return;
        }
    }

    function pricing($action = NULL, $id = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $myAction = '';
        if ($action == 'submit') {
            // if(explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__){
            //     $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            // }
            // if(explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__){
            //     $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            // }
            // if($myAction == 'add'){
            //     $myAction = 'save';
            // }
            //if($myAction == 'edit'){
            $myAction = 'update';
            //}
        }

        $table = 'tbl_registrationproposedprice';
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        $data['records'] = $this->myModel->$functionName($table, $searchText);
        //$data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);

        if ($action == 'lookup' && $recordLookup == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            $result = $this->loginModel->recordAjaxSave($data, $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            $tableName = 'table-';
            $datadetail['id'] = $data[$tableName . 'id_detail'];
            $datadetail['type'] = $data[$tableName . 'type_detail'];
            $datadetail['masterId'] = $data[$tableName . 'masterId_detail'];
            $datadetail['approvedPrice'] = $data[$tableName . 'approvedPrice_detail'];

            $idColumn = 'id';
            $table = 'tbl_registrationproposedprice';
            $keys = array_keys($datadetail);
            $rows = [];
            for ($i = 0, $len = count($datadetail[$keys[0]]); $i < $len; $i++) {
                $rows[$i] = [];
                foreach ($keys as $key) {
                    $rows[$i][$key] = $datadetail[$key][$i];
                }
            }
            for ($row = 0, $cnt = count($rows); $row < $cnt; $row++) {
                $column_data = $rows[$row];
                $column_keys = array_keys($column_data);
                $id = $column_data[$idColumn];
                if ($this->roleId == '45') {
                    foreach ($column_keys as $key) {
                        $dataupdate[$key] = $column_data[$key];
                    }
                    $dataupdate['updatedby'] = $this->userId;
                    $dataupdate['updateddate'] = date($this->dateTimeFormat);
                    unset($dataupdate['id']);
                    if ($dataupdate['type'] == 'Registration') {
                        $result = $this->loginModel->recordAjaxUpdate('id', $dataupdate['masterId'], ['registrationStatus' => 'Pricing Complete', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_registration');
                    }
                    if ($dataupdate['type'] == 'Registration Renewal') {
                        $result = $this->loginModel->recordAjaxUpdate('id', $dataupdate['masterId'], ['renewalStatus' => 'Pricing Complete', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_registration');
                    }
                    if ($dataupdate['type'] == 'Post Registration Change') {
                        $result = $this->loginModel->recordAjaxUpdate('id', $dataupdate['masterId'], ['postchangeStatus' => 'Pricing Complete', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_registration');
                    }
                    unset($dataupdate['type']);
                    unset($dataupdate['masterId']);
                    $resultdetail = $this->loginModel->recordAjaxUpdate($idColumn, $id, $dataupdate, $table);
                }
            }
            unset($datadetail);
            unset($rows);
            unset($column_data);
            unset($column_keys);
            unset($datainsert);
            unset($dataupdate);

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else {
            $this->accessDenied();
            return;
        }
    }

    function rni($action = NULL, $id = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $myAction = '';
        if ($action == 'submit') {
            if (explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            }
            if (explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            }
            if ($myAction == 'add') {
                $myAction = 'save';
            }
            if ($myAction == 'edit') {
                $myAction = 'update';
            }
        }

        $table = 'tbl_' . __FUNCTION__;
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        $data['records'] = $this->myModel->$functionName($table, $searchText);
        $data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);

        if ($action == 'lookup' && $recordLookup == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;
            if (substr($data['rniRefNo'], 0, 3) == 'R-N') {
                $data['id'] = substr($data['rniRefNo'], 4);
                $data['type'] = 'Registration';

                $this->db->select('BaseTbl.id, BaseTbl.registrationStatus');
                $this->db->from('tbl_registration as BaseTbl');
                $this->db->where('BaseTbl.isDeleted', 0);
                $this->db->where('BaseTbl.id', $data['id']);
                $query = $this->db->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $id = $row->id;
                        $registrationStatus = $row->registrationStatus;
                    }
                    if ($registrationStatus == 'Under R and I') {
                        $resultdetail = $this->loginModel->recordAjaxUpdate('id', $id, ['registrationStatus' => 'Received By DRAP', 'updatedby' => $data['createdby'], 'updateddate' => $data['createddate']], 'tbl_registration');
                    }
                }

                // ------------------- Send Mail Start -------------------
                $this->db->select('BaseTbl.id, User.email, User.userName');
                $this->db->from('tbl_registration as BaseTbl');
                $this->db->join('tbl_license as License', 'License.id = BaseTbl.masterId', 'left');
                $this->db->join('tbls_company as Company', 'Company.id = License.companyId', 'left');
                $this->db->join('tbls_user as User', 'User.companyId = Company.id', 'left');
                $this->db->where('BaseTbl.id', $data['id']);
                $query = $this->db->get();
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    $email = $row->email;
                    $userName = $row->userName;
                }

                if (isset($email)) {
                    $mailData['from'] = 'DRAP';
                    $mailData['subject'] = 'PIRIMS | Registration Stage Update';
                    $mailData['title'] = 'Greetings, ' . $userName . '!';
                    $mailData['message'] = "Your application with ref. no. " . $data['rniRefNo'] . " dated " . $data['createddate'] . " has been received by Drug Regulatory Authority Of Pakistan for further processing. In case of any query please write us at: support.pirims@dra.gov.pk";
                    $mailData['email'] = $email;
                    $sendStatus = mailSend($mailData);
                    if ($sendStatus == true) {
                        $result = 1;
                    }
                }
                if (!isset($email)) {
                    $result = 0;
                }
                // ------------------- Send Mail End -------------------
            }
            if (substr($data['rniRefNo'], 0, 3) == 'R-R') {
                $data['id'] = substr($data['rniRefNo'], 4);
                $data['type'] = 'Registration Renewal';

                $this->db->select('BaseTbl.id, BaseTbl.renewalStatus');
                $this->db->from('tbl_registration as BaseTbl');
                $this->db->where('BaseTbl.isDeleted', 0);
                $this->db->where('BaseTbl.id', $data['id']);
                $query = $this->db->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $id = $row->id;
                        $renewalStatus = $row->renewalStatus;
                    }
                    if ($renewalStatus == 'Under R and I') {
                        $resultdetail = $this->loginModel->recordAjaxUpdate('id', $id, ['renewalStatus' => 'Received By DRAP', 'updatedby' => $data['createdby'], 'updateddate' => $data['createddate']], 'tbl_registration');
                    }
                }

                // ------------------- Send Mail Start -------------------
                $this->db->select('BaseTbl.id, User.email, User.userName');
                $this->db->from('tbl_registration as BaseTbl');
                $this->db->join('tbl_license as License', 'License.id = BaseTbl.masterId', 'left');
                $this->db->join('tbls_company as Company', 'Company.id = License.companyId', 'left');
                $this->db->join('tbls_user as User', 'User.companyId = Company.id', 'left');
                $this->db->where('BaseTbl.id', $data['id']);
                $query = $this->db->get();
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    $email = $row->email;
                    $userName = $row->userName;
                }

                if (isset($email)) {
                    $mailData['from'] = 'DRAP';
                    $mailData['subject'] = 'PIRIMS | Registration Renewal Stage Update';
                    $mailData['title'] = 'Greetings, ' . $userName . '!';
                    $mailData['message'] = "Your application with ref. no. " . $data['rniRefNo'] . " dated " . $data['createddate'] . " has been received by Drug Regulatory Authority Of Pakistan for further processing. In case of any query please write us at: support.pirims@dra.gov.pk";
                    $mailData['email'] = $email;
                    $sendStatus = mailSend($mailData);
                    if ($sendStatus == true) {
                        $result = 1;
                    }
                }
                if (!isset($email)) {
                    $result = 0;
                }
                // ------------------- Send Mail End -------------------
            }
            if (substr($data['rniRefNo'], 0, 3) == 'R-V') {
                $data['id'] = substr($data['rniRefNo'], 4);
                $data['type'] = 'Post Registration Change';

                $this->db->select('BaseTbl.id, BaseTbl.postchangeStatus');
                $this->db->from('tbl_registration as BaseTbl');
                $this->db->where('BaseTbl.isDeleted', 0);
                $this->db->where('BaseTbl.id', $data['id']);
                $query = $this->db->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $id = $row->id;
                        $postchangeStatus = $row->postchangeStatus;
                    }
                    if ($postchangeStatus == 'Under R and I') {
                        $resultdetail = $this->loginModel->recordAjaxUpdate('id', $id, ['postchangeStatus' => 'Received By DRAP', 'updatedby' => $data['createdby'], 'updateddate' => $data['createddate']], 'tbl_registration');
                    }
                }

                // ------------------- Send Mail Start -------------------
                $this->db->select('BaseTbl.id, User.email, User.userName');
                $this->db->from('tbl_registration as BaseTbl');
                $this->db->join('tbl_license as License', 'License.id = BaseTbl.masterId', 'left');
                $this->db->join('tbls_company as Company', 'Company.id = License.companyId', 'left');
                $this->db->join('tbls_user as User', 'User.companyId = Company.id', 'left');
                $this->db->where('BaseTbl.id', $data['id']);
                $query = $this->db->get();
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    $email = $row->email;
                    $userName = $row->userName;
                }

                if (isset($email)) {
                    $mailData['from'] = 'DRAP';
                    $mailData['subject'] = 'PIRIMS | Post Registration Change Stage Update';
                    $mailData['title'] = 'Greetings, ' . $userName . '!';
                    $mailData['message'] = "Your application with ref. no. " . $data['rniRefNo'] . " dated " . $data['createddate'] . " has been received by Drug Regulatory Authority Of Pakistan for further processing. In case of any query please write us at: support.pirims@dra.gov.pk";
                    $mailData['email'] = $email;
                    $sendStatus = mailSend($mailData);
                    if ($sendStatus == true) {
                        $result = 1;
                    }
                }
                if (!isset($email)) {
                    $result = 0;
                }
                // ------------------- Send Mail End -------------------
            }

            $result = $this->loginModel->recordAjaxSave(['rniRefNo' => $data['rniRefNo'], 'type' => $data['type'], 'name' => $data['name'], 'nic' => $data['nic'], 'remarks' => $data['remarks'], 'status' => 'Active', 'createdby' => $data['createdby'], 'createddate' => $data['createddate']], $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            $result = $this->loginModel->recordAjaxUpdate('id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), $data, $table);

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else {
            $this->accessDenied();
            return;
        }
    }

    function amc($action = NULL, $id = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $myAction = '';
        if ($action == 'submit') {
            if (explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            }
            if (explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            }
            if ($myAction == 'add') {
                $myAction = 'save';
            }
            if ($myAction == 'edit') {
                $myAction = 'update';
            }
        }

        $table = 'tbl_' . __FUNCTION__;
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        $data['records'] = $this->myModel->$functionName($table, $searchText);
        $data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);
        $data['recordsDetailProposedPacking'] = $this->myModel->applyregistrationDetailProposedPackingEdit(@$data['recordsEdit'][0]->registrationId);
        $data['products'] = $this->myModel->companyProductsGet();
        //$data['strength'] = $this->myModel->strengthGet();
        $data['pharmacopeia'] = $this->myModel->pharmacopeiaGet();
        $data['atcCode'] = $this->myModel->atcCodeGet();
        $data['innCode'] = $this->myModel->innCodeGet();
        $data['productOrigin'] = $this->myModel->productOriginGet();
        $data['productCategory'] = $this->myModel->productCategoryGet();
        $data['section'] = $this->myModel->sectionGet();
        //$data['dosage'] = $this->myModel->dosageGet();
        //$data['intendedMarket'] = $this->myModel->intendedMarketGet();
        //data['manufacturer'] = $this->myModel->manufacturerGet();
        $data['country'] = $this->loginModel->countryGet();
        $data['usedFor'] = $this->myModel->usedForGet();
        $data['routeOfAdmin'] = $this->myModel->routeOfAdminGet();
        //$data['shelfLife'] = $this->myModel->shelfLifeGet();
        //$data['storageCondition'] = $this->myModel->storageConditionGet();

        if ($action == 'lookup' && $recordLookup == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $this->db->select('BaseTbl.amcStatus');
            $this->db->from('tbl_amc as BaseTbl');
            $this->db->where('BaseTbl.id', $id);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $amcStatus = $row->amcStatus;
                    if ($amcStatus == 'Draft') {
                        $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);
                    } else {
                        $this->session->set_flashdata('error', 'Record cannot be deleted.');
                        $result = 0;
                    }
                }
            }

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            // AMC Workflow Save START
            if ($this->roleId == '26') { // Company Submission
                if ($data['amcStatus'] == 'Save') {
                    $data['amcStatus'] = 'Draft';
                }
            }
            // AMC Workflow Save END

            $result = $this->loginModel->recordAjaxSave($data, $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            // AMC Workflow Update START
            if ($this->roleId == '26') { // Company Submission
                if ($data['amcStatus'] == 'Save') {
                    $data['amcStatus'] = 'Draft';
                }
                if ($data['amcStatus'] == 'Submit') {
                    $data['amcStatus'] = 'Submitted';
                }
            }
            // AMC Workflow Update END

            $result = $this->loginModel->recordAjaxUpdate('id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), $data, $table);

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else {
            $this->accessDenied();
            return;
        }
    }

    function amcdetail($action = NULL, $id = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $myAction = '';
        if ($action == 'submit') {
            if (explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            }
            if (explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            }
            if ($myAction == 'add') {
                $myAction = 'save';
            }
            if ($myAction == 'edit') {
                $myAction = 'update';
            }
        }

        $table = 'tbl_amclist';
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        //$data['records'] = $this->myModel->$functionName($table, $searchText);
        $data['drugs'] = $this->myModel->getRecords($table, 'isDeleted', 0);
        if ($action == 'lookup' && $recordLookup == 1) {
            $input = $this->input->post();
            if ($input) {
                $drugname = $input['drugname'];
                $data['drugname'] = $drugname;
                $data['regBrands'] = $this->myModel->amcRegisteredBrands($drugname);
                $data['regManufacturers'] = $this->myModel->amcRegisteredManufacturers($drugname);

            }
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $this->db->select('BaseTbl.amcStatus');
            $this->db->from('tbl_amc as BaseTbl');
            $this->db->where('BaseTbl.id', $id);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $amcStatus = $row->amcStatus;
                    if ($amcStatus == 'Draft') {
                        $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);
                    } else {
                        $this->session->set_flashdata('error', 'Record cannot be deleted.');
                        $result = 0;
                    }
                }
            }

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            // AMC Workflow Save START
            if ($this->roleId == '26') { // Company Submission
                if ($data['amcStatus'] == 'Save') {
                    $data['amcStatus'] = 'Draft';
                }
            }
            // AMC Workflow Save END

            $result = $this->loginModel->recordAjaxSave($data, $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            // AMC Workflow Update START
            if ($this->roleId == '26') { // Company Submission
                if ($data['amcStatus'] == 'Save') {
                    $data['amcStatus'] = 'Draft';
                }
                if ($data['amcStatus'] == 'Submit') {
                    $data['amcStatus'] = 'Submitted';
                }
            }
            // AMC Workflow Update END

            $result = $this->loginModel->recordAjaxUpdate('id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), $data, $table);

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else {
            $this->accessDenied();
            return;
        }
    }

    function apifppshortage($action = NULL, $id = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $table = 'tbl_' . __FUNCTION__;
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;

        //$data['usedFor'] = $this->myModel->usedForGet();

        if ($action == 'lookup' && $recordLookup == 1) {
            $parameters = $this->input->post();
            if ($parameters) {
                $data['parameters'] = $parameters;
                $data['records'] = $this->myModel->$functionName(@$parameters);
            }
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else {
            $this->accessDenied();
            return;
        }
    }
    function notesheet($type = NULL,$id = NULL){

        $data = $this->input->post();
        if (!$data || $type == NULL || $id == NULL) {
            $this->accessDenied();
            return;
        }
        $byRole = $this->designation.' '.$this->department;
        $forwardedRoleUser = $this->loginModel->getDesignationDepartment($data['forwardedTo']);
        $forwardedRole = $forwardedRoleUser[0]->urole;
        $data['updatedby'] = $this->userId;
        $data['updateddate'] = date($this->dateTimeFormat);
        if($type == 'importlicense'){

            $otherdb = $this->load->database('otherdb', TRUE);

            // Licensing Workflow Update START
            $otherdb->select('BaseTbl.*, (SELECT tbl_licensehistory.forwardedTo FROM tbl_licensehistory WHERE tbl_licensehistory.masterId = BaseTbl.id AND tbl_licensehistory.isDeleted = 0 ORDER BY tbl_licensehistory.id DESC LIMIT 1) as assignedOfficer');
            $otherdb->from('tbl_license as BaseTbl');
            $otherdb->where('BaseTbl.id',$id);
            $query = $otherdb->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {

                    $phase = $row->phase;
                    $licenseStatus = $row->licenseStatus;
                    $assignedOfficer = $row->assignedOfficer;
                }
            }
            $otherdb->close();
            $licenseStatusNew = $licenseStatus;

            if($this->roleId == '38' || $this->userId == $assignedOfficer){
                if($this->roleId == '38'){
                    if($licenseStatus == 'Submitted' || $licenseStatus == 'Re Submitted'){
                        $licenseStatusNew = 'Under Review';
                    }
                }
                $result = $this->myModel->recordAjaxSave911(['masterId' => $id, 'type' => 'License', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo'],'forwardRole'=>$forwardedRole,'byRole'=>$byRole, 'remarks' => $data['remarks'], 'status' => $licenseStatus, 'fromQ' => 'DRAP', 'createdby' => $this->userId, 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                $resultlic = $this->myModel->recordAjaxUpdate911('id', $id, ['licenseStatus'=>$licenseStatusNew,'updatedby'=>$this->userId,'updateddate'=>$data['updateddate']], 'tbl_license');
            }
            if ($result > 0) {
                $this->session->set_flashdata('success', 'record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }
            redirect($data['refback']);
        }else{
            // Licensing Workflow Update START
            $this->db->select('BaseTbl.*, (SELECT tbl_licensehistory.forwardedTo FROM tbl_licensehistory WHERE tbl_licensehistory.masterId = BaseTbl.id AND tbl_licensehistory.isDeleted = 0 ORDER BY tbl_licensehistory.id DESC LIMIT 1) as assignedOfficer');
            $this->db->from('tbl_license as BaseTbl');
            $this->db->where('BaseTbl.id',$id);
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {

                    $phase = $row->phase;
                    $licenseStatus = $row->licenseStatus;
                    $postlicenseStatus = $row->postchangeStatus;
                    $renewallicenseStatus = $row->renewalStatus;
                    $assignedOfficer = $row->assignedOfficer;
                }
            }



            if($this->roleId == '38' || $this->userId == $assignedOfficer) {
                if ($licenseStatus != NULL && $licenseStatus != '') {
                    if ($licenseStatus == 'Submitted') {
                        $newStatus = 'Under Review Stage 1';
                    } else {
                        $newStatus = $licenseStatus;
                    }
                    $result = $this->loginModel->recordAjaxSave(['masterId' => $id, 'type' => 'License', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo'], 'byRole' => $byRole, 'forwardedRole' => $forwardedRole, 'remarks' => $data['remarks'], 'status' => $licenseStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                    $resultlic = $this->loginModel->recordAjaxUpdate('id', $id, ['licenseStatus' => $newStatus, 'updatedby' => $this->userId, 'updateddate' => $data['updateddate']], 'tbl_license');
                }
                if ($postlicenseStatus != NULL && $postlicenseStatus != '') {
                    if ($postlicenseStatus == 'Submitted') {
                        $newStatus = 'Under Review Stage 1';
                    } else {
                        $newStatus = $postlicenseStatus;
                    }
                    $result = $this->loginModel->recordAjaxSave(['masterId' => $id, 'type' => 'Post License Change', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo'], 'byRole' => $byRole, 'forwardedRole' => $forwardedRole, 'remarks' => $data['remarks'], 'status' => $postlicenseStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                    $resultlic = $this->loginModel->recordAjaxUpdate('id', $id, ['postchangeStatus' => $newStatus, 'updatedby' => $this->userId, 'updateddate' => $data['updateddate']], 'tbl_license');
                }
                if ($renewallicenseStatus != NULL && $renewallicenseStatus != '') {
                    if ($renewallicenseStatus == 'Submitted') {
                        $newStatus = 'Under Review Stage 1';
                    } else {
                        $newStatus = $renewallicenseStatus;
                    }
                    $result = $this->loginModel->recordAjaxSave(['masterId' => $id, 'type' => 'License Renewal', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo'], 'byRole' => $byRole, 'forwardedRole' => $forwardedRole, 'remarks' => $data['remarks'], 'status' => $renewallicenseStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                    $resultlic = $this->loginModel->recordAjaxUpdate('id', $id, ['renewalStatus' => $newStatus, 'updatedby' => $this->userId, 'updateddate' => $data['updateddate']], 'tbl_license');
                }
            }
            if ($result > 0) {
                $this->session->set_flashdata('success', 'record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }
            redirect($data['refback']);
        }


    }

    function importlicense($action = NULL, $id = NULL)
    {


        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }


        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $myAction = '';
        if ($action == 'submit') {
            if (explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            }
            if (explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            }
            if ($myAction == 'add') {
                $myAction = 'save';
            }
            if ($myAction == 'edit') {
                $myAction = 'update';
            }
        }


        $table = 'tbl_license';
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        $data['records'] = $this->myModel->$functionName($table, $searchText);
        $data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);
        $data['recordsDetailManagement'] = $this->myModel->applylicenseDetailManagementEdit911($id);
        $data['recordsDetailSection'] = $this->myModel->applylicenseDetailSectionEdit911($id);
        $data['recordsDetailSectionMachine'] = $this->myModel->applylicenseDetailSectionMachineEdit911($id);
        $data['recordsDetailQualifiedStaff'] = $this->myModel->applylicenseDetailQualifiedStaffEdit911($id);
        $data['recordsDetailHistory'] = $this->myModel->licenseDetailQueryEdit911($id);
        $data['recordsDetailApi'] = $this->myModel->applylicenseDetailApiEdit911($id);
        $data['recordsDetailQuery'] = $this->myModel->licenseQueryEdit911($id);

        for ($ind = 0; $ind < count($data['recordsDetailQuery']); $ind++) {
            $data['recordsDetailQuery'][$ind]->querycomments = $this->myModel->licenseQueryAttachments911($data['recordsDetailQuery'][$ind]->id);
        }

        //$data['products'] = $this->myModel->companyProductsGet();
        $data['licenseType'] = $this->myModel->licenseTypeGet();
        $data['pharmaGroup'] = $this->myModel->pharmaGroupGet();
        $data['usedFor'] = $this->myModel->usedForGet();
        $data['section'] = $this->myModel->sectionGet();
        $data['designation'] = $this->myModel->companyDesignationGet();
        $data['qualification'] = $this->myModel->companyQualificationGet();
        $data['specialization'] = $this->myModel->companySpecializationGet();
        $data['sectionApproved11'] = $this->myModel->sectionApprovedGet11($id);
        $data['pharmaGroupApproved11'] = $this->myModel->pharmaGroupApprovedGet11($id);
        $data['usedForApproved11'] = $this->myModel->usedForApprovedGet11($id);
        $data['historyDesignation'] = $this->myModel->licenseDesignationGet();
        $data['city'] = $this->loginModel->cityGet();

        if ($action == 'lookup' && $recordLookup == 1) {

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            if ($data['recordsEdit'][0]->licenseStatus == 'Draft' || $data['recordsEdit'][0]->licenseStatus == 'Referred Back To Company') {
                if ($this->roleId <> '26' && $data['recordsEdit'][0]->companyUniqueNo <> $this->companyUniqueNo) {

                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->licenseStatus == 'Submitted' || $data['recordsEdit'][0]->licenseStatus == 'Re Submitted') {
                if ($this->roleId <> '38') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            if ($data['recordsEdit'][0]->licenseStatus == 'Under Review' || $data['recordsEdit'][0]->licenseStatus == 'Review Complete') {
                if ($data['recordsEdit'][0]->lastAssignedUserId <> $this->userId && $this->roleId <> '38') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }

            if ($data['recordsEdit'][0]->licenseStatus == 'Approved') {
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }


            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }

            $data['companyId'] = $this->companyId;

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
            }


            // if($data['forwardedTo_detail101']){
            //     $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo_detail101'], 'remarks' => $data['remarks_detail101'], 'fromQ' => $data['fromQ'], 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
            // }
            unset($data['forwardedTo_detail101']);
            unset($data['remarks_detail101']);
            unset($data['fromQ']);
            unset($data['sendQueryToCompany']);
            unset($data['meetingNo']);
            unset($data['meetingDate']);
            unset($data['undefined']);

            $result = $this->myModel->recordAjaxSave911($data, $table);

            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }

            $sId = 0;
            $keys = array_keys($dataDetailTable);
            foreach (array_keys($dataDetailTable) as $key) {
                $current_key = current($keys);
                $current_value = $dataDetailTable[$current_key];
                $next_key = next($keys);
                $next_value = @$dataDetailTable[$next_key];
                $tableName = substr($current_key, 0, strpos($current_key, '-'));
                $nextTableName = substr($next_key, 0, strpos($next_key, '-'));
                if ($tableName == 'tabledetailmanagement') {
                    $tableDetail = 'tbl_companymanagement';

                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;

                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave911($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailapi') {
                    $tableDetail = 'tbl_licenseapi';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave911($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailfacility') {
                    $tableDetail = 'tbl_licensefacility';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave911($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }

                if ($tableName == 'tabledetailsection') {
                    $tableDetail = 'tbl_licensesection';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave911($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailqualifiedstaff') {
                    $tableDetail = 'tbl_companyqualifiedstaff';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave911($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailsection2') {
                    $tableDetail = 'tbl_licensesectionmachine';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave911($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                $sId++;
            }

            if ($result > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }


            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
            }

            $filecheck = false;

            if (isset($_POST['tbl_query2-comment_detail']) && count($_POST['tbl_query2-comment_detail']) > 0) {


                for ($ind = 0; $ind < count($_POST['tbl_query2-comment_detail']); $ind++) {
                    $data['queryattachmentid'][$ind] = isset($_POST['tbl_query2-queryattachid_detail'][$ind]) ? $_POST['tbl_query2-queryattachid_detail'][$ind] : 0;
                    $data['comment'][$ind] = $_POST['tbl_query2-comment_detail'][$ind];
                    $data['queryid'][$ind] = $_POST['tbl_query2-qid_detail'][count($_POST['tbl_query2-qid_detail']) - 1];
                    if (@$_FILES['tbl_query2-filePath_detail']['tmp_name'][$ind]) {
                        $data['queryfilePath'][$ind] = $this->fileMoveMultiple('Attachment', 'tbl_query2-filePath_detail', $ind, $this->companyUniqueNo, 'docs');

                    } else {
                        $data['queryfilePath'][$ind] = null;
                    }
                    $data['queryattachisdeleted'][$ind] = $_POST['tbl_query2-isDeleted_detail'][$ind];
                }


                unset($_POST['tbl_query2-comment_detail']);
                unset($_POST['tbl_query2-id_detail']);
            }


            $otherdb = $this->load->database('otherdb', TRUE);
            $otherdb->select('BaseTbl.id, BaseTbl.rniRefNo, BaseTbl.licenseNo, Company.id as companyId, Company.companyUniqueNo, BaseTbl.licenseStatus, BaseTbl.phase');
            $otherdb->from('tbl_license as BaseTbl');
            $otherdb->join('tbls_company as Company', 'Company.id = BaseTbl.companyId', 'left');
            //$otherdb->join('tbls_user as User','User.companyId = Company.id','left');
            $otherdb->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
            $query = $otherdb->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    // $email = $row->email;
                    // $userName = $row->userName;
                    $rniRefNo = $row->rniRefNo;
                    $licenseNo = $row->licenseNo;
                    $companyId = $row->companyId;
                    $companyUniqueNo = $row->companyUniqueNo;
                    $licenseStatus = $row->licenseStatus;
                    $phase = $row->phase;
                }
            }
            $otherdb->close();
            if ($this->roleId <> '26' && $data['licenseStatus'] != 'Save') {
                if ($data['forwardedTo_detail101']) {
                    $byRole = $this->designation.' '.$this->department;

                    if ($data['sendQueryToCompany'] == '1') {
                        if ($data['forwardedTo_detail101'] == $this->userId) {
                            $forwardedRoleUser = $this->loginModel->getDesignationDepartment(103);
                            $forwardedRole = $forwardedRoleUser[0]->urole;
                            $resultdetail = $this->myModel->recordAjaxSave911(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => 103,'forwardRole'=>$forwardedRole,'byRole'=>$byRole, 'remarks' => $data['remarks_detail101'], 'fromQ' => $data['fromQ'], 'sendQueryToCompany' => 1, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                        } else {

                            $forwardedRoleUser = $this->loginModel->getDesignationDepartment($data['forwardedTo_detail101']);
                            $forwardedRole = $forwardedRoleUser[0]->urole;

                            $resultdetail = $this->myModel->recordAjaxSave911(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo_detail101'],'forwardRole'=>$forwardedRole,'byRole'=>$byRole, 'remarks' => $data['remarks_detail101'], 'fromQ' => $data['fromQ'], 'sendQueryToCompany' => 1, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                            //$resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo_detail101'], 'remarks' => $data['remarks_detail101'], 'status' => $licenseStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                        }

                        $this->db->select('BaseTbl.id, User.email, User.userName');
                        $this->db->from('tbl_license as BaseTbl');
                        $this->db->join('tbls_company as Company', 'Company.id = BaseTbl.companyId', 'left');
                        $this->db->join('tbls_user as User', 'User.companyId = Company.id', 'left');
                        $this->db->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                        $query = $this->db->get();
                        $count = $query->num_rows();
                        if ($count === 0) {
                            $this->session->set_flashdata('error', 'No record found.');
                            $result = 0;
                        }
                        if ($count > 0) {
                            foreach ($query->result() as $row) {
                                $id = $row->id;
                                $email = $row->email;
                                $userName = $row->userName;
                            }
                        }
                        // ------------------- Send Mail Start -------------------
                        if (isset($email)) {
                            $mailData['from'] = 'DRAP';
                            $mailData['subject'] = 'PIRIMS | Query';
                            $mailData['title'] = 'Greetings, ' . $userName . '!';
                            $mailData['message'] = "Your have a query from DRAP of Data Authentication with ref. no " . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . ".";
                            $mailData['email'] = $email;
                            $sendStatus = emailSend($mailData);
                            if ($sendStatus == true) {
                                $result = 1;
                            }
                        }
                        if (!isset($email)) {
                            $result = 0;
                        }
                        // ------------------- Send Mail End -------------------

                        // ------ This code create query
                        $resultdetail = $this->myModel->recordAjaxSave911(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'dateTime' => date($this->dateTimeFormat), 'title' => 'Data Authentication', 'type' => 'License', 'message' => $data['datashortcoming'], 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => 'Info Required From Company', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_query2');

                        /*if($phase == 'Site Verification'){
                            $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'dateTime' => date($this->dateTimeFormat), 'title' => 'Site Verification', 'type' => 'License', 'message' => $data['remarks_detail101'], 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => 'Info Required From Company', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_query');
                        }
                        if($phase == 'Layout Plan'){
                            $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'dateTime' => date($this->dateTimeFormat), 'title' => 'Layout Plan', 'type' => 'License', 'message' => $data['remarks_detail101'], 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => 'Info Required From Company', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_query');
                        }
                        if($phase == 'Grant of License'){
                            $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'dateTime' => date($this->dateTimeFormat), 'title' => 'Grant of License', 'type' => 'License', 'message' => $data['remarks_detail101'], 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => 'Info Required From Company', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_query');
                        }*/
                    } else {
                        $forwardedRoleUser = $this->loginModel->getDesignationDepartment($data['forwardedTo_detail101']);
                        $forwardedRole = $forwardedRoleUser[0]->urole;

                        $resultdetail = $this->myModel->recordAjaxSave911(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo_detail101'],'forwardRole'=>$forwardedRole,'byRole'=>$byRole, 'remarks' => $data['remarks_detail101'], 'fromQ' => $data['fromQ'], 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                    }
                }
            }

            if ($this->roleId == 26) {

                if ($licenseStatus == 'Referred Back To Company') {
                    //$data['licenseStatus'] = 'Re Submitted';
                    //query data

                    $queryid = 0;
                    for ($ind = 0; $ind < count($data['comment']); $ind++) {
                        $comment = $data['comment'][$ind];
                        $filePath = $data['queryfilePath'][$ind];
                        $queryid = $data['queryid'][$ind];
                        $query_isdeleted = $data['queryattachisdeleted'][$ind];
                        if ($data['queryattachmentid'][$ind] != 0) {
                            if (!empty($filePath)) {
                                $resultdetail = $this->myModel->recordAjaxUpdate911('id', $data['queryattachmentid'][$ind], ['comment' => $comment, 'attachmentPath' => $filePath, 'isDeleted' => $query_isdeleted, 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_queryattachment');
                            } else {
                                $resultdetail = $this->myModel->recordAjaxUpdate911('id', $data['queryattachmentid'][$ind], ['comment' => $comment, 'isDeleted' => $query_isdeleted, 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_queryattachment');
                            }
                        } else {
                            if (!empty($comment))
                                $resultdetail = $this->myModel->recordAjaxSave911(['masterId' => $queryid, 'comment' => $comment, 'attachmentPath' => $filePath, 'isDeleted' => $query_isdeleted, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_queryattachment');
                        }
                    }

                    if ($queryid != 0 && $data['licenseStatus'] != 'Draft') {
                        $resultdetail = $this->myModel->recordAjaxUpdate911('id', $queryid, ['status' => 'Submitted Requested Document To DRAP', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_query2');
                    }

                }

                $issubmit = false;
                $submitstatus = 'Submitted';

                if ($data['licenseStatus'] == 'Draft') {
                    $data['licenseStatus'] = $licenseStatus;

                } else {
                    if ($licenseStatus == 'Referred Back To Company') {
                        $data['licenseStatus'] = 'Re Submitted';
                        $submitstatus = 'Re Submitted';
                    } else {
                        $data['licenseStatus'] = 'Submitted';
                    }
                    $issubmit = true;
                    $data['submissionDate'] = date('Y-m-d');
                    //update license history
                    $resultdetail = $this->myModel->recordAjaxSave911(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'remarks' => $data['remarks_detail101'], 'fromQ' => $data['fromQ'], 'createdby' => $data['updatedby'], 'isDeleted' => 1, 'createddate' => $data['updateddate']], 'tbl_licensehistory');
                }
            }


            unset($data['queryid']);
            unset($data['comment']);
            unset($data['queryattachmentid']);
            unset($data['queryattachisdeleted']);
            unset($data['filePath']);
            unset($data['forwardedTo_detail101']);
            unset($data['remarks_detail101']);
            unset($data['fromQ']);
            unset($data['datashortcoming']);
            unset($data['sendQueryToCompany']);

            unset($data['queryfilePath']);
            unset($data['undefined']);


            if (isset($data['meetingNo'])) {
                $meetingNo = $data['meetingNo'];
                $meetingDate = $data['meetingDate'];
                unset($data['meetingNo']);
                unset($data['meetingDate']);
            }

            if ($this->roleId == '38') { // Licensing Assigning Officer
                if ($data['licenseStatus'] == 'Save') {
                    $data['licenseStatus'] = $licenseStatus;
                }
                if ($data['licenseStatus'] == 'Proceed') {
                    if ($licenseStatus == 'Submitted' || $licenseStatus == 'Re Submitted') {
                        $data['licenseStatus'] = 'Under Review';
                    } else {
                        $data['licenseStatus'] = $licenseStatus;
                    }
                }
            }
            if ($this->roleId == '18') { // Licensing Assistant Director
                if ($data['licenseStatus'] == 'Save' || $data['licenseStatus'] == 'fwdapproval') {
                    $data['licenseStatus'] = $licenseStatus;
                }
            }
            if ($this->roleId == '6' || $this->roleId == '10' || $this->roleId == '14' || $this->roleId == '43') { // Licensing Assistant Director
                if ($data['licenseStatus'] == 'Save' || $data['licenseStatus'] == 'Proceed') {
                    $data['licenseStatus'] = $licenseStatus;
                }
            }

            $result = $this->myModel->recordAjaxUpdate911('id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), $data, $table);

            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }

            $sId = 0;
            $keys = array_keys($dataDetailTable);
            foreach (array_keys($dataDetailTable) as $key) {
                $current_key = current($keys);
                $current_value = $dataDetailTable[$current_key];
                $next_key = next($keys);
                $next_value = @$dataDetailTable[$next_key];
                $tableName = substr($current_key, 0, strpos($current_key, '-'));
                $nextTableName = substr($next_key, 0, strpos($next_key, '-'));
                if ($tableName == 'tabledetailmanagement') {
                    $tableDetail = 'tbl_companymanagement';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }

                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave911($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailsection') {
                    $tableDetail = 'tbl_licensesection';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave911($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailapi') {
                    $tableDetail = 'tbl_licenseapi';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave911($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailfacility') {
                    $tableDetail = 'tbl_licensefacility';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave911($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }

                if ($tableName == 'tabledetailqualifiedstaff') {
                    $tableDetail = 'tbl_companyqualifiedstaff';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave911($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailsection2') {
                    $tableDetail = 'tbl_licensesectionmachine';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave911($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                $sId++;
            }


            if ($data['licenseStatus'] == 'Approved') {
                $otherdb = $this->load->database('otherdb', TRUE);
                $otherdb->select('BaseTbl.licenseNoManual, BaseTbl.issueDateManual, BaseTbl.licFileNo, BaseTbl.validTill, BaseTbl.lastRenewalDate, BaseTbl.licenseTypeId, BaseTbl.siteAddress, BaseTbl.siteCity, BaseTbl.googleMapURL, BaseTbl.latitude, BaseTbl.longitude, BaseTbl.pvma4, BaseTbl.pvma2, BaseTbl.pvma3, BaseTbl.siteVerificationLetter, BaseTbl.layoutPlanLetter, BaseTbl.licenseLetter, BaseTbl.svCoveringLetter, BaseTbl.svFeeChallan, BaseTbl.svStatusOfFirm, BaseTbl.svCopyOfCNIC, BaseTbl.svRegistrationCertificate, BaseTbl.svLandDocument, BaseTbl.svSiteMap, BaseTbl.lpApplicationCoveringLetter, BaseTbl.lpChallanForm, BaseTbl.dmlForm1, BaseTbl.dmlProForma, BaseTbl.dmlLegalStatus, BaseTbl.dmlFeeChallan, BaseTbl.qsDocuments, BaseTbl.qsDocuments2, BaseTbl.createdby, BaseTbl.createddate');
                $otherdb->from('tbl_license as BaseTbl');
                $otherdb->where('BaseTbl.isDeleted', 0);
                $otherdb->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $query = $otherdb->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $masterId = $this->loginModel->recordAjaxSave($row, 'tbl_license');
                    }
                }

                $otherdb->select('BaseTbl.id, BaseTbl.phase, BaseTbl.companyId, BaseTbl.layoutPlanLetter');
                $otherdb->from('tbl_license as BaseTbl');
                $otherdb->where('BaseTbl.isDeleted', 0);
                $otherdb->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $query = $otherdb->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $id = $row->id;
                        $phase = $row->phase;
                        $implicenseTypeId = $row->licenseTypeId;
                        $companyId = $row->companyId;
                        $layoutPlanLetter = $row->layoutPlanLetter;
                    }

                    if ($phase == 'Site Verification') {
                        $resultdetail = $this->loginModel->recordAjaxUpdate('id', $masterId, ['siteData' => 1, 'phase' => 'Layout Plan', 'companyId' => $companyId, 'licenseStatus' => 'Draft', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_license');
                    }
                    if ($phase == 'Layout Plan') {
                        $resultdetail = $this->loginModel->recordAjaxUpdate('id', $masterId, ['siteData' => 1, 'layoutData' => 1, 'phase' => 'Grant of License', 'companyId' => $companyId, 'licenseStatus' => 'Draft', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_license');
                        //insert approved layout plan letter
                        $this->loginModel->recordAjaxSave(['masterId' => $masterId, 'approvedFilePath' => $layoutPlanLetter, 'description' => 'Layout Plan Approved', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licenselayoutplan');
                    }
                    if ($phase == 'Grant of License') {

                        $resultdetail = $this->loginModel->recordAjaxUpdate('id', $masterId, ['siteData' => 1, 'layoutData' => 1, 'dmlData' => 1, 'phase' => 'Grant of License', 'companyId' => $companyId, 'licenseStatus' => 'Approved', 'status' => 'Active', 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']], 'tbl_license');
                        //insert approved layout plan letter
                        $this->loginModel->recordAjaxSave(['masterId' => $masterId, 'approvedFilePath' => $layoutPlanLetter, 'description' => 'Layout Plan Approved', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licenselayoutplan');
                    }

                }

                $otherdb->select('"' . $masterId . '" as masterId, BaseTbl.name, BaseTbl.fatherName, BaseTbl.address, BaseTbl.nic, BaseTbl.department, BaseTbl.designation, BaseTbl.phone, BaseTbl.email');
                $otherdb->from('tbl_companymanagement as BaseTbl');
                $otherdb->where('BaseTbl.isDeleted', 0);
                $otherdb->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $query = $otherdb->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_companymanagement');
                    }
                }

                $otherdb->select('"' . $masterId . '" as masterId, BaseTbl.sectionId, BaseTbl.pharmaGroupId, BaseTbl.usedForId, BaseTbl.approved, BaseTbl.recommended');
                $otherdb->from('tbl_licensesection as BaseTbl');
                $otherdb->where('BaseTbl.isDeleted', 0);
                $otherdb->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $query = $otherdb->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licensesection');
                    }
                }

                $otherdb->select('"' . $masterId . '" as masterId, BaseTbl.apiName, BaseTbl.filePath, BaseTbl.filePath2, BaseTbl.filePath3, BaseTbl.filePath4, BaseTbl.filePath5, BaseTbl.filePath6, BaseTbl.filePath7, BaseTbl.filePath8, BaseTbl.filePath9, BaseTbl.filePath10, BaseTbl.filePath11');
                $otherdb->from('tbl_licenseapi as BaseTbl');
                $otherdb->where('BaseTbl.isDeleted', 0);
                $otherdb->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $query = $otherdb->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licenseapi');
                    }
                }

                $otherdb->select('"' . $masterId . '" as masterId, BaseTbl.facilityname');
                $otherdb->from('tbl_licensefacility as BaseTbl');
                $otherdb->where('BaseTbl.isDeleted', 0);
                $otherdb->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $query = $otherdb->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licensefacility');
                    }
                }

                $otherdb->select('"' . $masterId . '" as masterId, BaseTbl.name, BaseTbl.fatherName, BaseTbl.address, BaseTbl.nic, BaseTbl.phone, BaseTbl.designationId, BaseTbl.qualificationId, BaseTbl.specializationId');
                $otherdb->from('tbl_companyqualifiedstaff as BaseTbl');
                $otherdb->where('BaseTbl.isDeleted', 0);
                $otherdb->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $query = $otherdb->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_companyqualifiedstaff');
                    }
                }

                $otherdb->select('"' . $masterId . '" as masterId, BaseTbl.sectionId, BaseTbl.pharmaGroupId, BaseTbl.usedForId, BaseTbl.drugName, BaseTbl.machineMake, BaseTbl.machineModel, BaseTbl.machinePartNo');
                $otherdb->from('tbl_licensesectionmachine as BaseTbl');
                $otherdb->where('BaseTbl.isDeleted', 0);
                $otherdb->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $query = $otherdb->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_licensesectionmachine');
                    }
                }
                $otherdb->close();

                $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => $masterId, 'meetingNo' => $meetingNo, 'meetingDate' => $meetingDate], 'tbl_licensemeeting');
            }
            if ($issubmit) {
                $allrecord = $this->myModel->getLicenseRecord($id);
                $logresultdetail = $this->myModel->recordAjaxSave911(['masterId' => $id, 'recordLog' => $allrecord, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate'], 'status' => $submitstatus], 'tbl_licenselog');

            }

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else {
            $this->accessDenied();
            return;
        }
    }

    function filterRegistration()
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;


        $data = $this->input->post();
        if (!$this->input->post()) {
            redirect('importregistration');
        }

        $type = $data['searchby'];
        $searchstring = $data['searchstring'];
        if ($type == 1) {
            $data['drugs'] = $this->loginModel->filterDrugsRegNo($searchstring, false);
        } elseif ($type == 2) {
            $data['drugs'] = $this->loginModel->filterDrugsName($searchstring, false);
        } elseif ($type == 3) {
            $data['drugs'] = $this->loginModel->filterDrugsComposition($searchstring, false);
        } elseif ($type == 4) {
            $companyAccountId = $data['companyAccountId'];
            $data['drugs'] = $this->loginModel->filterDrugsCompany($companyAccountId, false);
        }
        $data['companies'] = $this->myModel->companiesGet();



        $this->loadViews('company/' . $this->companyName . '/importregistration', $this->global, $data, NULL);


    }

    function importregistration($action = NULL, $id = NULL)
    {
        $abc = $_SESSION['newId'];
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;
        $myAction = '';
        if ($action == 'submit') {
            if (explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            }
            if (explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            }
            if ($myAction == 'add') {
                $myAction = 'save';
            }
            if ($myAction == 'edit') {
                $myAction = 'update';
            }
        }
        $table = 'tbl_registration';
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        $data['records'] = $this->myModel->$functionName($table, $searchText);
        $data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);
        $data['recordsDetailProposedPacking'] = $this->myModel->applyregistrationDetailProposedPackingEdit($id);
        $data['recordsDetailINN'] = $this->myModel->applyregistrationDetailINNEdit($id);
        $data['recordsDetailOtherManufacturer'] = $this->myModel->applyregistrationOtherManufacturerEdit($id);

        $data['recordsDetailHistory'] = $this->myModel->registrationDetailQueryEdit911($id);
        //$data['products'] = $this->myModel->companyProductsGet();
        $data['companies'] = $this->myModel->companiesGet();
        $data['countries'] = $this->myModel->countriesGet();
        $data['registrationType'] = $this->myModel->registrationTypeGet();
        $data['pharmacopeia'] = $this->myModel->pharmacopeiaGet();
        $data['atcCode'] = $this->myModel->atcCodeGet();
        $data['innCode'] = $this->myModel->innCodeGet();
        $data['refunits'] = array_values(array_filter(array_column($this->myModel->refUnitsGet(), 'refUnit')));
        $data['filenumbers'] = array_values(array_filter(array_column($this->myModel->filenumbersGet(), 'regFileNo')));
        $data['generics'] = array_values(array_filter(array_column($this->myModel->genericGet(), 'innManual')));

        $data['productOrigin'] = $this->myModel->productOriginGet();
        $data['productCategory'] = $this->myModel->productCategoryGet();
        $data['usedFor'] = $this->myModel->usedForGet();
        $data['dosageForm'] = $this->myModel->dosageFormGet();

        $data['basicDose'] = $this->myModel->basicDoseGet();
        $data['pharmaDose'] = $this->myModel->pharmaDoseGet();
        $data['combinedPharmaDose'] = $this->myModel->combinedPharmaDoseGet();
        $data['releaseCharacteristics'] = $this->myModel->releaseCharacteristicsGet();
        $data['transformation'] = $this->myModel->transformationGet();
        $data['adminMethod'] = $this->myModel->adminMethodGet();
        $data['intendedSite'] = $this->myModel->intendedSiteGet();
        $data['presentationUnit'] = $this->myModel->presentationUnitGet();
        $data['packagingCategory'] = $this->myModel->packagingCategoryGet();
        $data['routeOfAdmin'] = $this->myModel->routeOfAdminGet();
        $data['unit'] = $this->myModel->unitGet();
        $data['labelClaim'] = $this->myModel->labelClaimGet();

        $data['regulatoryBody'] = $this->myModel->regulatoryBodyGet();
        $data['priorityReason'] = $this->myModel->registrationPriorityReasonGet();
        $data['inspectionType'] = $this->myModel->inspectionTypeRegistrationGet();
        //$data['licenses'] = $this->myModel->licensesGet1(@$data['recordsEdit'][0]->companyId);
        $data['licenseApproved1'] = ($this->roleId <> 26) ? $this->myModel->licenseApprovedGet(@$data['recordsEdit'][0]->companyId) : $this->myModel->licenseApprovedGet($this->companyId);
        $data['allApprovedLicenses'] = $this->myModel->allApprovedLicensesGet();
        $data['licenseApproved'] = $this->myModel->licenseApprovedGet(@$data['recordsEdit'][0]->companyId);


        if ($action == 'lookup' && $recordLookup == 1) {
            $input = $this->input->post();
            if ($input) {
                $type = $input['searchby'];
                $searchstring = $input['searchstring'];
                $data['searchby'] = $type;
                $data['searchstring'] = $searchstring;
                if ($type == 1) {
                    $data['drugs'] = $this->loginModel->filterDrugsRegNo($searchstring, false);
                } elseif ($type == 2) {
                    $data['drugs'] = $this->loginModel->filterDrugsName($searchstring, false);
                } elseif ($type == 3) {
                    $data['drugs'] = $this->loginModel->filterDrugsComposition($searchstring, false);
                } elseif ($type == 4) {
                    $companyAccountId = $input['companyAccountId'];
                    $data['companyAccountId'] = $companyAccountId;
                    $data['drugs'] = $this->loginModel->filterDrugsCompany($companyAccountId, false);
                }

            }
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'edit' && $recordEdit == 1) {

            if (!$id) {
                $this->accessDenied();
                return;
            }


            /* if($data['recordsEdit'][0]->registrationStatus == 'Draft' || $data['recordsEdit'][0]->registrationStatus == 'Referred Back To Company'){
                if($this->roleId <> '26' && $data['recordsEdit'][0]->companyUniqueNo <> $this->companyUniqueNo){
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__.'/lookup');
                }
            }*/

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }
            if (isset($data['reg_no'])) {
                $this->load->helper('url');

                $reg = $this->myModel->regIdGet($data['reg_no']);
                if (isset($reg[0]))
                    redirect('https://pirims.dra.gov.pk/importregistration/edit/' . $reg[0]->id);
                else
                    redirect('https://pirims.dra.gov.pk/importregistration/lookup');

            }
            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $data['registrationTypeId'] = 1;
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }


            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
            }


            // if($data['forwardedTo_detail101']){
            //     $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo_detail101'], 'remarks' => $data['remarks_detail101'], 'fromQ' => $data['fromQ'], 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
            // }
            //unset($data['forwardedTo_detail101']);
            unset($data['remarks_detail101']);
            unset($data['fromQ']);
            //unset($data['sendQueryToCompany']);
            unset($data['undefined']);
            unset($data['meetingDate']);

            $result = $this->loginModel->recordAjaxSave($data, $table);

            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }


            $sId = 0;
            $keys = array_keys($dataDetailTable);
            foreach (array_keys($dataDetailTable) as $key) {
                $current_key = current($keys);
                $current_value = $dataDetailTable[$current_key];
                $next_key = next($keys);
                $next_value = @$dataDetailTable[$next_key];
                $tableName = substr($current_key, 0, strpos($current_key, '-'));
                $nextTableName = substr($next_key, 0, strpos($next_key, '-'));
                if ($tableName == 'tabledetailproposedpacking') {
                    $tableDetail = 'tbl_registrationproposedprice';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailinn') {
                    $tableDetail = 'tbl_registrationinn';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailmanufacturer') {
                    $tableDetail = 'tbl_registrationothermanufacturer';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }

                $sId++;
            }

            if ($result > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/add');
        }
        else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }
            if (isset($data['reg_no'])) {
                $this->load->helper('url');

                $reg = $this->myModel->regIdGet($data['reg_no']);
                if (isset($reg[0]))
                    redirect('https://pirims.dra.gov.pk/importregistration/edit/' . $reg[0]->id);
                else
                    redirect('https://pirims.dra.gov.pk/importregistration/lookup');

            }


            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
            }


            if ($this->roleId == 26) {
                $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "License" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response From Applicant" as remarks, "Draft" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                $this->db->from('tbl_registrationhistory as BaseTbl');
                $this->db->where('BaseTbl.isDeleted', 0);
                $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $this->db->limit(1);
                $this->db->order_by('BaseTbl.id', 'desc');
                $query = $this->db->get();
                $count = $query->num_rows();
                if ($count === 0 && $data['registrationStatus'] != 'Draft') {
                    $resultdetail = $this->myModel->recordAjaxSave911(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'Registration', 'userId' => $this->userId, 'fromQ' => "Applicant", 'forwardedTo' => 104, 'dateTime' => $data['updateddate'], 'remarks' => "Response From Applicant", 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_registrationhistory');
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $resultdetail = $this->myModel->recordAjaxSave911($row, 'tbl_registrationhistory');
                    }
                }
            }

            /*if($this->roleId <> 26){
                if($data['sendQueryToCompany'] == '1'){
                    if($data['forwardedTo_detail101']){
                        $resultdetail = $this->myModel->recordAjaxSave911(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'Registration', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo_detail101'], 'remarks' => $data['remarks_detail101'], 'fromQ' => $data['fromQ'], 'sendQueryToCompany' => 1, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_registrationhistory');
                    }
                    $this->db->select('BaseTbl.id, User.email, User.userName');
                    $this->db->from('tbl_license as BaseTbl');
                    $this->db->join('tbls_company as Company','Company.id = BaseTbl.companyId','left');
                    $this->db->join('tbls_user as User','User.companyId = Company.id','left');
                    $this->db->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                    $query = $this->db->get();
                    $count = $query->num_rows();
                    if($count === 0){
                        $this->session->set_flashdata('error', 'No record found.');
                        $result = 0;
                    }
                    if($count > 0){
                        foreach ($query->result() as $row){
                            $id = $row->id;
                            $email = $row->email;
                            $userName = $row->userName;
                        }
                    }
                    // ------------------- Send Mail Start -------------------
                    if(isset($email)){
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | Query';
                        $mailData['title'] = 'Greetings, '.$userName.'!';
                        $mailData['message'] = "Your have a query from DRAP with ref. no ".substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1).".";
                        $mailData['email'] = $email;
                        $sendStatus = mailSend($mailData);
                        if($sendStatus == true){
                            $result = 1;
                        }
                    }
                    if(!isset($email)){
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }
                else{
                    if($data['forwardedTo_detail101']){
                        $resultdetail = $this->myModel->recordAjaxSave911(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'Registration', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo_detail101'], 'remarks' => $data['remarks_detail101'], 'fromQ' => $data['fromQ'], 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_registrationhistory');
                    }
                }
            }*/

            //unset($data['forwardedTo_detail101']);
            //unset($data['remarks_detail101']);
            unset($data['fromQ']);
            //unset($data['sendQueryToCompany']);
            $meetingNo = @$data['meetingNo'];
            $meetingDate = @$data['meetingDate'];
            unset($data['undefined']);
            unset($data['meetingDate']);


            if ($this->roleId == 26) {
                $otherdb = $this->load->database('otherdb', TRUE);

                $otherdb->select('BaseTbl.id, BaseTbl.rniRefNo, BaseTbl.registrationNo, Company.id as companyId, Company.companyUniqueNo, BaseTbl.registrationStatus');
                $otherdb->from('tbl_registration as BaseTbl');
                $otherdb->join('tbls_company as Company', 'Company.id = BaseTbl.companyId', 'left');
                //$otherdb->join('tbls_user as User','User.companyId = Company.id','left');
                $otherdb->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $query = $otherdb->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $id = $row->id;
                        // $email = $row->email;
                        // $userName = $row->userName;
                        $rniRefNo = $row->rniRefNo;
                        $licenseNo = $row->licenseNo;
                        $companyId = $row->companyId;
                        $companyUniqueNo = $row->companyUniqueNo;
                        $registrationStatus = $row->registrationStatus;
                    }
                }
                $otherdb->close();
                if ($data['registrationStatus'] == 'Submitted' && $registrationStatus == 'Referred Back To Company') {
                    $data['registrationStatus'] = 'Under Review';
                }
            }

            $result = $this->loginModel->recordAjaxUpdate('id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), $data, $table);

            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }

            $sId = 0;
            $keys = array_keys($dataDetailTable);
            foreach (array_keys($dataDetailTable) as $key) {
                $current_key = current($keys);
                $current_value = $dataDetailTable[$current_key];
                $next_key = next($keys);
                $next_value = @$dataDetailTable[$next_key];
                $tableName = substr($current_key, 0, strpos($current_key, '-'));
                $nextTableName = substr($next_key, 0, strpos($next_key, '-'));
                if ($tableName == 'tabledetailproposedpacking') {
                    $tableDetail = 'tbl_registrationproposedprice';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailinn') {
                    $tableDetail = 'tbl_registrationinn';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailmanufacturer') {
                    $tableDetail = 'tbl_registrationothermanufacturer';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }

                $sId++;
            }

            if ($data['registrationStatus'] == 'Approved') {
                $otherdb = $this->load->database('otherdb', TRUE);
                $otherdb->select('BaseTbl.licenseNoManual, BaseTbl.issueDateManual, BaseTbl.licFileNo, BaseTbl.validTill, BaseTbl.lastRenewalDate, BaseTbl.licenseTypeId, BaseTbl.siteAddress, BaseTbl.googleMapURL, BaseTbl.latitude, BaseTbl.longitude, BaseTbl.pvma4, BaseTbl.pvma2, BaseTbl.pvma3, BaseTbl.siteVerificationLetter, BaseTbl.layoutPlanLetter, BaseTbl.licenseLetter, BaseTbl.svCoveringLetter, BaseTbl.svFeeChallan, BaseTbl.svStatusOfFirm, BaseTbl.svCopyOfCNIC, BaseTbl.svRegistrationCertificate, BaseTbl.svLandDocument, BaseTbl.svSiteMap, BaseTbl.lpApplicationCoveringLetter, BaseTbl.lpChallanForm, BaseTbl.dmlForm1, BaseTbl.dmlProForma, BaseTbl.dmlLegalStatus, BaseTbl.dmlFeeChallan, BaseTbl.qsDocuments, BaseTbl.qsDocuments2');
                $otherdb->from('tbl_registration as BaseTbl');
                $otherdb->where('BaseTbl.isDeleted', 0);
                $otherdb->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $query = $otherdb->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {

                        $masterId = $this->loginModel->recordAjaxSave($row, 'tbl_registration');

                    }
                }

                $otherdb->select('BaseTbl.id, BaseTbl.companyId');
                $otherdb->from('tbl_registration as BaseTbl');
                $otherdb->where('BaseTbl.isDeleted', 0);
                $otherdb->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $query = $otherdb->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $id = $row->id;
                        $companyId = $row->companyId;
                    }
                }

                $otherdb->select('"' . $masterId . '" as masterId, BaseTbl.packSize, BaseTbl.description, BaseTbl.proposedPrice, BaseTbl.shelfLife');
                $otherdb->from('tbl_registrationproposedprice as BaseTbl');
                $otherdb->where('BaseTbl.isDeleted', 0);
                $otherdb->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $query = $otherdb->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationproposedprice');
                    }
                }
                $otherdb->close();
                $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => $masterId, 'meetingNo' => $meetingNo, 'meetingDate' => $meetingDate], 'tbl_registrationmeeting');
            }

            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect('https://pirims.dra.gov.pk/newregistration/lookup');
        } else {
            $this->accessDenied();
            return;
        }
    }

    function dataDetailTableSave911($masterId, $datadetail, $tableDetail)
    {
        $otherdb = $this->load->database('otherdb', TRUE);
        $idColumn = 'id';
        $keys = array_keys($datadetail);
        $rows = [];
        for ($i = 0, $len = count($datadetail[$keys[0]]); $i < $len; $i++) {
            $rows[$i] = [];
            foreach ($keys as $key) {
                //$rows[$i][$key] = $datadetail[$key][$i];
                $rows[$i][$key] = isset($datadetail[$key][$i]) ? $datadetail[$key][$i] : 'n/a';
            }
        }
        for ($row = 0, $cnt = count($rows); $row < $cnt; $row++) {
            $column_data = $rows[$row];
            $column_keys = array_keys($column_data);
            $id = $column_data[$idColumn];
            $id = trim($id);
            $queryCheck = $otherdb->get_where($tableDetail, array($idColumn => $id, 'masterId' => $masterId));
            $count = $queryCheck->num_rows();
            if ($count === 0) {
                foreach ($column_keys as $key) {
                    $datainsert[$key] = $column_data[$key];
                }
                if (@$_FILES[$key]['tmp_name']) {
                    $datainsert[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
                $datainsert['createdby'] = $this->userId;
                $datainsert['createddate'] = date($this->dateTimeFormat);
                $datainsert['updateddate'] = date($this->dateTimeFormat);
                unset($datainsert['id']);
                $datainsert['masterId'] = $masterId;
                $resultdetail = $this->myModel->recordAjaxSave911($datainsert, $tableDetail);
            }
            if ($count > 0) {
                foreach ($column_keys as $key) {
                    $dataupdate[$key] = $column_data[$key];
                }
                if (@$_FILES[$key]['tmp_name']) {
                    $datainsert[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
                $dataupdate['updatedby'] = $this->userId;
                $dataupdate['updateddate'] = date($this->dateTimeFormat);
                unset($dataupdate['id']);
                $resultdetail = $this->myModel->recordAjaxUpdate911($idColumn, $id, $dataupdate, $tableDetail);
            }
        }
        unset($datadetail);
        unset($rows);
        unset($column_data);
        unset($column_keys);
        unset($datainsert);
        unset($dataupdate);
        $otherdb->close();
        return $resultdetail;
    }

    function verifyChallan()
    {
        $this->load->model("AuthCompanyModel");
        $invoiceNumber = $this->input->post('challan_no');

        if ($this->userId <> 772 && $this->userId <> 770) {
            if ($this->myModel->countChallan($invoiceNumber)[0]->resultCount > 0) {
                echo json_encode(array(
                    "success" => false,
                    "data" => array(),
                    "error" => "Challan Already used"
                ));
                return;
            }

        }

        $response = $this->AuthCompanyModel->verifyChallan($invoiceNumber);
        $repData = json_decode($response);
        if ($this->userId <> 772 && $this->userId <> 770) {
            if ($repData->data->AccountId <> $this->companyUniqueNo) {
                echo json_encode(array(
                    "success" => false,
                    "data" => array(),
                    "error" => "Invalid Challan Number"
                ));
                return;
            }
        }
        echo $response;
    }

    function getCondition($id){
        $letterConditions =  $this->myModel->getAjaxRecords('tbl_letterConditions','id',$id);
        echo json_encode($letterConditions[0]->conditions);
    }

    function registrationData()
    {
        $this->load->model("DataTableModel");

        $records = $this->DataTableModel->make_datatables();


        $draw = isset($_POST["draw"]) ? $_POST["draw"] : 1;
        $data = array();
        $sn = 1;
        foreach ($records as $row) {
            $sub_array = array();
            $sub_array[] = $sn++;
            $sub_array[] = $row->id;
            $sub_array[] = $row->companyName;
            $sub_array[] = $row->registrationNo;
            $sub_array[] = $row->approvedName;
            $sub_array[] = $row->registrationType . ' &mdash; ' . $row->registrationSubType;
            $sub_array[] = $row->registrationFormType;
            $sub_array[] = $row->productOrigin;
            $sub_array[] = $row->productCategory;
            $sub_array[] = $row->usedFor;
            $sub_array[] = date('d-M-y', strtotime(date('d-M-y H:i', strtotime($row->issueDateManual))));
            $sub_array[] = date('d-M-y', strtotime(date('d-M-y H:i', strtotime($row->validTill))));
            $sub_array[] = $row->lastRenewalDateManual;
            // $sub_array[] = ($row->productStatus == 1) ? 'Verified' : ($row->productStatus == 2) ? 'Un-Verified' : ($row->productStatus == 3) ? 'Provisionally Verified' : '';
            $sub_array[] = $row->registrationStatus;

            $sub_array[] = '<div class="btn-group">
                        <a href="https://pirims.dra.gov.pk/importregistration/view/' . $row->id . '" class="btn btn-success"><i class="fa fa-eye"></i></a>
                        <a href="https://pirims.dra.gov.pk/importregistration/edit/' . $row->id . '" class="btn btn-primary" ><i class="fa fa-pencil-alt"></i></a>
                        <a target="_blank" href="https://pirims.dra.gov.pk/report/view/Product Detail/' . $row->id . '" title="Product Detail" class="btn btn-warning"><i class="fa fa-book"></i></a>
                      </div>';

            $data[] = $sub_array;
        }
        $output = array(
            "draw" => intval($draw),
            "recordsTotal" => $this->DataTableModel->get_all_data(),
            "recordsFiltered" => $this->DataTableModel->get_filtered_data(),
            "data" => $data
        );
        echo json_encode($output);
    }

    public function generateXls()
    {
        if ($this->roleId <> 53) {

        }
        // create file name
        $fileName = 'data-' . time() . '.xlsx';
        // load excel library
        $this->load->library('excel');
        $records = $this->myModel->exportDrugs();


        //$this->load->model('Export_model', 'export');
        //$listInfo = $this->export->exportList();
        $objPHPExcel = new PHPExcel();
        $objPHPExcel->setActiveSheetIndex(0);
        // set Header
        $objPHPExcel->getActiveSheet()->SetCellValue('A1', 'Pirims Id');
        $objPHPExcel->getActiveSheet()->SetCellValue('B1', 'Registration No');
        $objPHPExcel->getActiveSheet()->SetCellValue('C1', 'Approved Brand Name');
        $objPHPExcel->getActiveSheet()->SetCellValue('D1', 'Ref Unit');
        $objPHPExcel->getActiveSheet()->SetCellValue('E1', 'Composition');
        $objPHPExcel->getActiveSheet()->SetCellValue('F1', 'Specification');
        $objPHPExcel->getActiveSheet()->SetCellValue('G1', 'Manufacturing Type');
        $objPHPExcel->getActiveSheet()->SetCellValue('H1', 'Manufacturer');
        $objPHPExcel->getActiveSheet()->SetCellValue('I1', 'Company Account Id');
        $objPHPExcel->getActiveSheet()->SetCellValue('J1', 'Company Name');
        $objPHPExcel->getActiveSheet()->SetCellValue('K1', 'Company (RDI)');
        $objPHPExcel->getActiveSheet()->SetCellValue('L1', 'Dosage Form');
        $objPHPExcel->getActiveSheet()->SetCellValue('M1', 'Route of Administration');
        $objPHPExcel->getActiveSheet()->SetCellValue('N1', 'Shelf Life');
        $objPHPExcel->getActiveSheet()->SetCellValue('O1', 'Pack Size');
        $objPHPExcel->getActiveSheet()->SetCellValue('P1', 'Last Renewal');
        $objPHPExcel->getActiveSheet()->SetCellValue('Q1', 'Valid Till');
        $objPHPExcel->getActiveSheet()->SetCellValue('R1', 'Product Category');
        $objPHPExcel->getActiveSheet()->SetCellValue('S1', 'Used For');
        $objPHPExcel->getActiveSheet()->SetCellValue('T1', 'Dealing Section');
        $objPHPExcel->getActiveSheet()->SetCellValue('U1', 'File No');
        $objPHPExcel->getActiveSheet()->SetCellValue('V1', 'Meeting No');
        $objPHPExcel->getActiveSheet()->SetCellValue('W1', 'Product Status');
        $objPHPExcel->getActiveSheet()->SetCellValue('X1', 'Data Status');
        $objPHPExcel->getActiveSheet()->SetCellValue('Y1', 'is Public');
        $objPHPExcel->getActiveSheet()->SetCellValue('Z1', 'Remarks');
        // set Row
        $rowCount = 2;

        foreach ($records as $record) {

            $compositions = $this->myModel->myAjaxAllGet('tbl_registrationinn', 'masterId', $record->id);
            $packsizes = $this->myModel->myAjaxAllGet('tbl_registrationproposedprice', 'masterId', $record->id);
            $manufacturers = $this->myModel->myAjaxAllGet('tbl_registrationothermanufacturer', 'masterId', $record->id);

            $composition_val = '';
            $manufacturer_val = '';
            $packsize_val = '';
            if ($compositions)
                foreach ($compositions as $composition) {
                    $unit = $this->myModel->myAjaxAllGet('tbl_unit', 'id', $composition->unitId);
                    $composition_val .= $composition->innManual . ': ' . $composition->strength . ' ' . (($unit[0]) ? $unit[0]->unit : " - ") . '; ';
                }
            if ($manufacturers)
                foreach ($manufacturers as $manufacturer) {
                    $country = $this->myModel->myAjaxAllGet('tbls_country', 'id', $manufacturer->companyCountry);
                    $manufacturer_val .= $manufacturer->role . ': ' . $manufacturer->companyName . ' ' . $manufacturer->companyAddress . ' ' . (($country[0]) ? $country[0]->countryName : " - ") . '; ';
                }
            if ($packsizes)
                foreach ($packsizes as $packsize) {
                    $packsize_val .= $packsize->packSize . ': ' . $packsize->approvedPrice . '; ';
                }

            $objPHPExcel->getActiveSheet()->SetCellValue('A' . $rowCount, $record->id);
            $objPHPExcel->getActiveSheet()->SetCellValue('B' . $rowCount, $record->registrationNo);
            $objPHPExcel->getActiveSheet()->SetCellValue('C' . $rowCount, $record->approvedName);
            $objPHPExcel->getActiveSheet()->SetCellValue('D' . $rowCount, $record->refUnit);
            $objPHPExcel->getActiveSheet()->SetCellValue('E' . $rowCount, $composition_val);
            $objPHPExcel->getActiveSheet()->SetCellValue('F' . $rowCount, $record->pharmacopeia);
            $objPHPExcel->getActiveSheet()->SetCellValue('G' . $rowCount, $record->regType);
            $objPHPExcel->getActiveSheet()->SetCellValue('H' . $rowCount, $manufacturer_val);
            $objPHPExcel->getActiveSheet()->SetCellValue('I' . $rowCount, $record->companyAccountId);
            $objPHPExcel->getActiveSheet()->SetCellValue('J' . $rowCount, $record->companyName);
            $objPHPExcel->getActiveSheet()->SetCellValue('K' . $rowCount, $record->rdi_regholder);
            $objPHPExcel->getActiveSheet()->SetCellValue('L' . $rowCount, $record->dosageName);
            $objPHPExcel->getActiveSheet()->SetCellValue('M' . $rowCount, $record->routeOfAdmin);
            $objPHPExcel->getActiveSheet()->SetCellValue('N' . $rowCount, $record->shelfLife . ' ' . $record->shelfLifeUnit);
            $objPHPExcel->getActiveSheet()->SetCellValue('O' . $rowCount, $packsize_val);
            $objPHPExcel->getActiveSheet()->SetCellValue('P' . $rowCount, $record->lastRenewalDate);
            $objPHPExcel->getActiveSheet()->SetCellValue('Q' . $rowCount, $record->validTill);
            $objPHPExcel->getActiveSheet()->SetCellValue('R' . $rowCount, $record->productCategory);
            $objPHPExcel->getActiveSheet()->SetCellValue('S' . $rowCount, $record->usedFor);
            $objPHPExcel->getActiveSheet()->SetCellValue('T' . $rowCount, $record->dealingsection);
            $objPHPExcel->getActiveSheet()->SetCellValue('U' . $rowCount, $record->regFileNo);
            $objPHPExcel->getActiveSheet()->SetCellValue('V' . $rowCount, $record->meetingNo);
            $objPHPExcel->getActiveSheet()->SetCellValue('W' . $rowCount, $record->registrationStatus);
            //Data Status
            $prodStatus = '';
            if ($record->productStatus == 1) {
                $prodStatus = "Verified";
            } else if ($record->productStatus == 2) {
                $prodStatus = "Un-Verified";
            } else if ($record->productStatus == 3) {
                $prodStatus = "Provisionally Verified";
            }
            $objPHPExcel->getActiveSheet()->SetCellValue('X' . $rowCount, $prodStatus);
            $objPHPExcel->getActiveSheet()->SetCellValue('Y' . $rowCount, $record->isPublic);
            $objPHPExcel->getActiveSheet()->SetCellValue('Z' . $rowCount, $record->submissionRemarks);
            $rowCount++;
        }
        $filename = "RegisteredProducts-" . date("Y-m-d-H-i-s") . ".xlsx";

        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save('php://output');

    }


    public function generateExcel()
    {
        if ($this->roleId <> 53) {

        }
        // create file name
        $fileName = 'data-' . time() . '.xlsx';
        // load excel library
        $this->load->library('excel');
        $records = $this->myModel->exportDrugs();

        //$this->load->model('Export_model', 'export');
        //$listInfo = $this->export->exportList();
        $objPHPExcel = new PHPExcel();
        $objPHPExcel->setActiveSheetIndex(0);
        // set Header
        $objPHPExcel->getActiveSheet()->SetCellValue('A1', 'Reg Date');
        $objPHPExcel->getActiveSheet()->SetCellValue('B1', 'Registration No');
        $objPHPExcel->getActiveSheet()->SetCellValue('C1', 'Approved Brand Name');
        $objPHPExcel->getActiveSheet()->SetCellValue('D1', 'Ref Unit');
        $objPHPExcel->getActiveSheet()->SetCellValue('E1', 'Composition');
        $objPHPExcel->getActiveSheet()->SetCellValue('F1', 'Specification');
        $objPHPExcel->getActiveSheet()->SetCellValue('G1', 'Manufacturing Type');
        $objPHPExcel->getActiveSheet()->SetCellValue('H1', 'Manufacturer');
        $objPHPExcel->getActiveSheet()->SetCellValue('I1', 'Company Account Id');
        $objPHPExcel->getActiveSheet()->SetCellValue('J1', 'Company Name');
        $objPHPExcel->getActiveSheet()->SetCellValue('K1', 'Product (RDI)');
        $objPHPExcel->getActiveSheet()->SetCellValue('L1', 'Dosage Form');
        $objPHPExcel->getActiveSheet()->SetCellValue('M1', 'Route of Administration');
        $objPHPExcel->getActiveSheet()->SetCellValue('N1', 'Shelf Life');
        $objPHPExcel->getActiveSheet()->SetCellValue('O1', 'Pack Size');
        $objPHPExcel->getActiveSheet()->SetCellValue('P1', 'Last Renewal');
        $objPHPExcel->getActiveSheet()->SetCellValue('Q1', 'Valid Till');
        $objPHPExcel->getActiveSheet()->SetCellValue('R1', 'Product Category');
        $objPHPExcel->getActiveSheet()->SetCellValue('S1', 'Used For');
        $objPHPExcel->getActiveSheet()->SetCellValue('T1', 'Dealing Section');
        $objPHPExcel->getActiveSheet()->SetCellValue('U1', 'File No');
        $objPHPExcel->getActiveSheet()->SetCellValue('V1', 'Pirims Id');
        $objPHPExcel->getActiveSheet()->SetCellValue('W1', 'Product Status');
        $objPHPExcel->getActiveSheet()->SetCellValue('X1', 'Data Status');
        $objPHPExcel->getActiveSheet()->SetCellValue('Y1', 'is Public');
        $objPHPExcel->getActiveSheet()->SetCellValue('Z1', 'Remarks');
        // set Row
        $rowCount = 2;

        foreach ($records as $record) {

            $composition_val = '';
            $manufacturer_val = '';
            $packsize_val = '';
            $compositions = $this->myModel->myAjaxAllGet('tbl_registrationinn', 'masterId', $record->id);
            $packsizes = $this->myModel->myAjaxAllGet('tbl_registrationproposedprice', 'masterId', $record->id);
            $manufacturers = $this->myModel->myAjaxAllGet('tbl_registrationothermanufacturer', 'masterId', $record->id);


            if ($compositions && count($compositions) > 0) {
                foreach ($compositions as $composition) {
                    $cunit = null;
                    if (isset($composition->unitId)) {
                        $unit = $this->myModel->myAjaxAllGet('tbl_unit', 'id', $composition->unitId);
                        $cunit = (isset($unit[0]) ? $unit[0]->unit : " - ");
                    }
                    $composition_val .= $composition->innManual . '_ ' . $composition->strength . ' ' . $cunit . '- ';
                }
            }
            if ($packsizes && count($packsizes) > 0) {
                foreach ($packsizes as $packsize) {
                    $packsize_val .= $packsize->packSize . '_ ' . $packsize->approvedPrice . '- ';
                }
            }
            if ($manufacturers && count($manufacturers) > 0) {
                foreach ($manufacturers as $manufacturer) {
                    $mcountry = null;
                    if (isset($manufacturer->companyCountry)) {
                        $country = $this->myModel->myAjaxAllGet('tbls_country', 'id', $manufacturer->companyCountry);
                        $mcountry = (isset($country[0]) ? $country[0]->countryName : " - ");
                    }
                    $manufacturer_val .= $manufacturer->role . ': ' . $manufacturer->companyName . ' ' . $manufacturer->companyAddress . ' ' . $mcountry . '; ';
                }
            }

            $objPHPExcel->getActiveSheet()->SetCellValue('A' . $rowCount, date('d-m-Y', strtotime(date('d-m-Y H:i', strtotime($record->issueDateManual)))));
            $objPHPExcel->getActiveSheet()->SetCellValue('B' . $rowCount, $record->registrationNo);
            $objPHPExcel->getActiveSheet()->SetCellValue('C' . $rowCount, $record->approvedName);
            $objPHPExcel->getActiveSheet()->SetCellValue('D' . $rowCount, $record->refUnit);
            $objPHPExcel->getActiveSheet()->SetCellValue('E' . $rowCount, $composition_val);
            $objPHPExcel->getActiveSheet()->SetCellValue('F' . $rowCount, $record->pharmacopeia);
            $objPHPExcel->getActiveSheet()->SetCellValue('G' . $rowCount, $record->regType);
            $objPHPExcel->getActiveSheet()->SetCellValue('H' . $rowCount, $manufacturer_val);
            $objPHPExcel->getActiveSheet()->SetCellValue('I' . $rowCount, $record->BaseTbl_companyAccountId);
            $objPHPExcel->getActiveSheet()->SetCellValue('J' . $rowCount, $record->companyName);
            $objPHPExcel->getActiveSheet()->SetCellValue('K' . $rowCount, $record->old_regid);
            $objPHPExcel->getActiveSheet()->SetCellValue('L' . $rowCount, $record->dosageName);
            $objPHPExcel->getActiveSheet()->SetCellValue('M' . $rowCount, $record->routeOfAdmin);
            $objPHPExcel->getActiveSheet()->SetCellValue('N' . $rowCount, $record->shelfLife . ' ' . $record->shelfLifeUnit);
            $objPHPExcel->getActiveSheet()->SetCellValue('O' . $rowCount, $packsize_val);
            $objPHPExcel->getActiveSheet()->SetCellValue('P' . $rowCount, $record->lastRenewalDateManual);
            $objPHPExcel->getActiveSheet()->SetCellValue('Q' . $rowCount, date('d-m-Y', strtotime($record->validTill)));
            $objPHPExcel->getActiveSheet()->SetCellValue('R' . $rowCount, $record->productCategory);
            $objPHPExcel->getActiveSheet()->SetCellValue('S' . $rowCount, $record->usedFor);
            $objPHPExcel->getActiveSheet()->SetCellValue('T' . $rowCount, $record->dealingsection);
            $objPHPExcel->getActiveSheet()->SetCellValue('U' . $rowCount, $record->regFileNo);
            $objPHPExcel->getActiveSheet()->SetCellValue('V' . $rowCount, $record->id);
            $objPHPExcel->getActiveSheet()->SetCellValue('W' . $rowCount, $record->registrationStatus);
            $objPHPExcel->getActiveSheet()->SetCellValue('X' . $rowCount, $record->regFileNo);
            $objPHPExcel->getActiveSheet()->SetCellValue('Y' . $rowCount, $record->id);
            $objPHPExcel->getActiveSheet()->SetCellValue('Z' . $rowCount, $record->registrationStatus);
            //Data Status
            $prodStatus = '';
            if ($record->productStatus == 1) {
                $prodStatus = "Verified";
            } else if ($record->productStatus == 2) {
                $prodStatus = "Un-Verified";
            } else if ($record->productStatus == 3) {
                $prodStatus = "Provisionally Verified";
            }
            $objPHPExcel->getActiveSheet()->SetCellValue('X' . $rowCount, $prodStatus);
            $objPHPExcel->getActiveSheet()->SetCellValue('Y' . $rowCount, $record->isPublic);
            $objPHPExcel->getActiveSheet()->SetCellValue('Z' . $rowCount, $record->submissionRemarks);

            $rowCount++;
        }
        $filename = "RegisteredProducts-" . date("Y-m-d-H-i-s") . ".xlsx";

        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        //$objWriter->save(str_replace(__FILE__,'backup/RegProducts.xlsx',__FILE__));
        $objWriter->save('php://output');

    }


    // new method for generating excel file for user (umer)
    public function generateExcelfile()
    {
        if ($this->roleId <> 53) {

        }
        // create file name
        $fileName = 'data-' . time() . '.xlsx';
        // load excel library
        $this->load->library('excel');
        $records = $this->myModel->exportDrugs();

        //$this->load->model('Export_model', 'export');
        //$listInfo = $this->export->exportList();
        $objPHPExcel = new PHPExcel();
        $objPHPExcel->setActiveSheetIndex(0);
        // set Header
        $objPHPExcel->getActiveSheet()->SetCellValue('A1', 'Registration No');
        $objPHPExcel->getActiveSheet()->SetCellValue('B1', 'Brand Name');
        $objPHPExcel->getActiveSheet()->SetCellValue('C1', 'Reference Unit');
        $objPHPExcel->getActiveSheet()->SetCellValue('D1', 'Composition');
        $objPHPExcel->getActiveSheet()->SetCellValue('E1', 'Finished Product Specification');
        $objPHPExcel->getActiveSheet()->SetCellValue('F1', 'Manufacturing Type');
        $objPHPExcel->getActiveSheet()->SetCellValue('G1', 'Manufacturer(in case of Contract, Import and Source');
        $objPHPExcel->getActiveSheet()->SetCellValue('H1', 'Company Name & Address');
        $objPHPExcel->getActiveSheet()->SetCellValue('I1', 'DSL NO/DSL NO');
        $objPHPExcel->getActiveSheet()->SetCellValue('J1', 'Dosage Form');
        $objPHPExcel->getActiveSheet()->SetCellValue('K1', 'Route of Administration');
        $objPHPExcel->getActiveSheet()->SetCellValue('L1', 'Shelf Life');
        $objPHPExcel->getActiveSheet()->SetCellValue('M1', 'Pack Size & Initial MRP');
        $objPHPExcel->getActiveSheet()->SetCellValue('N1', 'Reg Date');
        $objPHPExcel->getActiveSheet()->SetCellValue('O1', 'Product Category');
        $objPHPExcel->getActiveSheet()->SetCellValue('P1', 'Used For');
        $objPHPExcel->getActiveSheet()->SetCellValue('Q1', 'Current Dealing Section of PE & R /BE & R');
        $objPHPExcel->getActiveSheet()->SetCellValue('R1', 'File No');
        $objPHPExcel->getActiveSheet()->SetCellValue('S1', 'Product Status');
        $objPHPExcel->getActiveSheet()->SetCellValue('T1', 'Remarks (if any)');

        // set Row
        $rowCount = 2;

        foreach ($records as $record) {

            $composition_val = '';
            $manufacturer_val = '';
            $packsize_val = '';
            $compositions = $this->myModel->myAjaxAllGet('tbl_registrationinn', 'masterId', $record->id);
            $packsizes = $this->myModel->myAjaxAllGet('tbl_registrationproposedprice', 'masterId', $record->id);
            $manufacturers = $this->myModel->myAjaxAllGet('tbl_registrationothermanufacturer', 'masterId', $record->id);


            if ($compositions && count($compositions) > 0) {
                foreach ($compositions as $composition) {
                    $cunit = null;
                    if (isset($composition->unitId)) {
                        $unit = $this->myModel->myAjaxAllGet('tbl_unit', 'id', $composition->unitId);
                        $cunit = (isset($unit[0]) ? $unit[0]->unit : " - ");
                    }
                    $composition_val .= $composition->innManual . '_ ' . $composition->strength . ' ' . $cunit . '- ';
                }
            }
            if ($packsizes && count($packsizes) > 0) {
                foreach ($packsizes as $packsize) {
                    $packsize_val .= $packsize->packSize . '_ ' . $packsize->approvedPrice . '- ';
                }
            }
            if ($manufacturers && count($manufacturers) > 0) {
                foreach ($manufacturers as $manufacturer) {
                    $mcountry = null;
                    if (isset($manufacturer->companyCountry)) {
                        $country = $this->myModel->myAjaxAllGet('tbls_country', 'id', $manufacturer->companyCountry);
                        $mcountry = (isset($country[0]) ? $country[0]->countryName : " - ");
                    }
                    $manufacturer_val .= $manufacturer->role . ': ' . $manufacturer->companyName . ' ' . $manufacturer->companyAddress . ' ' . $mcountry . '; ';
                }
            }

            $objPHPExcel->getActiveSheet()->SetCellValue('A' . $rowCount, $record->registrationNo);
            $objPHPExcel->getActiveSheet()->SetCellValue('B' . $rowCount, $record->approvedName);
            $objPHPExcel->getActiveSheet()->SetCellValue('C' . $rowCount, $record->refUnit);
            $objPHPExcel->getActiveSheet()->SetCellValue('D' . $rowCount, $composition_val);
            $objPHPExcel->getActiveSheet()->SetCellValue('E' . $rowCount, $record->pharmacopeia);
            $objPHPExcel->getActiveSheet()->SetCellValue('F' . $rowCount, $record->regType);
            $objPHPExcel->getActiveSheet()->SetCellValue('G' . $rowCount, $manufacturer_val);
            $objPHPExcel->getActiveSheet()->SetCellValue('H' . $rowCount, $record->companyName);
            $objPHPExcel->getActiveSheet()->SetCellValue('I' . $rowCount, $record->isPublic);
            $objPHPExcel->getActiveSheet()->SetCellValue('J' . $rowCount, $record->dosageName);
            $objPHPExcel->getActiveSheet()->SetCellValue('K' . $rowCount, $record->routeOfAdmin);
            $objPHPExcel->getActiveSheet()->SetCellValue('L' . $rowCount, $record->shelfLife . ' ' . $record->shelfLifeUnit);
            $objPHPExcel->getActiveSheet()->SetCellValue('M' . $rowCount, $packsize_val);
            $objPHPExcel->getActiveSheet()->SetCellValue('N' . $rowCount, date('d-m-Y', strtotime(date('d-m-Y H:i', strtotime($record->issueDateManual)))));
            $objPHPExcel->getActiveSheet()->SetCellValue('O' . $rowCount, $record->productCategory);
            $objPHPExcel->getActiveSheet()->SetCellValue('P' . $rowCount, $record->usedFor);
            $objPHPExcel->getActiveSheet()->SetCellValue('Q' . $rowCount, $record->dealingsection);
            $objPHPExcel->getActiveSheet()->SetCellValue('R' . $rowCount, $record->regFileNo);
            $objPHPExcel->getActiveSheet()->SetCellValue('S' . $rowCount, $record->registrationStatus);
            $objPHPExcel->getActiveSheet()->SetCellValue('T' . $rowCount, $record->isPublic);

            //Data Status
            $prodStatus = '';



            $rowCount++;
        }
        $filename = "RegisteredProducts-" . date("Y-m-d-H-i-s") . ".xlsx";

        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        //$objWriter->save(str_replace(__FILE__,'backup/RegProducts.xlsx',__FILE__));
        $objWriter->save('php://output');

    }



    function registrationquery($action = NULL, $id = NULL, $type = NULL, $masterId = NULL)
    {

        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        $myAction = '';
        if ($action == 'submit') {
            if (explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            }
            if (explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            }

            if ($myAction == 'add') {
                $myAction = 'save';
            }
            if ($myAction == 'edit') {
                $myAction = 'update';
            }
        }

        $table = 'tbl_' . __FUNCTION__;
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;

        $data['recordsEdit'] = $this->myModel->$functionNameEdit($id,$type, $table);
        $data['companies'] = $this->myModel->companiesGet();

        $data['officers'] = $this->myModel->getRegistrationASD();

        if ($action == 'lookup' && $recordLookup == 1) {
            $data['records'] = $this->myModel->$functionName($table, $searchText);

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }
            $data['companyId'] = $id;

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }
            $data['companyId'] = $id;

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }


            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;

            if($data['queryStatus'] == 'Submit'){
                $data['status'] = 'Active';
            }
            unset($data['queryStatus']);


            $companyRecord = $this->myModel->getRecord('tbls_company', 'id', $data['companyId']);
            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $companyRecord[0]->companyUniqueNo, 'docs');
                }
            }
            if($this->roleId == 26){
                $data['officerid'] = $data['forwardTo'];
            }else{
                $data['officerid'] = $this->userId;
            }

            $result = $this->myModel->recordAjaxSave911($data, $table);

            if ($result > 0) {

                if($data['status'] == 'Active'  && $this->roleId <> 26) {
                    $compUser = $this->myModel->getRecords('tbls_user', 'companyId', $data['companyId']);

                    // ------------------- Send Mail Start -------------------
                    if (isset($compUser[0]->email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | Query';
                        $mailData['title'] = 'Greetings, ' . $compUser[0]->userName . '!';
                        $mailData['message'] = "Your have a query from DRAP Registration, Please Login to PIRIMS and proceed to Registraation Queries.";
                        $mailData['email'] = $compUser[0]->email;
                        $sendStatus = emailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }

                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }


            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;

            if ($data['queryStatus'] == 'Submit') {
                $data['status'] = 'Active';
            }
            unset($data['queryStatus']);


            $companyRecord = $this->myModel->getRecord('tbls_company', 'id', $data['companyId']);

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $companyRecord[0]->companyUniqueNo, 'docs');
                }
            }
            if($this->roleId == 26){
                $data['officerid'] = $data['forwardTo'];
            }else{
                $data['officerid'] = $this->userId;
            }

            if (isset($data['queryId'])) {

                $qid = $data['queryId'];
                unset($data['queryId']);
                $result = $this->myModel->recordAjaxUpdate911('id', $qid, $data, $table);

            }else{

                $result = $this->myModel->recordAjaxSave911($data, $table);
            }

            if ($result > 0) {

                $compUser = $this->myModel->getRecords('tbls_user', 'companyId', $data['companyId']);

                if ($data['status'] == 'Active' && $this->roleId <> 26) {
                    // ------------------- Send Mail Start -------------------
                    if (isset($compUser[0]->email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | Query';
                        $mailData['title'] = 'Greetings, ' . $compUser[0]->userName . '!';
                        $mailData['message'] = "Your have a query from DRAP Registration, Please Login to PIRIMS and proceed to Registraation Queries.";
                        $mailData['email'] = $compUser[0]->email;
                        $sendStatus = emailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }
            }


            redirect(__FUNCTION__ . '/lookup');
        } else {
            $this->accessDenied();
            return;
        }
    }

    function newexportregistration($action = NULL, $id = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;
        $myAction = '';
        if ($action == 'submit') {
            if (explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            }
            if (explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            }
            if ($myAction == 'add') {
                $myAction = 'save';
            }
            if ($myAction == 'edit') {
                $myAction = 'update';
            }
        }


        $table = 'tbl_registration';
        $searchText = $this->input->post('searchText');
        $data['searchText'] = $searchText;
        $data['records'] = $this->myModel->$functionName($table, $searchText);
        $data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);
        $data['recordsDetailProposedPacking'] = $this->myModel->applyregistrationDetailProposedPackingEdit($id);
        $data['recordsDetailINN'] = $this->myModel->applyregistrationDetailINNEdit($id);
        $data['recordsDetailOtherManufacturer'] = $this->myModel->applyregistrationOtherManufacturerEdit($id);
        $data['letterConditions'] = $this->myModel->registrationLetterConditionsGet();

        $data['recordsDetailHistory'] = $this->myModel->registrationDetailHistoryEdit($id);
        $data['recordsDetailQuery'] = $this->myModel->registrationDetailQueryEdit($id);
        //$data['products'] = $this->myModel->companyProductsGet();
        $data['companies'] = $this->myModel->companiesGet();
        $data['countries'] = $this->myModel->countriesGet();
        $data['registrationType'] = $this->myModel->registrationTypeGet();
        $data['pharmacopeia'] = $this->myModel->pharmacopeiaGet();
        $data['atcCode'] = $this->myModel->atcCodeGet();
        $data['innCode'] = $this->myModel->innCodeGet();
        $data['refunits'] = array_values(array_filter(array_column($this->myModel->refUnitsGet(), 'refUnit')));
        $data['filenumbers'] = array_values(array_filter(array_column($this->myModel->filenumbersGet(), 'regFileNo')));
        $data['generics'] = array_values(array_filter(array_column($this->myModel->genericGet(), 'innManual')));

        $data['historyDesignation'] = $this->myModel->registrationExportDesignationGet();

        $data['productOrigin'] = $this->myModel->productOriginGet();
        $data['productCategory'] = $this->myModel->productCategoryGet();
        $data['usedFor'] = $this->myModel->usedForGet();
        $data['dosageForm'] = $this->myModel->dosageFormGet();

        $data['basicDose'] = $this->myModel->basicDoseGet();
        $data['pharmaDose'] = $this->myModel->pharmaDoseGet();
        $data['combinedPharmaDose'] = $this->myModel->combinedPharmaDoseGet();
        $data['releaseCharacteristics'] = $this->myModel->releaseCharacteristicsGet();
        $data['transformation'] = $this->myModel->transformationGet();
        $data['adminMethod'] = $this->myModel->adminMethodGet();
        $data['intendedSite'] = $this->myModel->intendedSiteGet();
        $data['presentationUnit'] = $this->myModel->presentationUnitGet();
        $data['packagingCategory'] = $this->myModel->packagingCategoryGet();
        $data['routeOfAdmin'] = $this->myModel->routeOfAdminGet();
        $data['unit'] = $this->myModel->unitGet();
        $data['labelClaim'] = $this->myModel->labelClaimGet();

        $data['licenserecord'] = ($this->roleId <> 26) ? $this->myModel->getCompanyApprovedLicense(@$data['recordsEdit'][0]->companyAccountId) : $this->myModel->getCompanyApprovedLicense($this->companyUniqueNo);

        $data['recordsDetailQualifiedStaff'] = $this->myModel->applylicenseDetailQualifiedStaffAllEdit(@$data['licenserecord'][0]->id);
        $data['recordsDetailSection'] = $this->myModel->applylicenseDetailSectionEdit(@$data['licenserecord'][0]->id);
        $data['recordsDetailFacility'] = $this->myModel->applylicenseDetailFacilityEdit(@$data['licenserecord'][0]->id);

        $data['regulatoryBody'] = $this->myModel->regulatoryBodyGet();
        $data['priorityReason'] = $this->myModel->registrationPriorityReasonGet();
        $data['inspectionType'] = $this->myModel->inspectionTypeRegistrationGet();
        //$data['licenses'] = $this->myModel->licensesGet1(@$data['recordsEdit'][0]->companyId);
        $data['licenseApproved1'] = ($this->roleId <> 26) ? $this->myModel->licenseApprovedGet(@$data['recordsEdit'][0]->companyId) : $this->myModel->licenseApprovedGet($this->companyId);
        $data['allApprovedLicenses'] = $this->myModel->allApprovedLicensesGet();
        $data['licenseApproved'] = $this->myModel->licenseApprovedGet(@$data['recordsEdit'][0]->companyId);


        if ($action == 'lookup' && $recordLookup == 1) {
            $this->loadViews('company/' . $this->companyName . '/exportreg/' . __FUNCTION__, $this->global, $data, NULL);
        } else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/exportreg/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            if ($data['recordsEdit'][0]->registrationStatus == 'Draft' ) {
                if ($this->roleId <> '26' || $data['recordsEdit'][0]->companyUniqueNo <> $this->companyUniqueNo) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            } else if ($data['recordsEdit'][0]->registrationStatus == 'Submitted' || $data['recordsEdit'][0]->registrationStatus == 'Re Submitted') {
                if ($this->roleId <> '55') {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }
            else if($data['recordsEdit'][0]->registrationStatus == 'Referred Back To Company (Locked)'){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            else if($data['recordsEdit'][0]->registrationStatus == 'Deferred and Closed'){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(__FUNCTION__ . '/lookup');
            }
            else {
                if ($data['recordsEdit'][0]->lastAssignedUserId <> $this->userId) {
                    $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                    redirect(__FUNCTION__ . '/lookup');
                }
            }

            $this->loadViews('company/' . $this->companyName . '/exportreg/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/exportreg/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $data['isexport'] = 1;
            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $data['registrationTypeId'] = 1;
            $data['companyAccountId'] = $this->companyUniqueNo;

            if($data['registrationStatus'] == 'Save'){
                $data['registrationStatus'] = 'Draft';
            }
            else if($data['registrationStatus'] == 'Submit'){
                $data['registrationStatus'] = 'Submitted';
            }

            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }


            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
            }


            // if($data['forwardedTo_detail101']){
            //     $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo_detail101'], 'remarks' => $data['remarks_detail101'], 'fromQ' => $data['fromQ'], 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
            // }
            //unset($data['forwardedTo_detail101']);
            unset($data['remarks_detail101']);
            unset($data['fromQ']);
            //unset($data['sendQueryToCompany']);
            unset($data['undefined']);
            unset($data['meetingDate']);

            $result = $this->loginModel->recordAjaxSave($data, $table);

            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }


            $sId = 0;
            $keys = array_keys($dataDetailTable);
            foreach (array_keys($dataDetailTable) as $key) {
                $current_key = current($keys);
                $current_value = $dataDetailTable[$current_key];
                $next_key = next($keys);
                $next_value = @$dataDetailTable[$next_key];
                $tableName = substr($current_key, 0, strpos($current_key, '-'));
                $nextTableName = substr($next_key, 0, strpos($next_key, '-'));
                if ($tableName == 'tabledetailproposedpacking') {
                    $tableDetail = 'tbl_registrationproposedprice';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailinn') {
                    $tableDetail = 'tbl_registrationinn';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailmanufacturer') {
                    $tableDetail = 'tbl_registrationothermanufacturer';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }

                $sId++;
            }

            if ($result > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;



            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
            }




            // Registration  Workflow Update START
            $this->db->select('BaseTbl.id,BaseTbl.parentId, User.email, User.userName, BaseTbl.rniRefNo, BaseTbl.registrationNo, BaseTbl.inspectionRequired, BaseTbl.inspectionTypeId, Company.id as companyId, Company.companyUniqueNo, BaseTbl.registrationStatus');
            $this->db->from('tbl_registration as BaseTbl');
            $this->db->join('tbl_license as License', 'License.id = BaseTbl.masterId', 'left');
            $this->db->join('tbls_company as Company', 'Company.companyUniqueNo = BaseTbl.companyAccountId', 'left');
            $this->db->join('tbls_user as User', 'User.companyId = Company.id', 'left');
            $this->db->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
            $query = $this->db->get();
            $count = $query->num_rows();
            if ($count === 0) {
                $this->session->set_flashdata('error', 'No record found.');
                $result = 0;
            }
            if ($count > 0) {
                foreach ($query->result() as $row) {
                    $id = $row->id;
                    $parentId = $row->parentId;
                    $email = $row->email;
                    $userName = $row->userName;
                    $rniRefNo = 'PIRIMS-Ref-'.$id;
                    //$rniRefNo = $row->rniRefNo;
                    $registrationNo = $row->registrationNo;
                    $inspectionRequired = $row->inspectionRequired;
                    $inspectionTypeId = $row->inspectionTypeId;
                    $companyId = $row->companyId;
                    $companyUniqueNo = $row->companyUniqueNo;
                    $registrationStatus = $row->registrationStatus;
                }
            }

            if ($this->roleId == 26) {
                // check if already challan is added
                $this->db->select('"' . $result . '" as masterId, BaseTbl.challan_no, ');
                $this->db->from('tbl_challan as BaseTbl');
                $this->db->where('BaseTbl.isDeleted', 0);
                $this->db->where('BaseTbl.usedfor', 'Registration');
                $this->db->where('BaseTbl.masterId', $id);
                $query = $this->db->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->loginModel->recordAjaxSave(['masterId' => $id,
                        'usedfor' => 'Export Registration',
                        'challan_no' => $data['challan_no'],
                        'challan_fee' => $data['challan_fee'],
                        'challan_status' => $data['challan_status'],
                        'challan_msg' => $data['challan_msg'],
                        'challan_account_id' => $data['challan_account_id'],
                        'challan_account_title' => $data['challan_account_title'],
                        'challan_date' => $data['challan_date'],
                        'status' => $data['challan_status'],
                        'createdby' => $data['updatedby'],
                        'createddate' => $data['updateddate']
                    ], 'tbl_challan');
                    unset($data['challan_no']);
                    unset($data['challan_fee']);
                    unset($data['challan_status']);
                    unset($data['challan_msg']);
                    unset($data['challan_account_id']);
                    unset($data['challan_account_title']);
                    unset($data['challan_date']);
                }
            }


            if ($this->roleId == 26 && $data['registrationStatus'] != 'Save') {
                $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "License" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response From Applicant" as remarks, "Draft" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                $this->db->from('tbl_registrationhistory as BaseTbl');
                $this->db->where('BaseTbl.isDeleted', 0);
                $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $this->db->limit(1);
                $this->db->order_by('BaseTbl.id', 'desc');
                $query = $this->db->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'Registration Export', 'userId' => $this->userId, 'fromQ' => "Applicant", 'forwardedTo' => 104, 'dateTime' => $data['updateddate'], 'remarks' => "Response From Applicant", 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_registrationhistory');
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationhistory');
                    }
                }


            }
            if ($this->roleId == 26){
                if ($data['registrationStatus'] == 'Save') {
                    $data['registrationStatus'] = $registrationStatus;
                }
                if ($data['registrationStatus'] == 'Submit') {
                    if ($registrationStatus == 'Draft') {
                        $data['registrationStatus'] = 'Submitted';
                        $data['submissionDate'] = date($this->dateTimeFormat);
                    }
                }
            }


            if ($this->roleId <> 26 && $data['registrationStatus'] <> 'Save') {
                if ($data['registrationStatus'] == 'Proceed') {

                    if (($registrationStatus == 'Submitted' || $registrationStatus == 'Re Submitted') && $this->roleId == 55) {
                        $data['registrationStatus'] = 'Under Review';
                    }else{
                        $data['registrationStatus'] = $registrationStatus;
                    }
                }
                /*
                if ($registrationStatus == 'Under Review Stage 1' && $data['registrationStatus'] = 'fwdagenda' && $this->roleId == 55) {
                    $data['registrationStatus'] = 'Under Board Stage 1';
                }
                if ($registrationStatus == 'Under Board Stage 1' && $data['registrationStatus'] = 'minutesapproval' && $this->roleId == 55) {
                    $data['registrationStatus'] = 'Under Board Stage 2';
                }
                if ($registrationStatus == 'Under Board Stage 2' && $data['registrationStatus'] = 'approveminutes' && $this->roleId == 7) {
                    $data['registrationStatus'] = 'Recommended By Board Stage 3';
                }
                if ($registrationStatus == 'Under Board Stage 2' && $data['registrationStatus'] = 'changeminutes' && $this->roleId == 7) {
                    $data['registrationStatus'] = 'Under Board Stage 1';
                }
                if ($registrationStatus == 'Recommended By Board Stage 3' && $data['registrationStatus'] = 'Approved' && $this->roleId == 55) {
                    //Approval
                }
                if ($registrationStatus == 'Recommended By Board Stage 3' && $data['registrationStatus'] = 'Deferred and Closed' && $this->roleId == 55) {
                    //Deferred and Close
                }
                */
                if ($data['registrationStatus'] == 'Approved' && $this->roleId == 55) {
                    $data['registrationStatus'] = 'Approved';
                    //$data['issueDateManual'] = date($this->dateTimeFormat);
                    //$validTill1 = date_create(date('Y-m-d H:i', strtotime(date('Y-m-d') . ' +5 YEAR')));
                    //$validTill1 = date_format($validTill1, $this->dateTimeFormat);
                    //$data['validTill'] = $validTill1;
                    //$data['registrationNo'] = 'R-R-' . $id;
                    $data['status'] = 'Active';
                    // ------------------- Send Mail Start -------------------
                    $email = 'codegic@gmail.com';
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | Registration For Export Approved';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your registration for export application with ref. no " . $rniRefNo . " has been approved. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = emailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------

                }
                if ($data['registrationStatus'] == 'Deferred and Closed' && $this->roleId == 55) {
                    $data['registrationStatus'] = 'Deferred and Closed';
                    // ------------------- Send Mail Start -------------------
                    if (isset($email)) {
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | Registration For Export Rejected';
                        $mailData['title'] = 'Greetings, ' . $userName . '!';
                        $mailData['message'] = "Your registration for export application with ref. no " . $rniRefNo . " has been rejected. In case of any query please write us at: support.pirims@dra.gov.pk";
                        $mailData['email'] = $email;
                        $sendStatus = mailSend($mailData);
                        if ($sendStatus == true) {
                            $result = 1;
                        }
                    }
                    if (!isset($email)) {
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }

                if ($data['forwardedTo_detail101']) {
                    $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'Registration Export', 'fromQ'=>$data['fromQ'], 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo_detail101'], 'remarks' => $data['remarks_detail101'], 'status' => $registrationStatus, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_registrationhistory');
                    if ($data['sendQueryToCompany'] == '1') {
                        $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'dateTime' => date($this->dateTimeFormat), 'title' => 'Registration Export', 'type' => 'Registration Export', 'message' => $data['remarks_detail101'], 'shortcomming' => $data['reviewer1Remarks'], 'userId' => $this->userId, 'authorization' => 'Granted', 'applicationStatus' => $registrationStatus, 'qtype'=>'Reg', 'status' => 'Info Required From Company', 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_query');
                        $email = 'codegic@gmail.com';
                        if (isset($email)) {
                            $mailData['from'] = 'DRAP';
                            $mailData['subject'] = 'PIRIMS | Registration For Export Query';
                            $mailData['title'] = 'Greetings, ' . $userName . '!';
                            $mailData['message'] = "Your have a query from DRAP of registration for export application with ref. no " . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . ".";
                            $mailData['email'] = $email;
                            $sendStatus = emailSend($mailData);
                            if ($sendStatus == true) {
                                $result = 1;
                            }
                        }
                        if (!isset($email)) {
                            $result = 0;
                        }
                        // ------------------- Send Mail End -------------------

                    }
                }
            }

            if ($data['registrationStatus'] == 'Save') {
                $data['registrationStatus'] = $registrationStatus;
            }


            unset($data['forwardedTo_detail101']);
            unset($data['remarks_detail101']);
            unset($data['sendQueryToCompany']);
            unset($data['parentId']);

            //unset($data['forwardedTo_detail101']);
            //unset($data['remarks_detail101']);
            unset($data['fromQ']);
            //unset($data['sendQueryToCompany']);
            $meetingNo = @$data['meetingNo'];
            $meetingDate = @$data['meetingDate'];
            unset($data['undefined']);
            unset($data['meetingDate']);



            if ($this->roleId == 26) {
                $this->db->select('BaseTbl.id, BaseTbl.rniRefNo, BaseTbl.registrationNo, Company.id as companyId, Company.companyUniqueNo, BaseTbl.registrationStatus');
                $this->db->from('tbl_registration as BaseTbl');
                $this->db->join('tbls_company as Company', 'Company.companyUniqueNo = BaseTbl.companyAccountId', 'left');
                $this->db->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $query = $this->db->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $id = $row->id;
                        // $email = $row->email;
                        // $userName = $row->userName;
                        $rniRefNo = $row->rniRefNo;
                        $licenseNo = $row->licenseNo;
                        $companyId = $row->companyId;
                        $companyUniqueNo = $row->companyUniqueNo;
                        $registrationStatus = $row->registrationStatus;
                    }
                }
                if ($data['registrationStatus'] == 'Submitted' && $registrationStatus == 'Referred Back To Company') {
                    $data['registrationStatus'] = 'Under Review';
                }
            }

            $result = $this->loginModel->recordAjaxUpdate('id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), $data, $table);

            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }

            $sId = 0;
            $keys = array_keys($dataDetailTable);
            foreach (array_keys($dataDetailTable) as $key) {
                $current_key = current($keys);
                $current_value = $dataDetailTable[$current_key];
                $next_key = next($keys);
                $next_value = @$dataDetailTable[$next_key];
                $tableName = substr($current_key, 0, strpos($current_key, '-'));
                $nextTableName = substr($next_key, 0, strpos($next_key, '-'));
                if ($tableName == 'tabledetailproposedpacking') {
                    $tableDetail = 'tbl_registrationproposedprice';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailinn') {
                    $tableDetail = 'tbl_registrationinn';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailmanufacturer') {
                    $tableDetail = 'tbl_registrationothermanufacturer';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }

                $sId++;
            }

            /*
            if ($data['registrationStatus'] == 'Approved') {
                $otherdb = $this->load->database('otherdb', TRUE);
                $otherdb->select('BaseTbl.licenseNoManual, BaseTbl.issueDateManual, BaseTbl.licFileNo, BaseTbl.validTill, BaseTbl.lastRenewalDate, BaseTbl.licenseTypeId, BaseTbl.siteAddress, BaseTbl.googleMapURL, BaseTbl.latitude, BaseTbl.longitude, BaseTbl.pvma4, BaseTbl.pvma2, BaseTbl.pvma3, BaseTbl.siteVerificationLetter, BaseTbl.layoutPlanLetter, BaseTbl.licenseLetter, BaseTbl.svCoveringLetter, BaseTbl.svFeeChallan, BaseTbl.svStatusOfFirm, BaseTbl.svCopyOfCNIC, BaseTbl.svRegistrationCertificate, BaseTbl.svLandDocument, BaseTbl.svSiteMap, BaseTbl.lpApplicationCoveringLetter, BaseTbl.lpChallanForm, BaseTbl.dmlForm1, BaseTbl.dmlProForma, BaseTbl.dmlLegalStatus, BaseTbl.dmlFeeChallan, BaseTbl.qsDocuments, BaseTbl.qsDocuments2');
                $otherdb->from('tbl_registration as BaseTbl');
                $otherdb->where('BaseTbl.isDeleted', 0);
                $otherdb->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $query = $otherdb->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {

                        $masterId = $this->loginModel->recordAjaxSave($row, 'tbl_registration');

                    }
                }

                $otherdb->select('BaseTbl.id, BaseTbl.companyId');
                $otherdb->from('tbl_registration as BaseTbl');
                $otherdb->where('BaseTbl.isDeleted', 0);
                $otherdb->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $query = $otherdb->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $id = $row->id;
                        $companyId = $row->companyId;
                    }
                }

                $otherdb->select('"' . $masterId . '" as masterId, BaseTbl.packSize, BaseTbl.description, BaseTbl.proposedPrice, BaseTbl.shelfLife');
                $otherdb->from('tbl_registrationproposedprice as BaseTbl');
                $otherdb->where('BaseTbl.isDeleted', 0);
                $otherdb->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $query = $otherdb->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationproposedprice');
                    }
                }

                $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => $masterId, 'meetingNo' => $meetingNo, 'meetingDate' => $meetingDate], 'tbl_registrationmeeting');
            }

            */
            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        } else {
            $this->accessDenied();
            return;
        }
    }


    function exportregistrationData()
    {
        $this->load->model("DataTableModel");

        $records = $this->DataTableModel->exportregistration_datatables();


        $draw = isset($_POST["draw"]) ? $_POST["draw"] : 1;
        $data = array();
        $sn = 1;
        foreach ($records as $row) {
            $sub_array = array();
            $sub_array[] = $sn++;
            $sub_array[] = $row->id;
            $sub_array[] = $row->companyName;
            $sub_array[] = $row->registrationNo;
            $sub_array[] = $row->approvedName;
            $sub_array[] = $row->registrationType . ' &mdash; ' . $row->registrationSubType;
            $sub_array[] = $row->registrationFormType;
            $sub_array[] = $row->productOrigin;
            $sub_array[] = $row->productCategory;
            $sub_array[] = $row->usedFor;
            $sub_array[] = date('d-M-y', strtotime(date('d-M-y H:i', strtotime($row->issueDateManual))));
            $sub_array[] = date('d-M-y', strtotime(date('d-M-y H:i', strtotime($row->validTill))));
            $sub_array[] = $row->lastRenewalDateManual;
            // $sub_array[] = ($row->productStatus == 1) ? 'Verified' : ($row->productStatus == 2) ? 'Un-Verified' : ($row->productStatus == 3) ? 'Provisionally Verified' : '';
            $sub_array[] = $row->registrationStatus;

            $sub_array[] = '<div class="btn-group">
                        <a href="https://pirims.dra.gov.pk/importregistration/view/' . $row->id . '" class="btn btn-success"><i class="fa fa-eye"></i></a>
                        <a href="https://pirims.dra.gov.pk/importregistration/edit/' . $row->id . '" class="btn btn-primary" ><i class="fa fa-pencil-alt"></i></a>
                        <a target="_blank" href="https://pirims.dra.gov.pk/report/view/Product Detail/' . $row->id . '" title="Product Detail" class="btn btn-warning"><i class="fa fa-book"></i></a>
                      </div>';

            $data[] = $sub_array;
        }
        $output = array(
            "draw" => intval($draw),
            "recordsTotal" => $this->DataTableModel->get_exportreg_data(),
            "recordsFiltered" => $this->DataTableModel->get_exportregfiltered_data(),
            "data" => $data
        );
        echo json_encode($output);
    }
    function registrationRecord($action = NULL, $id = NULL)
    {

        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;
        $functionNameEdit = __FUNCTION__ . 'Edit';

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;
        $myAction = '';
        if ($action == 'submit') {
            if (explode('/', $_SERVER['HTTP_REFERER'])[4] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[5];
            }
            if (explode('/', $_SERVER['HTTP_REFERER'])[3] == __FUNCTION__) {
                $myAction = explode('/', $_SERVER['HTTP_REFERER'])[4];
            }
            if ($myAction == 'add') {
                $myAction = 'save';
            }
            if ($myAction == 'edit') {
                $myAction = 'update';
            }
        }


        $table = 'tbl_registration';
        if($action == 'add' || $action == 'edit' || $action == 'view'){
            //$data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);
            $data['recordsDetailProposedPacking'] = $this->myModel->applyregistrationDetailProposedPackingEdit($id);
            $data['recordsDetailINN'] = $this->myModel->applyregistrationDetailINNEdit($id);
            $data['recordsDetailOtherManufacturer'] = $this->myModel->applyregistrationOtherManufacturerEdit($id);
            $data['companies'] = $this->myModel->companiesGet();
//            $data['companies'] = $this->myModel->companiesApprovedLicenseGet();
            $data['countries'] = $this->myModel->countriesGet();
            $data['pharmacopeia'] = $this->myModel->pharmacopeiaGet();
            $data['generics'] = array_values(array_filter(array_column($this->myModel->genericGet(), 'innManual')));
            $data['productCategory'] = $this->myModel->productCategoryGet();
            $data['usedFor'] = $this->myModel->usedForGet();
            $data['dosageForm'] = $this->myModel->dosageFormGet();
            $data['routeOfAdmin'] = $this->myModel->routeOfAdminGet();
            $data['unit'] = $this->myModel->unitGet();
        }
        /*        $searchText = $this->input->post('searchText');
                $data['searchText'] = $searchText;
                $data['records'] = $this->myModel->$functionName($table, $searchText);
                $data['recordsEdit'] = $this->myModel->$functionNameEdit($id, $table);
                $data['recordsDetailProposedPacking'] = $this->myModel->applyregistrationDetailProposedPackingEdit($id);
                $data['recordsDetailINN'] = $this->myModel->applyregistrationDetailINNEdit($id);
                $data['recordsDetailOtherManufacturer'] = $this->myModel->applyregistrationOtherManufacturerEdit($id);

                $data['recordsDetailHistory'] = $this->myModel->registrationDetailQueryEdit911($id);
                //$data['products'] = $this->myModel->companyProductsGet();
                $data['companies'] = $this->myModel->companiesGet();
                $data['countries'] = $this->myModel->countriesGet();
                $data['registrationType'] = $this->myModel->registrationTypeGet();
                $data['pharmacopeia'] = $this->myModel->pharmacopeiaGet();
                $data['atcCode'] = $this->myModel->atcCodeGet();
                $data['innCode'] = $this->myModel->innCodeGet();
                $data['refunits'] = array_values(array_filter(array_column($this->myModel->refUnitsGet(), 'refUnit')));
                $data['filenumbers'] = array_values(array_filter(array_column($this->myModel->filenumbersGet(), 'regFileNo')));
                $data['generics'] = array_values(array_filter(array_column($this->myModel->genericGet(), 'innManual')));

                $data['productOrigin'] = $this->myModel->productOriginGet();
                $data['productCategory'] = $this->myModel->productCategoryGet();
                $data['usedFor'] = $this->myModel->usedForGet();
                $data['dosageForm'] = $this->myModel->dosageFormGet();

                $data['basicDose'] = $this->myModel->basicDoseGet();
                $data['pharmaDose'] = $this->myModel->pharmaDoseGet();
                $data['combinedPharmaDose'] = $this->myModel->combinedPharmaDoseGet();
                $data['releaseCharacteristics'] = $this->myModel->releaseCharacteristicsGet();
                $data['transformation'] = $this->myModel->transformationGet();
                $data['adminMethod'] = $this->myModel->adminMethodGet();
                $data['intendedSite'] = $this->myModel->intendedSiteGet();
                $data['presentationUnit'] = $this->myModel->presentationUnitGet();
                $data['packagingCategory'] = $this->myModel->packagingCategoryGet();
                $data['routeOfAdmin'] = $this->myModel->routeOfAdminGet();
                $data['unit'] = $this->myModel->unitGet();
                $data['labelClaim'] = $this->myModel->labelClaimGet();

                $data['regulatoryBody'] = $this->myModel->regulatoryBodyGet();
                $data['priorityReason'] = $this->myModel->registrationPriorityReasonGet();
                $data['inspectionType'] = $this->myModel->inspectionTypeRegistrationGet();
                //$data['licenses'] = $this->myModel->licensesGet1(@$data['recordsEdit'][0]->companyId);
                $data['licenseApproved1'] = ($this->roleId <> 26) ? $this->myModel->licenseApprovedGet(@$data['recordsEdit'][0]->companyId) : $this->myModel->licenseApprovedGet($this->companyId);
                $data['allApprovedLicenses'] = $this->myModel->allApprovedLicensesGet();
                $data['licenseApproved'] = $this->myModel->licenseApprovedGet(@$data['recordsEdit'][0]->companyId);
        */

        if ($action == 'lookup' && $recordLookup == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__. '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }
            if (isset($data['reg_no'])) {
                $this->load->helper('url');

                $reg = $this->myModel->regIdGet($data['reg_no']);
                if (isset($reg[0]))
                    redirect('https://pirims.dra.gov.pk/importregistration/edit/' . $reg[0]->id);
                else
                    redirect('https://pirims.dra.gov.pk/importregistration/lookup');

            }
            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $data['registrationTypeId'] = 1;
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }


            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
            }


            // if($data['forwardedTo_detail101']){
            //     $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'License', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo_detail101'], 'remarks' => $data['remarks_detail101'], 'fromQ' => $data['fromQ'], 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_licensehistory');
            // }
            //unset($data['forwardedTo_detail101']);
            unset($data['remarks_detail101']);
            unset($data['fromQ']);
            //unset($data['sendQueryToCompany']);
            unset($data['undefined']);
            unset($data['meetingDate']);

            $result = $this->loginModel->recordAjaxSave($data, $table);

            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }


            $sId = 0;
            $keys = array_keys($dataDetailTable);
            foreach (array_keys($dataDetailTable) as $key) {
                $current_key = current($keys);
                $current_value = $dataDetailTable[$current_key];
                $next_key = next($keys);
                $next_value = @$dataDetailTable[$next_key];
                $tableName = substr($current_key, 0, strpos($current_key, '-'));
                $nextTableName = substr($next_key, 0, strpos($next_key, '-'));
                if ($tableName == 'tabledetailproposedpacking') {
                    $tableDetail = 'tbl_registrationproposedprice';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailinn') {
                    $tableDetail = 'tbl_registrationinn';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailmanufacturer') {
                    $tableDetail = 'tbl_registrationothermanufacturer';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }

                $sId++;
            }

            if ($result > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/add');
        }
        else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();


            if (!$data) {
                $this->accessDenied();
                return;
            }
            if (isset($data['reg_no'])) {
                $this->load->helper('url');

                $reg = $this->myModel->regIdGet($data['reg_no']);
                if (isset($reg[0]))
                    redirect('https://pirims.dra.gov.pk/importregistration/edit/' . $reg[0]->id);
                else
                    redirect('https://pirims.dra.gov.pk/importregistration/lookup');

            }


            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $resultdetail = 0;

            foreach ($data as $key => $row) {
                if (strpos($key, '-') !== false || strpos($key, '_length') !== false) {
                    unset($data[$key]);
                }
            }

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
            }


            if ($this->roleId == 26) {
                $this->db->select('"' . substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1) . '" as masterId, "License" as type, "' . $this->userId . '" as userId, BaseTbl.forwardedTo, "' . date($this->dateTimeFullFormat) . '" as dateTime, "Response From Applicant" as remarks, "Draft" as status, "' . $data['updatedby'] . '" as createdby, "' . $data['updateddate'] . '" as createddate', false);
                $this->db->from('tbl_registrationhistory as BaseTbl');
                $this->db->where('BaseTbl.isDeleted', 0);
                $this->db->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $this->db->limit(1);
                $this->db->order_by('BaseTbl.id', 'desc');
                $query = $this->db->get();
                $count = $query->num_rows();
                if ($count === 0 && $data['registrationStatus'] != 'Draft') {
                    $resultdetail = $this->myModel->recordAjaxSave911(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'Registration', 'userId' => $this->userId, 'fromQ' => "Applicant", 'forwardedTo' => 104, 'dateTime' => $data['updateddate'], 'remarks' => "Response From Applicant", 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_registrationhistory');
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $resultdetail = $this->myModel->recordAjaxSave911($row, 'tbl_registrationhistory');
                    }
                }
            }

            /*if($this->roleId <> 26){
                if($data['sendQueryToCompany'] == '1'){
                    if($data['forwardedTo_detail101']){
                        $resultdetail = $this->myModel->recordAjaxSave911(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'Registration', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo_detail101'], 'remarks' => $data['remarks_detail101'], 'fromQ' => $data['fromQ'], 'sendQueryToCompany' => 1, 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_registrationhistory');
                    }
                    $this->db->select('BaseTbl.id, User.email, User.userName');
                    $this->db->from('tbl_license as BaseTbl');
                    $this->db->join('tbls_company as Company','Company.id = BaseTbl.companyId','left');
                    $this->db->join('tbls_user as User','User.companyId = Company.id','left');
                    $this->db->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                    $query = $this->db->get();
                    $count = $query->num_rows();
                    if($count === 0){
                        $this->session->set_flashdata('error', 'No record found.');
                        $result = 0;
                    }
                    if($count > 0){
                        foreach ($query->result() as $row){
                            $id = $row->id;
                            $email = $row->email;
                            $userName = $row->userName;
                        }
                    }
                    // ------------------- Send Mail Start -------------------
                    if(isset($email)){
                        $mailData['from'] = 'DRAP';
                        $mailData['subject'] = 'PIRIMS | Query';
                        $mailData['title'] = 'Greetings, '.$userName.'!';
                        $mailData['message'] = "Your have a query from DRAP with ref. no ".substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1).".";
                        $mailData['email'] = $email;
                        $sendStatus = mailSend($mailData);
                        if($sendStatus == true){
                            $result = 1;
                        }
                    }
                    if(!isset($email)){
                        $result = 0;
                    }
                    // ------------------- Send Mail End -------------------
                }
                else{
                    if($data['forwardedTo_detail101']){
                        $resultdetail = $this->myModel->recordAjaxSave911(['masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'type' => 'Registration', 'dateTime' => $data['updateddate'], 'userId' => $this->userId, 'forwardedTo' => $data['forwardedTo_detail101'], 'remarks' => $data['remarks_detail101'], 'fromQ' => $data['fromQ'], 'createdby' => $data['updatedby'], 'createddate' => $data['updateddate']], 'tbl_registrationhistory');
                    }
                }
            }*/

            //unset($data['forwardedTo_detail101']);
            //unset($data['remarks_detail101']);
            unset($data['fromQ']);
            //unset($data['sendQueryToCompany']);
            $meetingNo = @$data['meetingNo'];
            $meetingDate = @$data['meetingDate'];
            unset($data['undefined']);
            unset($data['meetingDate']);
            $otherdb = $this->load->database('otherdb', TRUE);

            if ($this->roleId == 26) {
                $otherdb->select('BaseTbl.id, BaseTbl.rniRefNo, BaseTbl.registrationNo, Company.id as companyId, Company.companyUniqueNo, BaseTbl.registrationStatus');
                $otherdb->from('tbl_registration as BaseTbl');
                $otherdb->join('tbls_company as Company', 'Company.id = BaseTbl.companyId', 'left');
                //$otherdb->join('tbls_user as User','User.companyId = Company.id','left');
                $otherdb->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $query = $otherdb->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $id = $row->id;
                        // $email = $row->email;
                        // $userName = $row->userName;
                        $rniRefNo = $row->rniRefNo;
                        $licenseNo = $row->licenseNo;
                        $companyId = $row->companyId;
                        $companyUniqueNo = $row->companyUniqueNo;
                        $registrationStatus = $row->registrationStatus;
                    }
                }
                if ($data['registrationStatus'] == 'Submitted' && $registrationStatus == 'Referred Back To Company') {
                    $data['registrationStatus'] = 'Under Review';
                }
            }

            $result = $this->loginModel->recordAjaxUpdate('id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), $data, $table);

            foreach ($this->input->post() as $key => $row) {
                if (substr($key, -6) == 'detail') {
                    $dataDetailTable[$key] = $row;
                }
            }

            $sId = 0;
            $keys = array_keys($dataDetailTable);
            foreach (array_keys($dataDetailTable) as $key) {
                $current_key = current($keys);
                $current_value = $dataDetailTable[$current_key];
                $next_key = next($keys);
                $next_value = @$dataDetailTable[$next_key];
                $tableName = substr($current_key, 0, strpos($current_key, '-'));
                $nextTableName = substr($next_key, 0, strpos($next_key, '-'));
                if ($tableName == 'tabledetailproposedpacking') {
                    $tableDetail = 'tbl_registrationproposedprice';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailinn') {
                    $tableDetail = 'tbl_registrationinn';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }
                if ($tableName == 'tabledetailmanufacturer') {
                    $tableDetail = 'tbl_registrationothermanufacturer';
                    $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $current_value;
                    $totalFiles = @count(@$_FILES[$current_key]['tmp_name']);
                    for ($i = 0; $i < $totalFiles; $i++) {
                        if (@$_FILES[$current_key]['tmp_name'][$i]) {
                            $fileNames[] = $this->fileMoveMultiple('Attachment', $current_key, $i, $companyUniqueNo, 'docs');
                            $datadetail[substr($current_key, strpos($current_key, '-') + 1, strrpos($current_key, '_') - strrpos($current_key, '-') - 1)] = $fileNames;
                        }
                    }
                    if ($myAction == 'save') {
                        $masterId = $result;
                    }
                    if ($myAction == 'update') {
                        $masterId = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                    }
                    if ($nextTableName <> $tableName) {
                        $resultdetail = $this->dataDetailTableSave($masterId, $datadetail, $tableDetail);
                        unset($datadetail);
                    }
                }

                $sId++;
            }

            if ($data['registrationStatus'] == 'Approved') {
                $otherdb->select('BaseTbl.licenseNoManual, BaseTbl.issueDateManual, BaseTbl.licFileNo, BaseTbl.validTill, BaseTbl.lastRenewalDate, BaseTbl.licenseTypeId, BaseTbl.siteAddress, BaseTbl.googleMapURL, BaseTbl.latitude, BaseTbl.longitude, BaseTbl.pvma4, BaseTbl.pvma2, BaseTbl.pvma3, BaseTbl.siteVerificationLetter, BaseTbl.layoutPlanLetter, BaseTbl.licenseLetter, BaseTbl.svCoveringLetter, BaseTbl.svFeeChallan, BaseTbl.svStatusOfFirm, BaseTbl.svCopyOfCNIC, BaseTbl.svRegistrationCertificate, BaseTbl.svLandDocument, BaseTbl.svSiteMap, BaseTbl.lpApplicationCoveringLetter, BaseTbl.lpChallanForm, BaseTbl.dmlForm1, BaseTbl.dmlProForma, BaseTbl.dmlLegalStatus, BaseTbl.dmlFeeChallan, BaseTbl.qsDocuments, BaseTbl.qsDocuments2');
                $otherdb->from('tbl_registration as BaseTbl');
                $otherdb->where('BaseTbl.isDeleted', 0);
                $otherdb->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $query = $otherdb->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {

                        $masterId = $this->loginModel->recordAjaxSave($row, 'tbl_registration');

                    }
                }

                $otherdb->select('BaseTbl.id, BaseTbl.companyId');
                $otherdb->from('tbl_registration as BaseTbl');
                $otherdb->where('BaseTbl.isDeleted', 0);
                $otherdb->where('BaseTbl.id', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $query = $otherdb->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $id = $row->id;
                        $companyId = $row->companyId;
                    }
                }

                $otherdb->select('"' . $masterId . '" as masterId, BaseTbl.packSize, BaseTbl.description, BaseTbl.proposedPrice, BaseTbl.shelfLife');
                $otherdb->from('tbl_registrationproposedprice as BaseTbl');
                $otherdb->where('BaseTbl.isDeleted', 0);
                $otherdb->where('BaseTbl.masterId', substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
                $query = $otherdb->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    $this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $resultdetail = $this->loginModel->recordAjaxSave($row, 'tbl_registrationproposedprice');
                    }
                }

                $resultdetail = $this->loginModel->recordAjaxSave(['masterId' => $masterId, 'meetingNo' => $meetingNo, 'meetingDate' => $meetingDate], 'tbl_registrationmeeting');
            }

            $otherdb->close();
            if ($result > 0 || $resultdetail > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/add');
        } else {
            $this->accessDenied();
            return;
        }
    }

    function applicationHistory($type = NULL,$officerid = NULL)
    {
        $isLoggedIn = $this->session->userdata('isLoggedIn');
        if (!isset($isLoggedIn) || $isLoggedIn != TRUE) {
            redirect('login');
        }
        $found = false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if (!empty($rolePage)) {
            foreach ($rolePage as $res) {
                $pageName = $res->url;
                $recordLookup = $res->recordLookup;
                $recordAdd = $res->recordAdd;
                $recordEdit = $res->recordEdit;
                $recordView = $res->recordView;
                $recordDelete = $res->recordDelete;
                $recordSubmit = $res->recordSubmit;
                if (__FUNCTION__ == $pageName) {
                    $found = true;
                    break;
                }
            }
        }
        if ($found == false) {
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $this->global['pageTitle'] = $this->companyProject . ' | ' . $data['pageTitle'][0]->friendlyName;

        if($type == 'registration'){

            $data['registrationRecords'] = $this->myModel->registrationApplicationHistory();
        }else if($type == 'licensing'){
            if($officerid != null && ($this->roleId == 6 || $this->roleId == 10 || $this->roleId == 38)){
                $data['licenseRecords'] = $this->myModel->officerLicenseApplicationHistory($officerid);
            }else{
                $data['licenseRecords'] = $this->myModel->licenseApplicationHistory();
            }
        }else{
            $this->accessDenied();
            return;
        }


        $data['title'] = '';

        if ($recordLookup == 1) {
            $this->loadViews('company/' . $this->companyName . '/applicationhistory/' . $type, $this->global, $data, NULL);
        }
        /*
        else if ($action == 'add' && $recordAdd == 1) {
            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'edit' && $recordEdit == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'view' && $recordView == 1) {
            if (!$id) {
                $this->accessDenied();
                return;
            }

            $this->loadViews('company/' . $this->companyName . '/' . __FUNCTION__, $this->global, $data, NULL);
        }
        else if ($action == 'delete' && $recordDelete == 1) {
            $data = array('isDeleted' => 1, 'updateddate' => date($this->dateTimeFormat), 'updatedby' => $this->userId);

            $result = $this->loginModel->recordAjaxUpdate('id', $id, $data, $table);

            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record deleted successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'save' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }

            $data['createdby'] = $this->userId;
            $data['createddate'] = date($this->dateTimeFormat);
            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;
            $qid = 0;
            $resultdetail = 0;

            $url = explode('/', $_SERVER['HTTP_REFERER']);
            if ($url[2] == 'pirims.dra.gov.pk') {
                $applicationId = $url[7];
                $myType = urldecode($url[6]);
            } else {
                $applicationId = $url[8];
                $myType = urldecode($url[7]);
            }
            $data['masterId'] = $applicationId;
            $data['dateTime'] = date($this->dateTimeFormat);
            $data['type'] = $myType;

            if($this->roleId == 26){
                $challan_no = $data['challan_no'];
                $challan_fee = $data['challan_fee'];
                $challan_status = $data['challan_status'];
                $challan_msg = $data['challan_msg'];
                $challan_account_id = $data['challan_account_id'];
                $challan_account_title = $data['challan_account_title'];
                $challan_date = $data['challan_date'];

                unset($data['challan_no']);
                unset($data['challan_fee']);
                unset($data['challan_status']);
                unset($data['challan_msg']);
                unset($data['challan_account_id']);
                unset($data['challan_account_title']);
                unset($data['challan_date']);
            }

            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
            }

            if ($data['type'] == 'Registration' || $data['type'] == 'Registration Renewal' || $data['type'] == 'Post Registration Change' || $data['type'] == 'Registration Export') {
                $this->db->select('BaseTbl.id, BaseTbl.registrationStatus, BaseTbl.renewalStatus, BaseTbl.postchangeStatus');
                $this->db->from('tbl_registration as BaseTbl');
                $this->db->where('BaseTbl.id', $data['masterId']);
                $query = $this->db->get();
                $count = $query->num_rows();
                if ($count === 0) {
                    //$this->session->set_flashdata('error', 'No record found.');
                    $result = 0;
                }
                if ($count > 0) {
                    foreach ($query->result() as $row) {
                        $registrationStatus = $row->registrationStatus;
                        $renewalStatus = $row->renewalStatus;
                        $postchangeStatus = $row->postchangeStatus;
                    }
                }
            }

            if ($data['type'] == 'License' || $data['type'] == 'License Renewal' || $data['type'] == 'Post License Change') {
                $result = $this->loginModel->recordAjaxSave(['masterId' => $data['masterId'], 'dateTime' => $data['dateTime'], 'title' => $data['title'], 'type' => $data['type'], 'filePath' => $data['filePath'], 'message' => $data['message'], 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => $data['status'], 'createdby' => $data['createdby'], 'createddate' => $data['createddate']], $table);
            }

            if ($data['type'] == 'Registration') {
                $result = $this->loginModel->recordAjaxSave(['masterId' => $data['masterId'], 'dateTime' => $data['dateTime'], 'title' => $data['title'], 'type' => $data['type'], 'filePath' => $data['filePath'], 'message' => $data['message'], 'applicationStatus' => $registrationStatus, 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => $data['status'], 'createdby' => $data['createdby'], 'createddate' => $data['createddate']], $table);
            }
            if ($data['type'] == 'Registration Renewal') {
                $result = $this->loginModel->recordAjaxSave(['masterId' => $data['masterId'], 'dateTime' => $data['dateTime'], 'title' => $data['title'], 'type' => $data['type'], 'filePath' => $data['filePath'], 'message' => $data['message'], 'applicationStatus' => $renewalStatus, 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => $data['status'], 'createdby' => $data['createdby'], 'createddate' => $data['createddate']], $table);
            }
            if ($data['type'] == 'Post Registration Change') {
                $result = $this->loginModel->recordAjaxSave(['masterId' => $data['masterId'], 'dateTime' => $data['dateTime'], 'title' => $data['title'], 'type' => $data['type'], 'filePath' => $data['filePath'], 'message' => $data['message'], 'applicationStatus' => $postchangeStatus, 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => $data['status'], 'createdby' => $data['createdby'], 'createddate' => $data['createddate']], $table);
            }

            if ($data['type'] == 'License') {
                $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['licenseStatus' => 'Under Review Stage 1'], 'tbl_license');
            }

            if ($data['type'] == 'License Renewal') {
                $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['renewalStatus' => 'Under Review Stage 1'], 'tbl_license');
            }

            if ($data['type'] == 'Post License Change') {
                $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['postchangeStatus' => 'Under Review Stage 1'], 'tbl_license');
            }

            if ($data['type'] == 'Registration') {
                if ($registrationStatus == 'Referred Back To Company (Locked)') {
                    $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['registrationStatus' => 'Under Review Stage 1'], 'tbl_registration');
                }
            }

            if ($data['type'] == 'Registration Renewal') {
                if ($renewalStatus == 'Referred Back To Company (Locked)') {
                    $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['renewalStatus' => 'Under Review Stage 1'], 'tbl_registration');
                }
            }

            if ($data['type'] == 'Post Registration Change') {
                if ($postchangeStatus == 'Referred Back To Company (Locked)') {
                    $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['postchangeStatus' => 'Under Review Stage 1'], 'tbl_registration');
                }
            }
            if ($data['type'] == 'Registration Export') {
                $result = $this->loginModel->recordAjaxSave(['masterId' => $data['masterId'], 'dateTime' => $data['dateTime'], 'title' => $data['title'], 'type' => $data['type'], 'filePath' => $data['filePath'], 'message' => $data['message'], 'applicationStatus' => $registrationStatus, 'userId' => $this->userId, 'authorization' => 'Granted', 'status' => $data['status'], 'createdby' => $data['createdby'], 'createddate' => $data['createddate']], $table);
                $qid = $result;
                if ($registrationStatus == 'Referred Back To Company (Locked)') {
                    $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['registrationStatus' => 'Re-Submitted'], 'tbl_registration');
                }
            }

            if ($this->roleId == 26 && $qid <> 0 && $data['challan_status']=='Paid') {
                $this->loginModel->recordAjaxSave(['masterId' => $id,
                    'usedfor' => 'Export Registration',
                    'challan_no' => $challan_no,
                    'challan_fee' => $challan_fee,
                    'challan_status' => $challan_status,
                    'challan_msg' => $challan_msg,
                    'challan_account_id' => $challan_account_id,
                    'challan_account_title' => $challan_account_title,
                    'challan_date' => $challan_date,
                    'queryid' => $qid,
                    'status' => $challan_status,
                    'createdby' => $data['updatedby'],
                    'createddate' => $data['updateddate']
                ], 'tbl_challan');

            }


            if ($result > 0) {
                $this->session->set_flashdata('success', 'New record saved successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }

            redirect(__FUNCTION__ . '/lookup');
        }
        else if ($myAction == 'update' && $recordSubmit == 1) {
            $data = $this->input->post();
            if (!$data) {
                $this->accessDenied();
                return;
            }
            $url = explode('/', $_SERVER['HTTP_REFERER']);
            if ($url[2] == 'pirims.dra.gov.pk') {
                $applicationId = $url[7];
                $myType = urldecode($url[6]);
                $queryid = $url[5];
            } else {
                $applicationId = $url[8];
                $myType = urldecode($url[7]);
                $queryid = $url[6];
            }
            $data['userId'] = $this->userId;
            $data['authorization'] = 'Granted';
            $data['masterId'] = $applicationId;
            $data['dateTime'] = date($this->dateTimeFormat);
            $data['type'] = $myType;



            foreach ($data as $key => $row) {
                if (@$_FILES[$key]['tmp_name']) {
                    $data[$key] = $this->fileMove('Attachment', $key, $this->companyUniqueNo, 'docs');
                }
            }

            $data['updatedby'] = $this->userId;
            $data['updateddate'] = date($this->dateTimeFormat);
            $result = 0;


            if ($this->roleId == 26 && $queryid <> 0 && $data['challan_status']=='Paid') {
                $this->loginModel->recordAjaxSave(['masterId' => $applicationId,
                    'usedfor' => 'Export Registration',
                    'challan_no' => $data['challan_no'],
                    'challan_fee' => $data['challan_fee'],
                    'challan_status' => $data['challan_status'],
                    'challan_msg' => $data['challan_msg'],
                    'challan_account_id' => $data['challan_account_id'],
                    'challan_account_title' => $data['challan_account_title'],
                    'challan_date' => $data['challan_date'],
                    'status' => $data['challan_status'],
                    'queryid' => $queryid,
                    'createdby' => $data['updatedby'],
                    'createddate' => $data['updateddate']
                ], 'tbl_challan');
            }
            unset($data['challan_no']);
            unset($data['challan_fee']);
            unset($data['challan_status']);
            unset($data['challan_msg']);
            unset($data['challan_account_id']);
            unset($data['challan_account_title']);
            unset($data['challan_date']);


            $resultdetail = 0;
            $result = $this->loginModel->recordAjaxUpdate('id', $queryid, $data, $table);

            if ($data['type'] == 'License') {
                $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['licenseStatus' => 'Under Review Stage 1'], 'tbl_license');
            }

            if ($data['type'] == 'License Renewal') {
                $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['renewalStatus' => 'Under Review Stage 1'], 'tbl_license');
            }

            if ($data['type'] == 'Post License Change') {
                $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['postchangeStatus' => 'Under Review Stage 1'], 'tbl_license');
            }

            if ($data['type'] == 'Registration' ) {
                $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['registrationStatus' => 'Under Review Stage 1'], 'tbl_registration');
            }
            if ($data['type'] == 'Registration Export') {
                $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['registrationStatus' => 'Re Submitted'], 'tbl_registration');
            }

            if ($data['type'] == 'Registration Renewal') {
                $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['renewalStatus' => 'Under Review Stage 1'], 'tbl_registration');
            }


            if ($data['type'] == 'Post Registration Change') {
                $result = $this->loginModel->recordAjaxUpdate('id', $data['masterId'], ['postchangeStatus' => 'Under Review Stage 1'], 'tbl_registration');
            }




            if ($result > 0) {
                $this->session->set_flashdata('success', 'Record updated successfully.');
            } else {
                $this->session->set_flashdata('error', 'Something went wrong.');
            }


            redirect(__FUNCTION__ . '/lookup');
        }
        */
        else {
            $this->accessDenied();
            return;
        }
    }

    // -- CTD

    function ctdspart($id)
    {
        $this->global['dashboard'] = '';

        $found=false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if(!empty($rolePage))
        {
            foreach ($rolePage as $res)
            {
                $pageName = $res->url;
                if(__FUNCTION__ == $pageName){
                    $found=true;
                    break;
                }
            }
        }
        if($found == false){
            $this->accessDenied();
            return;
        }

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $data['pageColumn'] = $this->loginModel->pagecolumnGet($data['pageTitle'][0]->id);

        $functionName = __FUNCTION__;
        //$this->session->set_userdata(array('applicationId' =>substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'recordId' =>$id));

        $data['recordsCTD'] = $this->myModel->ctdspartEdit($id);
        $data['recordsDetailSolubilities'] = $this->myModel->ctdspartSolubilitiesEdit($id);
        $data['recordsDetailManufacturers'] = $this->myModel->ctdspartManufacturersEdit($id);
        $data['recordsDetailDrugSubstance'] = $this->myModel->ctdspartDrugSubstanceEdit($id);
        $data['recordsDetailProcessImpurities'] = $this->myModel->ctdspartProcessImpuritiesEdit($id);
        $data['recordsDetailSpecifications'] = $this->myModel->ctdspartSpecificationsEdit($id);
        $data['recordsDetailContainerClosure'] = $this->myModel->ctdspartContainerClousureEdit($id);
        $data['recordsDetailStability'] = $this->myModel->ctdspartStabilityEdit($id);
        $data['recordsDetailStability2'] = $this->myModel->ctdspartStability2Edit($id);
        $data['recordsDetailProposedStorageCondition'] = $this->myModel->ctdspartProposedStorageConditionEdit($id);
        $data['registrationType'] = $this->myModel->registrationTypeGet();
        $data['dose'] = $this->myModel->doseGet();
        $data['strength'] = $this->myModel->strengthGet();
        $data['pharmacopeia'] = $this->myModel->pharmacopeiaGet();
        $data['atcCode'] = $this->myModel->atcCodeGet();
        $data['innCode'] = $this->myModel->innCodeGet();
        $data['productOrigin'] = $this->myModel->productOriginGet();
        $data['productCategory'] = $this->myModel->productCategoryGet();
        $data['section'] = $this->myModel->sectionGet();
        $data['dosage'] = $this->myModel->dosageGet();
        $data['intendedMarket'] = $this->myModel->intendedMarketGet();
        $data['manufacturer'] = $this->myModel->manufacturerGet();
        $data['country'] = $this->myModel->countryGet();
        $data['usedFor'] = $this->myModel->usedForGet();
        $data['routeOfAdmin'] = $this->myModel->routeOfAdminGet();
        $data['shelfLife'] = $this->myModel->shelfLifeGet();
        $data['storageCondition'] = $this->myModel->storageConditionGet();
        $data['licenses'] = $this->myModel->licensesGet();

        $this->global['pageTitle'] = $this->companyProject.' | '.$data['pageTitle'][0]->friendlyName;

        $this->loadViewsSimple('company/'.$this->companyName.'/'.__FUNCTION__, $this->global, $data, NULL);
    }

    function ctdspartview($id)
    {
        $this->global['dashboard'] = '';

        $found=false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if(!empty($rolePage))
        {
            foreach ($rolePage as $res)
            {
                $pageName = $res->url;
                if(__FUNCTION__ == $pageName){
                    $found=true;
                    break;
                }
            }
        }
        if($found == false){
            $this->accessDenied();
            return;
        }

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $data['pageColumn'] = $this->loginModel->pagecolumnGet($data['pageTitle'][0]->id);

        $functionName = __FUNCTION__;

        $data['recordsCTD'] = $this->myModel->ctdspartEdit($id);
        $data['recordsDetailSolubilities'] = $this->myModel->ctdspartSolubilitiesEdit($id);
        $data['recordsDetailManufacturers'] = $this->myModel->ctdspartManufacturersEdit($id);
        $data['recordsDetailDrugSubstance'] = $this->myModel->ctdspartDrugSubstanceEdit($id);
        $data['recordsDetailProcessImpurities'] = $this->myModel->ctdspartProcessImpuritiesEdit($id);
        $data['recordsDetailSpecifications'] = $this->myModel->ctdspartSpecificationsEdit($id);
        $data['recordsDetailContainerClosure'] = $this->myModel->ctdspartContainerClousureEdit($id);
        $data['recordsDetailStability'] = $this->myModel->ctdspartStabilityEdit($id);
        $data['recordsDetailStability2'] = $this->myModel->ctdspartStability2Edit($id);
        $data['recordsDetailProposedStorageCondition'] = $this->myModel->ctdspartProposedStorageConditionEdit($id);
        $data['registrationType'] = $this->myModel->registrationTypeGet();
        $data['dose'] = $this->myModel->doseGet();
        $data['strength'] = $this->myModel->strengthGet();
        $data['pharmacopeia'] = $this->myModel->pharmacopeiaGet();
        $data['atcCode'] = $this->myModel->atcCodeGet();
        $data['innCode'] = $this->myModel->innCodeGet();
        $data['productOrigin'] = $this->myModel->productOriginGet();
        $data['productCategory'] = $this->myModel->productCategoryGet();
        $data['section'] = $this->myModel->sectionGet();
        $data['dosage'] = $this->myModel->dosageGet();
        $data['intendedMarket'] = $this->myModel->intendedMarketGet();
        $data['manufacturer'] = $this->myModel->manufacturerGet();
        $data['country'] = $this->myModel->countryGet();
        $data['usedFor'] = $this->myModel->usedForGet();
        $data['routeOfAdmin'] = $this->myModel->routeOfAdminGet();
        $data['shelfLife'] = $this->myModel->shelfLifeGet();
        $data['storageCondition'] = $this->myModel->storageConditionGet();
        $data['licenses'] = $this->myModel->licensesGet();

        $this->global['pageTitle'] = $this->companyProject.' | '.$data['pageTitle'][0]->friendlyName;

        $this->loadViewsSimple('company/'.$this->companyName.'/'.__FUNCTION__, $this->global, $data, NULL);
    }

    function ctdspartUpdate()
    {
        $this->global['dashboard'] = '';

        $found=false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if(!empty($rolePage))
        {
            foreach ($rolePage as $res)
            {
                $pageName = $res->url;
                if(__FUNCTION__ == $pageName){
                    $found=true;
                    break;
                }
            }
        }
        if($found == false){
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;

        $data = $this->input->post();
        if(!$data){
            $this->accessDenied();
            return;
        }
        $data['updatedby'] = $this->userId;
        $data['updateddate'] = date($this->dateTimeFormat);

        // ALL RULES
        //$this->form_validation->set_rules('fieldName', 'Label', 'required | matches[otherFieldName] | differs[otherFieldName] | min_length[3] | max_length[3] | exact_length[8] | greater_than[8] | greater_than_equal_to[8] | less_than[8] | less_than_equal_to[8] | in_list[red,blue,green] | alpha | alpha_numeric | alpha_numeric_spaces | alpha_dash | numeric | integer | decimal | is_natural | is_natural_no_zero | valid_url | valid_email | valid_emails | valid_ip | valid_base64 | trim | xss_clean | text');
        // MAJOR USED RULES
        //$this->form_validation->set_rules('fieldName', 'Label', 'required | min_length[3] | max_length[3] | exact_length[8] | in_list[red,blue,green] | alpha | alpha_numeric | alpha_numeric_spaces | alpha_dash | numeric | integer | decimal | is_natural | is_natural_no_zero | valid_url | valid_email | valid_emails | valid_base64 | trim | xss_clean');
        // if($this->form_validation->run() == FALSE){
        //     $this->session->set_flashdata('error', validation_errors());
        //     redirect(substr(__FUNCTION__, 0, strcspn(__FUNCTION__, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')));
        // }

        $filename = 'Attachment2_3_S_1_'.rand(0,999999);
        $path = 'uploads/company/'.$this->companyUniqueNo.'/Registration/';
        $imgtmpname = $_FILES['attachment2_3_S_1']['tmp_name'];
        $name = $_FILES["attachment2_3_S_1"]["name"];
        $extention = explode(".", $name);
        $ext = end($extention);
        $fullpath = $path.$filename.'.'.$ext;
        $filepath = $filename.'.'.$ext;
        $allowedFileTypes = array('image/jpeg', 'image/png', 'application/pdf');
        if($_FILES['attachment2_3_S_1']['size'] <= 5000000){
            if(in_array($_FILES['attachment2_3_S_1']['type'], $allowedFileTypes)){
                move_uploaded_file($imgtmpname,$fullpath);
                if($ext <> ''){
                    $data['attachment2_3_S_1'] = $filepath;
                }
            }
        }

        $filename = 'Attachment2_3_S_2_'.rand(0,999999);
        $path = 'uploads/company/'.$this->companyUniqueNo.'/Registration/';
        $imgtmpname = $_FILES['attachment2_3_S_2']['tmp_name'];
        $name = $_FILES["attachment2_3_S_2"]["name"];
        $extention = explode(".", $name);
        $ext = end($extention);
        $fullpath = $path.$filename.'.'.$ext;
        $filepath = $filename.'.'.$ext;
        $allowedFileTypes = array('image/jpeg', 'image/png', 'application/pdf');
        if($_FILES['attachment2_3_S_2']['size'] <= 5000000){
            if(in_array($_FILES['attachment2_3_S_2']['type'], $allowedFileTypes)){
                move_uploaded_file($imgtmpname,$fullpath);
                if($ext <> ''){
                    $data['attachment2_3_S_2'] = $filepath;
                }
            }
        }

        $filename = 'Attachment2_3_S_3_'.rand(0,999999);
        $path = 'uploads/company/'.$this->companyUniqueNo.'/Registration/';
        $imgtmpname = $_FILES['attachment2_3_S_3']['tmp_name'];
        $name = $_FILES["attachment2_3_S_3"]["name"];
        $extention = explode(".", $name);
        $ext = end($extention);
        $fullpath = $path.$filename.'.'.$ext;
        $filepath = $filename.'.'.$ext;
        $allowedFileTypes = array('image/jpeg', 'image/png', 'application/pdf');
        if($_FILES['attachment2_3_S_3']['size'] <= 5000000){
            if(in_array($_FILES['attachment2_3_S_3']['type'], $allowedFileTypes)){
                move_uploaded_file($imgtmpname,$fullpath);
                if($ext <> ''){
                    $data['attachment2_3_S_3'] = $filepath;
                }
            }
        }

        $filename = 'Attachment2_3_S_4_'.rand(0,999999);
        $path = 'uploads/company/'.$this->companyUniqueNo.'/Registration/';
        $imgtmpname = $_FILES['attachment2_3_S_4']['tmp_name'];
        $name = $_FILES["attachment2_3_S_4"]["name"];
        $extention = explode(".", $name);
        $ext = end($extention);
        $fullpath = $path.$filename.'.'.$ext;
        $filepath = $filename.'.'.$ext;
        $allowedFileTypes = array('image/jpeg', 'image/png', 'application/pdf');
        if($_FILES['attachment2_3_S_4']['size'] <= 5000000){
            if(in_array($_FILES['attachment2_3_S_4']['type'], $allowedFileTypes)){
                move_uploaded_file($imgtmpname,$fullpath);
                if($ext <> ''){
                    $data['attachment2_3_S_4'] = $filepath;
                }
            }
        }

        $filename = 'Attachment2_3_S_5_'.rand(0,999999);
        $path = 'uploads/company/'.$this->companyUniqueNo.'/Registration/';
        $imgtmpname = $_FILES['attachment2_3_S_5']['tmp_name'];
        $name = $_FILES["attachment2_3_S_5"]["name"];
        $extention = explode(".", $name);
        $ext = end($extention);
        $fullpath = $path.$filename.'.'.$ext;
        $filepath = $filename.'.'.$ext;
        $allowedFileTypes = array('image/jpeg', 'image/png', 'application/pdf');
        if($_FILES['attachment2_3_S_5']['size'] <= 5000000){
            if(in_array($_FILES['attachment2_3_S_5']['type'], $allowedFileTypes)){
                move_uploaded_file($imgtmpname,$fullpath);
                if($ext <> ''){
                    $data['attachment2_3_S_5'] = $filepath;
                }
            }
        }

        $filename = 'Attachment2_3_S_6_'.rand(0,999999);
        $path = 'uploads/company/'.$this->companyUniqueNo.'/Registration/';
        $imgtmpname = $_FILES['attachment2_3_S_6']['tmp_name'];
        $name = $_FILES["attachment2_3_S_6"]["name"];
        $extention = explode(".", $name);
        $ext = end($extention);
        $fullpath = $path.$filename.'.'.$ext;
        $filepath = $filename.'.'.$ext;
        $allowedFileTypes = array('image/jpeg', 'image/png', 'application/pdf');
        if($_FILES['attachment2_3_S_6']['size'] <= 5000000){
            if(in_array($_FILES['attachment2_3_S_6']['type'], $allowedFileTypes)){
                move_uploaded_file($imgtmpname,$fullpath);
                if($ext <> ''){
                    $data['attachment2_3_S_6'] = $filepath;
                }
            }
        }

        $filename = 'Attachment2_3_S_7_'.rand(0,999999);
        $path = 'uploads/company/'.$this->companyUniqueNo.'/Registration/';
        $imgtmpname = $_FILES['attachment2_3_S_7']['tmp_name'];
        $name = $_FILES["attachment2_3_S_7"]["name"];
        $extention = explode(".", $name);
        $ext = end($extention);
        $fullpath = $path.$filename.'.'.$ext;
        $filepath = $filename.'.'.$ext;
        $allowedFileTypes = array('image/jpeg', 'image/png', 'application/pdf');
        if($_FILES['attachment2_3_S_7']['size'] <= 5000000){
            if(in_array($_FILES['attachment2_3_S_7']['type'], $allowedFileTypes)){
                move_uploaded_file($imgtmpname,$fullpath);
                if($ext <> ''){
                    $data['attachment2_3_S_7'] = $filepath;
                }
            }
        }

        $filename = 'Attachment2_3_S_7_3_'.rand(0,999999);
        $path = 'uploads/company/'.$this->companyUniqueNo.'/Registration/';
        $imgtmpname = $_FILES['attachment2_3_S_7_3']['tmp_name'];
        $name = $_FILES["attachment2_3_S_7_3"]["name"];
        $extention = explode(".", $name);
        $ext = end($extention);
        $fullpath = $path.$filename.'.'.$ext;
        $filepath = $filename.'.'.$ext;
        $allowedFileTypes = array('image/jpeg', 'image/png', 'application/pdf');
        if($_FILES['attachment2_3_S_7_3']['size'] <= 5000000){
            if(in_array($_FILES['attachment2_3_S_7_3']['type'], $allowedFileTypes)){
                move_uploaded_file($imgtmpname,$fullpath);
                if($ext <> ''){
                    $data['attachment2_3_S_7_3'] = $filepath;
                }
            }
        }

        $filename = 'Attachment2_3_S_4_2_'.rand(0,999999);
        $path = 'uploads/company/'.$this->companyUniqueNo.'/Registration/';
        $imgtmpname = $_FILES['attachment2_3_S_4_2']['tmp_name'];
        $name = $_FILES["attachment2_3_S_4_2"]["name"];
        $extention = explode(".", $name);
        $ext = end($extention);
        $fullpath = $path.$filename.'.'.$ext;
        $filepath = $filename.'.'.$ext;
        $allowedFileTypes = array('image/jpeg', 'image/png', 'application/pdf');
        if($_FILES['attachment2_3_S_4_2']['size'] <= 5000000){
            if(in_array($_FILES['attachment2_3_S_4_2']['type'], $allowedFileTypes)){
                move_uploaded_file($imgtmpname,$fullpath);
                if($ext <> ''){
                    $data['attachment2_3_S_4_2'] = $filepath;
                }
            }
        }

        $filename = 'Attachment2_3_S_1_2_'.rand(0,999999);
        $path = 'uploads/company/'.$this->companyUniqueNo.'/Registration/';
        $imgtmpname = $_FILES['attachment2_3_S_1_2']['tmp_name'];
        $name = $_FILES["attachment2_3_S_1_2"]["name"];
        $extention = explode(".", $name);
        $ext = end($extention);
        $fullpath = $path.$filename.'.'.$ext;
        $filepath = $filename.'.'.$ext;
        $allowedFileTypes = array('image/jpeg', 'image/png', 'application/pdf');
        if($_FILES['attachment2_3_S_1_2']['size'] <= 5000000){
            if(in_array($_FILES['attachment2_3_S_1_2']['type'], $allowedFileTypes)){
                move_uploaded_file($imgtmpname,$fullpath);
                if($ext <> ''){
                    $data['attachment2_3_S_1_2'] = $filepath;
                }
            }
        }

        $filename = 'AttachmentStructuralElucidation_'.rand(0,999999);
        $path = 'uploads/company/'.$this->companyUniqueNo.'/Registration/';
        $imgtmpname = $_FILES['attachmentStructuralElucidation']['tmp_name'];
        $name = $_FILES["attachmentStructuralElucidation"]["name"];
        $extention = explode(".", $name);
        $ext = end($extention);
        $fullpath = $path.$filename.'.'.$ext;
        $filepath = $filename.'.'.$ext;
        $allowedFileTypes = array('image/jpeg', 'image/png', 'application/pdf');
        if($_FILES['attachmentStructuralElucidation']['size'] <= 5000000){
            if(in_array($_FILES['attachmentStructuralElucidation']['type'], $allowedFileTypes)){
                move_uploaded_file($imgtmpname,$fullpath);
                if($ext <> ''){
                    $data['attachmentStructuralElucidation'] = $filepath;
                }
            }
        }

        $result = $this->myModel->$functionName(substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), ['recommendedINNName' => $data['recommendedINNName'], 'compendialName' => $data['compendialName'], 'chemicalName' => $data['chemicalName'], 'otherName' => $data['otherName'], 'casRegNumber' => $data['casRegNumber'], 'structuralFormula' => $data['structuralFormula'], 'molecularFormula' => $data['molecularFormula'], 'relativeMolecularMass' => $data['relativeMolecularMass'], 'physicalDescription' => $data['physicalDescription'], 'physicalForm' => $data['physicalForm'], 'solvate' => $data['solvate'], 'hydrate' => $data['hydrate'], 'listOfStudies' => $data['listOfStudies'], 'potentialForIsomerism' => $data['potentialForIsomerism'], 'potentialPolymorphicStudy' => $data['potentialPolymorphicStudy'], 'particleSizeStudy' => $data['particleSizeStudy'], 'specsStandard' => $data['specsStandard'], 'specsRef' => $data['specsRef'], 'analyticalProcedure' => $data['analyticalProcedure'], 'validationOfAnalyticalProc' => $data['validationOfAnalyticalProc'], 'batchAnalysis' => $data['batchAnalysis'], 'justificationOfSpecs' => $data['justificationOfSpecs'], 'coaOfPrimarySecondaryRef' => $data['coaOfPrimarySecondaryRef'], 'phValue' => $data['phValue'], 'pkValue' => $data['pkValue'], 'partitionValue' => $data['partitionValue'], 'meltingPointValue' => $data['meltingPointValue'], 'opticalRotationValue' => $data['opticalRotationValue'], 'refrectibeIndexValue' => $data['refrectibeIndexValue'], 'hygroscopicityValue' => $data['hygroscopicityValue'], 'uvAbsorptionValue' => $data['uvAbsorptionValue'], 'descAcceptanceCriteria' => $data['descAcceptanceCriteria'], 'descBatchX' => $data['descBatchX'], 'descBatchY' => $data['descBatchY'], 'descEtc' => $data['descEtc'], 'identAcceptanceCriteria' => $data['identAcceptanceCriteria'], 'identBatchX' => $data['identBatchX'], 'identBatchY' => $data['identBatchY'], 'identEtc' => $data['identEtc'], 'impuritiesAcceptanceCriteria' => $data['impuritiesAcceptanceCriteria'], 'impuritiesBatchX' => $data['impuritiesBatchX'], 'impuritiesBatchY' => $data['impuritiesBatchY'], 'impuritiesEtc' => $data['impuritiesEtc'], 'assayAcceptanceCriteria' => $data['assayAcceptanceCriteria'], 'assayBatchX' => $data['assayBatchX'], 'assayBatchY' => $data['assayBatchY'], 'assayEtc' => $data['assayEtc'], 'etcAcceptanceCriteria' => $data['etcAcceptanceCriteria'], 'etcBatchX' => $data['etcBatchX'], 'etcBatchY' => $data['etcBatchY'], 'etcEtc' => $data['etcEtc'], 'remarks2_3_S_1' => $data['remarks2_3_S_1'], 'remarks2_3_S_2' => $data['remarks2_3_S_2'], 'remarks2_3_S_3' => $data['remarks2_3_S_3'], 'remarks2_3_S_4' => $data['remarks2_3_S_4'], 'remarks2_3_S_5' => $data['remarks2_3_S_5'], 'remarks2_3_S_6' => $data['remarks2_3_S_6'], 'remarks2_3_S_7' => $data['remarks2_3_S_7'], 'attachment2_3_S_1' => $data['attachment2_3_S_1'], 'attachment2_3_S_2' => $data['attachment2_3_S_2'], 'attachment2_3_S_3' => $data['attachment2_3_S_3'], 'attachment2_3_S_4' => $data['attachment2_3_S_4'], 'attachment2_3_S_5' => $data['attachment2_3_S_5'], 'attachment2_3_S_6' => $data['attachment2_3_S_6'], 'attachment2_3_S_7' => $data['attachment2_3_S_7'], 'attachment2_3_S_7_3' => $data['attachment2_3_S_7_3'], 'attachment2_3_S_4_2' => $data['attachment2_3_S_4_2'], 'attachment2_3_S_1_2' => $data['attachment2_3_S_1_2'], 'attachmentStructuralElucidation' => $data['attachmentStructuralElucidation'], 'updatedby' => $data['updatedby'], 'updateddate' => $data['updateddate']]);

        $tableName = 'tabledetailsolubilities-';
        $datadetail['id'] = $data[$tableName.'id_detail'];
        $datadetail['medium'] = $data[$tableName.'medium_detail'];
        $datadetail['solubility'] = $data[$tableName.'solubility_detail'];
        $idColumn = 'id';
        $table = 'tbl_qossolubilities';
        $keys = array_keys($datadetail);
        $rows = [];
        for($i = 0, $len = count($datadetail[$keys[0]]); $i < $len; $i++){
            $rows[$i] = [];
            foreach($keys as $key){
                $rows[$i][$key] = $datadetail[$key][$i];
            }
        }
        for($row = 0, $cnt = count($rows); $row < $cnt; $row++){
            $column_data = $rows[$row];
            $column_keys = array_keys($column_data);
            $id = $column_data[$idColumn];
            $queryCheck = $this->db->get_where($table, array($idColumn => $id, 'masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'isDeleted' => 0));
            $count = $queryCheck->num_rows();
            if($count === 0){
                foreach($column_keys as $key){
                    $datainsert[$key] = $column_data[$key];
                }
                $datainsert['createdby'] = $this->userId;
                $datainsert['createddate'] = date($this->dateTimeFormat);
                unset($datainsert['id']);
                $datainsert['masterId'] = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                $resultdetail = $this->loginModel->recordAjaxSave($datainsert, $table);
            }
            if($count > 0){
                foreach($column_keys as $key){
                    $dataupdate[$key] = $column_data[$key];
                }
                $dataupdate['updatedby'] = $this->userId;
                $dataupdate['updateddate'] = date($this->dateTimeFormat);
                unset($dataupdate['id']);
                $resultdetail = $this->loginModel->recordAjaxUpdate($idColumn, $id, $dataupdate, $table);
            }
        }
        unset($datadetail);
        unset($rows);
        unset($column_data);
        unset($column_keys);
        unset($datainsert);
        unset($dataupdate);

        $tableName = 'tabledetailmanufacturers-';
        $datadetail['id'] = $data[$tableName.'id_detail'];
        $datadetail['mfgName'] = $data[$tableName.'mfgName_detail'];
        $datadetail['latitude'] = $data[$tableName.'latitude_detail'];
        $datadetail['longitude'] = $data[$tableName.'longitude_detail'];
        $datadetail['responsibility'] = $data[$tableName.'responsibility_detail'];
        $idColumn = 'id';
        $table = 'tbl_qosmanufacturers';
        $keys = array_keys($datadetail);
        $rows = [];
        for($i = 0, $len = count($datadetail[$keys[0]]); $i < $len; $i++){
            $rows[$i] = [];
            foreach($keys as $key){
                $rows[$i][$key] = $datadetail[$key][$i];
            }
        }
        for($row = 0, $cnt = count($rows); $row < $cnt; $row++){
            $column_data = $rows[$row];
            $column_keys = array_keys($column_data);
            $id = $column_data[$idColumn];
            $queryCheck = $this->db->get_where($table, array($idColumn => $id, 'masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'isDeleted' => 0));
            $count = $queryCheck->num_rows();
            if($count === 0){
                foreach($column_keys as $key){
                    $datainsert[$key] = $column_data[$key];
                }
                $datainsert['createdby'] = $this->userId;
                $datainsert['createddate'] = date($this->dateTimeFormat);
                unset($datainsert['id']);
                $datainsert['masterId'] = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                $resultdetail = $this->loginModel->recordAjaxSave($datainsert, $table);
            }
            if($count > 0){
                foreach($column_keys as $key){
                    $dataupdate[$key] = $column_data[$key];
                }
                $dataupdate['updatedby'] = $this->userId;
                $dataupdate['updateddate'] = date($this->dateTimeFormat);
                unset($dataupdate['id']);
                $resultdetail = $this->loginModel->recordAjaxUpdate($idColumn, $id, $dataupdate, $table);
            }
        }
        unset($datadetail);
        unset($rows);
        unset($column_data);
        unset($column_keys);
        unset($datainsert);
        unset($dataupdate);

        $tableName = 'tabledetaildrugsubstance-';
        $datadetail['id'] = $data[$tableName.'id_detail'];
        $datadetail['apiRelatedImpurity'] = $data[$tableName.'apiRelatedImpurity_detail'];
        $datadetail['structure'] = $data[$tableName.'structure_detail'];
        $datadetail['origin'] = $data[$tableName.'origin_detail'];
        $datadetail['acceptanceLimit'] = $data[$tableName.'acceptanceLimit_detail'];
        $idColumn = 'id';
        $table = 'tbl_qosdrugsubstance';
        $keys = array_keys($datadetail);
        $rows = [];
        for($i = 0, $len = count($datadetail[$keys[0]]); $i < $len; $i++){
            $rows[$i] = [];
            foreach($keys as $key){
                $rows[$i][$key] = $datadetail[$key][$i];
            }
        }
        for($row = 0, $cnt = count($rows); $row < $cnt; $row++){
            $column_data = $rows[$row];
            $column_keys = array_keys($column_data);
            $id = $column_data[$idColumn];
            $queryCheck = $this->db->get_where($table, array($idColumn => $id, 'masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'isDeleted' => 0));
            $count = $queryCheck->num_rows();
            if($count === 0){
                foreach($column_keys as $key){
                    $datainsert[$key] = $column_data[$key];
                }
                $datainsert['createdby'] = $this->userId;
                $datainsert['createddate'] = date($this->dateTimeFormat);
                unset($datainsert['id']);
                $datainsert['masterId'] = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                $resultdetail = $this->loginModel->recordAjaxSave($datainsert, $table);
            }
            if($count > 0){
                foreach($column_keys as $key){
                    $dataupdate[$key] = $column_data[$key];
                }
                $dataupdate['updatedby'] = $this->userId;
                $dataupdate['updateddate'] = date($this->dateTimeFormat);
                unset($dataupdate['id']);
                $resultdetail = $this->loginModel->recordAjaxUpdate($idColumn, $id, $dataupdate, $table);
            }
        }
        unset($datadetail);
        unset($rows);
        unset($column_data);
        unset($column_keys);
        unset($datainsert);
        unset($dataupdate);

        $tableName = 'tabledetailprocessimpurities-';
        $datadetail['id'] = $data[$tableName.'id_detail'];
        $datadetail['compoundName'] = $data[$tableName.'compoundName_detail'];
        $datadetail['compoundLimit'] = $data[$tableName.'compoundLimit_detail'];
        $idColumn = 'id';
        $table = 'tbl_qosprocessimpurities';
        $keys = array_keys($datadetail);
        $rows = [];
        for($i = 0, $len = count($datadetail[$keys[0]]); $i < $len; $i++){
            $rows[$i] = [];
            foreach($keys as $key){
                $rows[$i][$key] = $datadetail[$key][$i];
            }
        }
        for($row = 0, $cnt = count($rows); $row < $cnt; $row++){
            $column_data = $rows[$row];
            $column_keys = array_keys($column_data);
            $id = $column_data[$idColumn];
            $queryCheck = $this->db->get_where($table, array($idColumn => $id, 'masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'isDeleted' => 0));
            $count = $queryCheck->num_rows();
            if($count === 0){
                foreach($column_keys as $key){
                    $datainsert[$key] = $column_data[$key];
                }
                $datainsert['createdby'] = $this->userId;
                $datainsert['createddate'] = date($this->dateTimeFormat);
                unset($datainsert['id']);
                $datainsert['masterId'] = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                $resultdetail = $this->loginModel->recordAjaxSave($datainsert, $table);
            }
            if($count > 0){
                foreach($column_keys as $key){
                    $dataupdate[$key] = $column_data[$key];
                }
                $dataupdate['updatedby'] = $this->userId;
                $dataupdate['updateddate'] = date($this->dateTimeFormat);
                unset($dataupdate['id']);
                $resultdetail = $this->loginModel->recordAjaxUpdate($idColumn, $id, $dataupdate, $table);
            }
        }
        unset($datadetail);
        unset($rows);
        unset($column_data);
        unset($column_keys);
        unset($datainsert);
        unset($dataupdate);

        $tableName = 'tabledetailspecifications-';
        $datadetail['id'] = $data[$tableName.'id_detail'];
        $datadetail['test'] = $data[$tableName.'test_detail'];
        $datadetail['acceptanceCriteria'] = $data[$tableName.'acceptanceCriteria_detail'];
        $datadetail['analyticalProcedure'] = $data[$tableName.'analyticalProcedure_detail'];
        $idColumn = 'id';
        $table = 'tbl_qosspecifications';
        $keys = array_keys($datadetail);
        $rows = [];
        for($i = 0, $len = count($datadetail[$keys[0]]); $i < $len; $i++){
            $rows[$i] = [];
            foreach($keys as $key){
                $rows[$i][$key] = $datadetail[$key][$i];
            }
        }
        for($row = 0, $cnt = count($rows); $row < $cnt; $row++){
            $column_data = $rows[$row];
            $column_keys = array_keys($column_data);
            $id = $column_data[$idColumn];
            $queryCheck = $this->db->get_where($table, array($idColumn => $id, 'masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'isDeleted' => 0));
            $count = $queryCheck->num_rows();
            if($count === 0){
                foreach($column_keys as $key){
                    $datainsert[$key] = $column_data[$key];
                }
                $datainsert['createdby'] = $this->userId;
                $datainsert['createddate'] = date($this->dateTimeFormat);
                unset($datainsert['id']);
                $datainsert['masterId'] = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                $resultdetail = $this->loginModel->recordAjaxSave($datainsert, $table);
            }
            if($count > 0){
                foreach($column_keys as $key){
                    $dataupdate[$key] = $column_data[$key];
                }
                $dataupdate['updatedby'] = $this->userId;
                $dataupdate['updateddate'] = date($this->dateTimeFormat);
                unset($dataupdate['id']);
                $resultdetail = $this->loginModel->recordAjaxUpdate($idColumn, $id, $dataupdate, $table);
            }
        }
        unset($datadetail);
        unset($rows);
        unset($column_data);
        unset($column_keys);
        unset($datainsert);
        unset($dataupdate);

        $tableName = 'tabledetailcontainerclosure-';
        $datadetail['id'] = $data[$tableName.'id_detail'];
        $datadetail['packagingComponent'] = $data[$tableName.'packagingComponent_detail'];
        $datadetail['materialOfConstruction'] = $data[$tableName.'materialOfConstruction_detail'];
        $idColumn = 'id';
        $table = 'tbl_qoscontainerclosure';
        $keys = array_keys($datadetail);
        $rows = [];
        for($i = 0, $len = count($datadetail[$keys[0]]); $i < $len; $i++){
            $rows[$i] = [];
            foreach($keys as $key){
                $rows[$i][$key] = $datadetail[$key][$i];
            }
        }
        for($row = 0, $cnt = count($rows); $row < $cnt; $row++){
            $column_data = $rows[$row];
            $column_keys = array_keys($column_data);
            $id = $column_data[$idColumn];
            $queryCheck = $this->db->get_where($table, array($idColumn => $id, 'masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'isDeleted' => 0));
            $count = $queryCheck->num_rows();
            if($count === 0){
                foreach($column_keys as $key){
                    $datainsert[$key] = $column_data[$key];
                }
                $datainsert['createdby'] = $this->userId;
                $datainsert['createddate'] = date($this->dateTimeFormat);
                unset($datainsert['id']);
                $datainsert['masterId'] = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                $resultdetail = $this->loginModel->recordAjaxSave($datainsert, $table);
            }
            if($count > 0){
                foreach($column_keys as $key){
                    $dataupdate[$key] = $column_data[$key];
                }
                $dataupdate['updatedby'] = $this->userId;
                $dataupdate['updateddate'] = date($this->dateTimeFormat);
                unset($dataupdate['id']);
                $resultdetail = $this->loginModel->recordAjaxUpdate($idColumn, $id, $dataupdate, $table);
            }
        }
        unset($datadetail);
        unset($rows);
        unset($column_data);
        unset($column_keys);
        unset($datainsert);
        unset($dataupdate);

        $tableName = 'tabledetailstability-';
        $datadetail['id'] = $data[$tableName.'id_detail'];
        $datadetail['storageCondition'] = $data[$tableName.'storageCondition_detail'];
        $datadetail['batchNo'] = $data[$tableName.'batchNo_detail'];
        $datadetail['batchSize'] = $data[$tableName.'batchSize_detail'];
        $datadetail['containerClosure'] = $data[$tableName.'containerClosure_detail'];
        $datadetail['completedTestingInterval'] = $data[$tableName.'completedTestingInterval_detail'];
        $datadetail['conclusion'] = $data[$tableName.'conclusion_detail'];
        $idColumn = 'id';
        $table = 'tbl_qosstability';
        $keys = array_keys($datadetail);
        $rows = [];
        for($i = 0, $len = count($datadetail[$keys[0]]); $i < $len; $i++){
            $rows[$i] = [];
            foreach($keys as $key){
                $rows[$i][$key] = $datadetail[$key][$i];
            }
        }
        for($row = 0, $cnt = count($rows); $row < $cnt; $row++){
            $column_data = $rows[$row];
            $column_keys = array_keys($column_data);
            $id = $column_data[$idColumn];
            $queryCheck = $this->db->get_where($table, array($idColumn => $id, 'masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'isDeleted' => 0));
            $count = $queryCheck->num_rows();
            if($count === 0){
                foreach($column_keys as $key){
                    $datainsert[$key] = $column_data[$key];
                }
                $datainsert['createdby'] = $this->userId;
                $datainsert['createddate'] = date($this->dateTimeFormat);
                unset($datainsert['id']);
                $datainsert['masterId'] = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                $resultdetail = $this->loginModel->recordAjaxSave($datainsert, $table);
            }
            if($count > 0){
                foreach($column_keys as $key){
                    $dataupdate[$key] = $column_data[$key];
                }
                $dataupdate['updatedby'] = $this->userId;
                $dataupdate['updateddate'] = date($this->dateTimeFormat);
                unset($dataupdate['id']);
                $resultdetail = $this->loginModel->recordAjaxUpdate($idColumn, $id, $dataupdate, $table);
            }
        }
        unset($datadetail);
        unset($rows);
        unset($column_data);
        unset($column_keys);
        unset($datainsert);
        unset($dataupdate);

        $tableName = 'tabledetailstability3-';
        $datadetail['id'] = $data[$tableName.'id_detail'];
        $datadetail['storageCondition3'] = $data[$tableName.'storageCondition3_detail'];
        $datadetail['batchNo3'] = $data[$tableName.'batchNo3_detail'];
        $datadetail['batchSize3'] = $data[$tableName.'batchSize3_detail'];
        $datadetail['containerClosure3'] = $data[$tableName.'containerClosure3_detail'];
        $datadetail['completedTestingInterval3'] = $data[$tableName.'completedTestingInterval3_detail'];
        $datadetail['conclusion3'] = $data[$tableName.'conclusion3_detail'];
        $idColumn = 'id';
        $table = 'tbl_qosstability3';
        $keys = array_keys($datadetail);
        $rows = [];
        for($i = 0, $len = count($datadetail[$keys[0]]); $i < $len; $i++){
            $rows[$i] = [];
            foreach($keys as $key){
                $rows[$i][$key] = $datadetail[$key][$i];
            }
        }
        for($row = 0, $cnt = count($rows); $row < $cnt; $row++){
            $column_data = $rows[$row];
            $column_keys = array_keys($column_data);
            $id = $column_data[$idColumn];
            $queryCheck = $this->db->get_where($table, array($idColumn => $id, 'masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'isDeleted' => 0));
            $count = $queryCheck->num_rows();
            if($count === 0){
                foreach($column_keys as $key){
                    $datainsert[$key] = $column_data[$key];
                }
                $datainsert['createdby'] = $this->userId;
                $datainsert['createddate'] = date($this->dateTimeFormat);
                unset($datainsert['id']);
                $datainsert['masterId'] = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                $resultdetail = $this->loginModel->recordAjaxSave($datainsert, $table);
            }
            if($count > 0){
                foreach($column_keys as $key){
                    $dataupdate[$key] = $column_data[$key];
                }
                $dataupdate['updatedby'] = $this->userId;
                $dataupdate['updateddate'] = date($this->dateTimeFormat);
                unset($dataupdate['id']);
                $resultdetail = $this->loginModel->recordAjaxUpdate($idColumn, $id, $dataupdate, $table);
            }
        }
        unset($datadetail);
        unset($rows);
        unset($column_data);
        unset($column_keys);
        unset($datainsert);
        unset($dataupdate);

        $tableName = 'tabledetailstability2-';
        $datadetail['id'] = $data[$tableName.'id_detail'];
        $datadetail['storageCondition2'] = $data[$tableName.'storageCondition2_detail'];
        $datadetail['batchNo2'] = $data[$tableName.'batchNo2_detail'];
        $datadetail['batchSize2'] = $data[$tableName.'batchSize2_detail'];
        $datadetail['containerClosure2'] = $data[$tableName.'containerClosure2_detail'];
        $datadetail['completedTestingInterval2'] = $data[$tableName.'completedTestingInterval2_detail'];
        $datadetail['conclusion2'] = $data[$tableName.'conclusion2_detail'];
        $idColumn = 'id';
        $table = 'tbl_qosstability2';
        $keys = array_keys($datadetail);
        $rows = [];
        for($i = 0, $len = count($datadetail[$keys[0]]); $i < $len; $i++){
            $rows[$i] = [];
            foreach($keys as $key){
                $rows[$i][$key] = $datadetail[$key][$i];
            }
        }
        for($row = 0, $cnt = count($rows); $row < $cnt; $row++){
            $column_data = $rows[$row];
            $column_keys = array_keys($column_data);
            $id = $column_data[$idColumn];
            $queryCheck = $this->db->get_where($table, array($idColumn => $id, 'masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'isDeleted' => 0));
            $count = $queryCheck->num_rows();
            if($count === 0){
                foreach($column_keys as $key){
                    $datainsert[$key] = $column_data[$key];
                }
                $datainsert['createdby'] = $this->userId;
                $datainsert['createddate'] = date($this->dateTimeFormat);
                unset($datainsert['id']);
                $datainsert['masterId'] = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                $resultdetail = $this->loginModel->recordAjaxSave($datainsert, $table);
            }
            if($count > 0){
                foreach($column_keys as $key){
                    $dataupdate[$key] = $column_data[$key];
                }
                $dataupdate['updatedby'] = $this->userId;
                $dataupdate['updateddate'] = date($this->dateTimeFormat);
                unset($dataupdate['id']);
                $resultdetail = $this->loginModel->recordAjaxUpdate($idColumn, $id, $dataupdate, $table);
            }
        }
        unset($datadetail);
        unset($rows);
        unset($column_data);
        unset($column_keys);
        unset($datainsert);
        unset($dataupdate);

        $tableName = 'tabledetailproposedstoragecondition-';
        $datadetail['id'] = $data[$tableName.'id_detail'];
        $datadetail['containerClosureSystem'] = $data[$tableName.'containerClosureSystem_detail'];
        $datadetail['storageConditions'] = $data[$tableName.'storageConditions_detail'];
        $datadetail['retestPeriod'] = $data[$tableName.'retestPeriod_detail'];
        $idColumn = 'id';
        $table = 'tbl_qosproposedstoragecondition';
        $keys = array_keys($datadetail);
        $rows = [];
        for($i = 0, $len = count($datadetail[$keys[0]]); $i < $len; $i++){
            $rows[$i] = [];
            foreach($keys as $key){
                $rows[$i][$key] = $datadetail[$key][$i];
            }
        }
        for($row = 0, $cnt = count($rows); $row < $cnt; $row++){
            $column_data = $rows[$row];
            $column_keys = array_keys($column_data);
            $id = $column_data[$idColumn];
            $queryCheck = $this->db->get_where($table, array($idColumn => $id, 'masterId' => substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1), 'isDeleted' => 0));
            $count = $queryCheck->num_rows();
            if($count === 0){
                foreach($column_keys as $key){
                    $datainsert[$key] = $column_data[$key];
                }
                $datainsert['createdby'] = $this->userId;
                $datainsert['createddate'] = date($this->dateTimeFormat);
                unset($datainsert['id']);
                $datainsert['masterId'] = substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1);
                $resultdetail = $this->loginModel->recordAjaxSave($datainsert, $table);
            }
            if($count > 0){
                foreach($column_keys as $key){
                    $dataupdate[$key] = $column_data[$key];
                }
                $dataupdate['updatedby'] = $this->userId;
                $dataupdate['updateddate'] = date($this->dateTimeFormat);
                unset($dataupdate['id']);
                $resultdetail = $this->loginModel->recordAjaxUpdate($idColumn, $id, $dataupdate, $table);
            }
        }
        unset($datadetail);
        unset($rows);
        unset($column_data);
        unset($column_keys);
        unset($datainsert);
        unset($dataupdate);

        $this->session->unset_userdata('recordId');

        if($result > 0 || $resultdetail > 0){
            $this->session->set_flashdata('success', 'Record updated successfully.');
        }
        else{
            $this->session->set_flashdata('error', 'Something went wrong.');
        }

        $this->session->set_userdata(array('recordId' =>$this->session->userdata('applicationId')));
        $this->session->unset_userdata('applicationId');
        //redirect('applyregistrationEdit/'.substr($_SERVER['HTTP_REFERER'], strrpos($_SERVER['HTTP_REFERER'], '/') + 1));
        echo "<script>window.close();</script>";
    }

    function applyregistration()
    {
        $this->global['dashboard'] = '';

        $found=false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if(!empty($rolePage))
        {
            foreach ($rolePage as $res)
            {
                $pageName = $res->url;
                if(__FUNCTION__ == $pageName){
                    $found=true;
                    break;
                }
            }
        }
        if($found == false){
            $this->accessDenied();
            return;
        }

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $data['pageColumn'] = $this->loginModel->pagecolumnGet($data['pageTitle'][0]->id);

        $functionName = __FUNCTION__;

        $data['records'] = $this->myModel->$functionName();

        $data['dashboard'] = '';
        $this->global['pageTitle'] = $this->companyProject.' | '.$data['pageTitle'][0]->friendlyName;

        $this->loadViews('company/'.$this->companyName.'/'.__FUNCTION__, $this->global, $data, NULL);
    }

    function applyregistrationAdd()
    {
        $this->global['dashboard'] = '';

        $found=false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if(!empty($rolePage))
        {
            foreach ($rolePage as $res)
            {
                $pageName = $res->url;
                if(__FUNCTION__ == $pageName){
                    $found=true;
                    break;
                }
            }
        }
        if($found == false){
            $this->accessDenied();
            return;
        }

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $data['pageColumn'] = $this->loginModel->pagecolumnGet($data['pageTitle'][0]->id);

        $functionName = __FUNCTION__;

        $data['records'] = $this->myModel->$functionName($this->companyId);
        $data['status'] = $this->myModel->applyRegistrationStatusGet();
        $data['registrationType'] = $this->myModel->registrationTypeGet();
        $data['dose'] = $this->myModel->doseGet();
        $data['strength'] = $this->myModel->strengthGet();
        $data['ctd'] = $this->myModel->ctdGet();
        $data['ctdStructure'] = $this->myModel->ctdStructureGet();
        $data['pharmacopeia'] = $this->myModel->pharmacopeiaGet();
        $data['atcCode'] = $this->myModel->atcCodeGet();
        $data['innCode'] = $this->myModel->innCodeGet();
        $data['productOrigin'] = $this->myModel->productOriginGet();
        $data['productCategory'] = $this->myModel->productCategoryGet();
        $data['section'] = $this->myModel->sectionGet();
        $data['dosage'] = $this->myModel->dosageGet();
        $data['intendedMarket'] = $this->myModel->intendedMarketGet();
        $data['manufacturer'] = $this->myModel->manufacturerGet();
        $data['country'] = $this->myModel->countryGet();
        $data['usedFor'] = $this->myModel->usedForGet();
        $data['routeOfAdmin'] = $this->myModel->routeOfAdminGet();
        $data['shelfLife'] = $this->myModel->shelfLifeGet();
        $data['storageCondition'] = $this->myModel->storageConditionGet();
        $data['licenses'] = $this->myModel->licensesGet();
        $data['licensesApproved'] = $this->myModel->licensesApprovedGet();
        $data['priorityReason'] = $this->myModel->registrationPriorityReasonGet();

        $this->global['pageTitle'] = $this->companyProject.' | '.$data['pageTitle'][0]->friendlyName;

        $this->loadViewsSimple('company/'.$this->companyName.'/'.__FUNCTION__, $this->global, $data, NULL);
    }

    function applyregistrationEdit($id)
    {
        $this->global['dashboard'] = '';

        $found=false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if(!empty($rolePage))
        {
            foreach ($rolePage as $res)
            {
                $pageName = $res->url;
                if(__FUNCTION__ == $pageName){
                    $found=true;
                    break;
                }
            }
        }
        if($found == false){
            $this->accessDenied();
            return;
        }

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $data['pageColumn'] = $this->loginModel->pagecolumnGet($data['pageTitle'][0]->id);

        $functionName = __FUNCTION__;
        $this->session->set_userdata(array('recordId' =>$id));

        $data['records'] = $this->myModel->$functionName($id);
        $data['recordsDetailProposedName'] = $this->myModel->applyregistrationDetailProposedNameEdit($id);
        $data['recordsDetailProposedPrice'] = $this->myModel->applyregistrationDetailProposedPriceEdit($id);
        $data['recordsDetailDose'] = $this->myModel->applyregistrationDetailProposedDoseEdit($id);
        $data['recordsDetailStrength'] = $this->myModel->applyregistrationDetailProposedStrengthEdit($id);
        $data['recordsDetailCTD'] = $this->myModel->applyregistrationDetailCTDEdit($id);
        $data['recordsDetailDomesticReference'] = $this->myModel->applyregistrationDetailDomesticReferenceEdit($id);
        $data['recordsDetailInternationalReference'] = $this->myModel->applyregistrationDetailInternationalReferenceEdit($id);
        $data['recordsDetailINNCode'] = $this->myModel->applyregistrationDetailINNCodeEdit($id);
        $data['recordsCTD'] = $this->myModel->applyregistrationCTDEdit($id);
        $data['recordsDetailCTDSPart'] = $this->myModel->applyregistrationDetailCTDSPartEdit($id);
        $data['recordsDetailOtherInfo'] = $this->myModel->applyregistrationDetailOtherInfoEdit($id);
        $data['recordsDetailCompositionOfDrugProduct'] = $this->myModel->applyregistrationDetailCompositionOfDrugProductEdit($id);
        $data['recordsDetailProductManufacturer'] = $this->myModel->applyregistrationDetailProductManufacturerEdit($id);
        $data['recordsDetailBatchFormula'] = $this->myModel->applyregistrationDetailBatchFormulaEdit($id);
        $data['recordsDetailControlsPerformed'] = $this->myModel->applyregistrationDetailControlsPerformedEdit($id);
        $data['recordsDetailBatchAnalysis'] = $this->myModel->applyregistrationDetailBatchAnalysisEdit($id);
        $data['recordsDetailContainerClosureSystem'] = $this->myModel->applyregistrationDetailContainerClosureSystemEdit($id);
        $data['recordsDetailProductStability'] = $this->myModel->applyregistrationDetailProductStabilityEdit($id);
        $data['recordsDetailProductStability2'] = $this->myModel->applyregistrationDetailProductStability2Edit($id);
        $data['recordsDetailStorageStatement'] = $this->myModel->applyregistrationDetailStorageStatementEdit($id);
        $data['recordsDetailProposedStorageStatement'] = $this->myModel->applyregistrationDetailProposedStorageStatementEdit($id);
        $data['recordsDetailExcipients'] = $this->myModel->applyregistrationDetailExcipientsEdit($id);
        $data['recordsDetailSpecificIdentification'] = $this->myModel->applyregistrationDetailSpecificIdentificationEdit($id);
        $data['recordsDetailQuery'] = $this->myModel->registrationDetailQueryEdit($id);
        $data['status'] = $this->myModel->applyRegistrationStatusGet();
        $data['registrationType'] = $this->myModel->registrationTypeGet();
        $data['dose'] = $this->myModel->doseGet();
        $data['strength'] = $this->myModel->strengthGet();
        $data['ctd'] = $this->myModel->ctdGet();
        $data['ctdStructure'] = $this->myModel->ctdStructureGet();
        $data['pharmacopeia'] = $this->myModel->pharmacopeiaGet();
        $data['atcCode'] = $this->myModel->atcCodeGet();
        $data['innCode'] = $this->myModel->innCodeGet();
        $data['productOrigin'] = $this->myModel->productOriginGet();
        $data['productCategory'] = $this->myModel->productCategoryGet();
        $data['section'] = $this->myModel->sectionGet();
        $data['dosage'] = $this->myModel->dosageGet();
        $data['intendedMarket'] = $this->myModel->intendedMarketGet();
        $data['manufacturer'] = $this->myModel->manufacturerGet();
        $data['country'] = $this->myModel->countryGet();
        $data['usedFor'] = $this->myModel->usedForGet();
        $data['routeOfAdmin'] = $this->myModel->routeOfAdminGet();
        $data['shelfLife'] = $this->myModel->shelfLifeGet();
        $data['storageCondition'] = $this->myModel->storageConditionGet();
        $data['licenses'] = $this->myModel->licensesGet();
        $data['licensesApproved'] = $this->myModel->licensesApprovedGet();
        $data['priorityReason'] = $this->myModel->registrationPriorityReasonGet();

        $seenBy = explode(",",$data['records'][0]->seenBy);
        if(!(in_array($this->userId, $seenBy))){
            $this->loginModel->seenByUpdate($id, $this->userId, 'tbl_registration');
        }
        if($data['records'][0]->registrationStatus == 'Draft'){
            if($this->roleId <> '26' && $data['records'][0]->companyUniqueNo <> $this->companyUniqueNo){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(substr(__FUNCTION__, 0, strcspn(__FUNCTION__, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')));
            }
        }
        if($data['records'][0]->registrationStatus == 'Referred Back To Company (Editable)'){
            if($this->roleId <> '26' && $data['records'][0]->companyUniqueNo <> $this->companyUniqueNo){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(substr(__FUNCTION__, 0, strcspn(__FUNCTION__, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')));
            }
        }
        if($data['records'][0]->registrationStatus == 'Referred Back To Company (Locked)'){
            if($this->roleId <> '26' && $data['records'][0]->companyUniqueNo <> $this->companyUniqueNo){
                $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
                redirect(substr(__FUNCTION__, 0, strcspn(__FUNCTION__, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')));
            }
        }
        if($data['records'][0]->registrationStatus == 'Submitted'){
            $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
            redirect(substr(__FUNCTION__, 0, strcspn(__FUNCTION__, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')));
        }
        if($data['records'][0]->registrationStatus == 'Screening'){
            $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
            redirect(substr(__FUNCTION__, 0, strcspn(__FUNCTION__, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')));
        }
        if($data['records'][0]->registrationStatus == 'Under R and I'){
            $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
            redirect(substr(__FUNCTION__, 0, strcspn(__FUNCTION__, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')));
        }
        if($data['records'][0]->registrationStatus == 'Received By DRAP'){
            $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
            redirect(substr(__FUNCTION__, 0, strcspn(__FUNCTION__, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')));
        }
        if($data['records'][0]->registrationStatus == 'Under Review Stage 1'){
            $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
            redirect(substr(__FUNCTION__, 0, strcspn(__FUNCTION__, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')));
        }
        if($data['records'][0]->registrationStatus == 'Under Review Stage 2'){
            $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
            redirect(substr(__FUNCTION__, 0, strcspn(__FUNCTION__, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')));
        }
        if($data['records'][0]->registrationStatus == 'Review Complete'){
            $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
            redirect(substr(__FUNCTION__, 0, strcspn(__FUNCTION__, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')));
        }
        if($data['records'][0]->registrationStatus == 'Under Inspection'){
            $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
            redirect(substr(__FUNCTION__, 0, strcspn(__FUNCTION__, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')));
        }
        if($data['records'][0]->registrationStatus == 'Under Board Stage 3'){
            $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
            redirect(substr(__FUNCTION__, 0, strcspn(__FUNCTION__, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')));
        }
        if($data['records'][0]->registrationStatus == 'Recommended By Board Stage 4'){
            $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
            redirect(substr(__FUNCTION__, 0, strcspn(__FUNCTION__, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')));
        }
        if($data['records'][0]->registrationStatus == 'Pricing Complete'){
            $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
            redirect(substr(__FUNCTION__, 0, strcspn(__FUNCTION__, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')));
        }
        if($data['records'][0]->registrationStatus == 'Deferred and Closed'){
            $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
            redirect(substr(__FUNCTION__, 0, strcspn(__FUNCTION__, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')));
        }
        if($data['records'][0]->registrationStatus == 'Approved'){
            $this->session->set_flashdata('error', 'You are not authorized to edit this record.');
            redirect(substr(__FUNCTION__, 0, strcspn(__FUNCTION__, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')));
        }
        // if($data['records'][0]->inUseBy == 0){
        //     $this->loginModel->inUseUpdate($id, array('inUseBy' => $this->userId, 'inUseTime' => date($this->dateTimeFullFormat)), 'tbl_registration');
        // }
        // else{
        //     $this->session->set_flashdata('error', 'Record is locked for editing.');
        //     redirect(substr(__FUNCTION__, 0, strcspn(__FUNCTION__, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')));
        // }

        $this->global['pageTitle'] = $this->companyProject.' | '.$data['pageTitle'][0]->friendlyName;

        $this->loadViewsSimple('company/'.$this->companyName.'/'.__FUNCTION__, $this->global, $data, NULL);
    }

    function applyregistrationView($id)
    {
        $this->global['dashboard'] = '';

        $found=false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if(!empty($rolePage))
        {
            foreach ($rolePage as $res)
            {
                $pageName = $res->url;
                if(__FUNCTION__ == $pageName){
                    $found=true;
                    break;
                }
            }
        }
        if($found == false){
            $this->accessDenied();
            return;
        }

        $data['pageTitle'] = $this->loginModel->pageTitleGet(__FUNCTION__);
        $data['pageColumn'] = $this->loginModel->pagecolumnGet($data['pageTitle'][0]->id);

        $functionName = substr(__FUNCTION__, 0, strcspn(__FUNCTION__, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')).'Edit';

        $data['records'] = $this->myModel->$functionName($id);
        $data['recordsDetailProposedName'] = $this->myModel->applyregistrationDetailProposedNameEdit($id);
        $data['recordsDetailProposedPrice'] = $this->myModel->applyregistrationDetailProposedPriceEdit($id);
        $data['recordsDetailDose'] = $this->myModel->applyregistrationDetailProposedDoseEdit($id);
        $data['recordsDetailStrength'] = $this->myModel->applyregistrationDetailProposedStrengthEdit($id);
        $data['recordsDetailCTD'] = $this->myModel->applyregistrationDetailCTDEdit($id);
        $data['recordsDetailDomesticReference'] = $this->myModel->applyregistrationDetailDomesticReferenceEdit($id);
        $data['recordsDetailInternationalReference'] = $this->myModel->applyregistrationDetailInternationalReferenceEdit($id);
        $data['recordsDetailINNCode'] = $this->myModel->applyregistrationDetailINNCodeEdit($id);
        $data['recordsCTD'] = $this->myModel->applyregistrationCTDEdit($id);
        $data['recordsDetailCTDSPart'] = $this->myModel->applyregistrationDetailCTDSPartEdit($id);
        $data['recordsDetailOtherInfo'] = $this->myModel->applyregistrationDetailOtherInfoEdit($id);
        $data['recordsDetailCompositionOfDrugProduct'] = $this->myModel->applyregistrationDetailCompositionOfDrugProductEdit($id);
        $data['recordsDetailProductManufacturer'] = $this->myModel->applyregistrationDetailProductManufacturerEdit($id);
        $data['recordsDetailBatchFormula'] = $this->myModel->applyregistrationDetailBatchFormulaEdit($id);
        $data['recordsDetailControlsPerformed'] = $this->myModel->applyregistrationDetailControlsPerformedEdit($id);
        $data['recordsDetailBatchAnalysis'] = $this->myModel->applyregistrationDetailBatchAnalysisEdit($id);
        $data['recordsDetailContainerClosureSystem'] = $this->myModel->applyregistrationDetailContainerClosureSystemEdit($id);
        $data['recordsDetailProductStability'] = $this->myModel->applyregistrationDetailProductStabilityEdit($id);
        $data['recordsDetailProductStability2'] = $this->myModel->applyregistrationDetailProductStability2Edit($id);
        $data['recordsDetailStorageStatement'] = $this->myModel->applyregistrationDetailStorageStatementEdit($id);
        $data['recordsDetailProposedStorageStatement'] = $this->myModel->applyregistrationDetailProposedStorageStatementEdit($id);
        $data['recordsDetailExcipients'] = $this->myModel->applyregistrationDetailExcipientsEdit($id);
        $data['recordsDetailSpecificIdentification'] = $this->myModel->applyregistrationDetailSpecificIdentificationEdit($id);
        $data['recordsDetailQuery'] = $this->myModel->registrationDetailQueryEdit($id);
        $data['status'] = $this->myModel->applyRegistrationStatusGet();
        $data['registrationType'] = $this->myModel->registrationTypeGet();
        $data['dose'] = $this->myModel->doseGet();
        $data['strength'] = $this->myModel->strengthGet();
        $data['ctd'] = $this->myModel->ctdGet();
        $data['ctdStructure'] = $this->myModel->ctdStructureGet();
        $data['pharmacopeia'] = $this->myModel->pharmacopeiaGet();
        $data['atcCode'] = $this->myModel->atcCodeGet();
        $data['innCode'] = $this->myModel->innCodeGet();
        $data['productOrigin'] = $this->myModel->productOriginGet();
        $data['productCategory'] = $this->myModel->productCategoryGet();
        $data['section'] = $this->myModel->sectionGet();
        $data['dosage'] = $this->myModel->dosageGet();
        $data['intendedMarket'] = $this->myModel->intendedMarketGet();
        $data['manufacturer'] = $this->myModel->manufacturerGet();
        $data['country'] = $this->myModel->countryGet();
        $data['usedFor'] = $this->myModel->usedForGet();
        $data['routeOfAdmin'] = $this->myModel->routeOfAdminGet();
        $data['shelfLife'] = $this->myModel->shelfLifeGet();
        $data['storageCondition'] = $this->myModel->storageConditionGet();
        $data['licenses'] = $this->myModel->licensesGet();
        $data['licensesApproved'] = $this->myModel->licensesApprovedGet();
        $data['priorityReason'] = $this->myModel->registrationPriorityReasonGet();

        $seenBy = explode(",",$data['records'][0]->seenBy);
        if(!(in_array($this->userId, $seenBy))){
            $this->loginModel->seenByUpdate($id, $this->userId, 'tbl_registration');
        }

        $this->global['pageTitle'] = $this->companyProject.' | '.$data['pageTitle'][0]->friendlyName;

        $this->loadViewsSimple('company/'.$this->companyName.'/'.__FUNCTION__, $this->global, $data, NULL);
    }

    function applyregistrationDelete($id)
    {
        $this->global['dashboard'] = '';

        $found=false;
        $rolePage = $this->loginModel->rolePageGet($this->roleId);
        if(!empty($rolePage))
        {
            foreach ($rolePage as $res)
            {
                $pageName = $res->url;
                if(__FUNCTION__ == $pageName){
                    $found=true;
                    break;
                }
            }
        }
        if($found == false){
            $this->accessDenied();
            return;
        }

        $functionName = __FUNCTION__;

        $this->db->select('BaseTbl.registrationStatus');
        $this->db->from('tbl_registration as BaseTbl');
        $this->db->where('BaseTbl.id', $id);
        $query = $this->db->get();
        $count = $query->num_rows();
        if($count === 0){
            $this->session->set_flashdata('error', 'No record found.');
            $result = 0;
        }
        if($count > 0){
            foreach ($query->result() as $row){
                $registrationStatus = $row->registrationStatus;
                if($registrationStatus == 'Draft'){
                    $data = array('isDeleted'=>1, 'updateddate'=>date($this->dateTimeFormat), 'updatedby'=>$this->userId);

                    $result = $this->myModel->$functionName($id, $data);
                }
                else{
                    $this->session->set_flashdata('error', 'Record cannot be deleted.');
                    $result = 0;
                }
            }
        }

        if($result > 0){
            $this->session->set_flashdata('success', 'Record deleted successfully.');
        }
        else{
            $this->session->set_flashdata('error', 'Something went wrong.');
        }

        redirect(substr(__FUNCTION__, 0, strcspn(__FUNCTION__, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')));
    }

// -- CTD



}

